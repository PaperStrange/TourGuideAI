# TourGuideAI Project Workflow

This document outlines the standard workflow for executing a new project phase in the TourGuideAI project. This workflow ensures consistent process, comprehensive documentation, and knowledge preservation throughout the project lifecycle. 

## Project Phase Workflow

### 1. Phase Initialization
- Create a checklist from this workflow file to track completion of each workflow step
- Review `.milestones` file to understand the overall project structure
- Identify the current phase requirements and objectives
- Review previous phase documents to understand decisions and rationale
- Perform a document inventory scan to identify all documentation artifacts that need updates
- Break down the phase into logical milestones and tasks
- Update `.milestones` file with the new logical milestones and **objects**
- Update `.project` file with the new phase details, **key results** for **objects** in `.milestones`
- Update `.todos` file with specific actionable items for **key results** in `.project` 
- Check existing planning files in 'docs' directory before creating new ones to avoid duplication
- Create a whole planning file for each phase and use a consistent naming convention for this file (e.g., `project.phase#-[focus]-plan.md`)
- Update or create detail planning files in 'docs' with specific actionable items for the new phase
- Ensure all planning files follow the same format structure as existing plan files
- Create proper cross-references between the whole planning file and related detail planning files
- Planning artifacts should refer to the corresponding task and lines in `.todos` with a link
- Schedule explicit code review sessions as separate tasks with clear artifacts and outcomes

### 2. Development Process
- Execute tasks according to the priorities defined in `.todos`
- Complete one functional area before moving to the next to reduce context switching
- Always read files thoroughly before editing them to avoid unintended side effects
- Use the OKR framework consistently: Objectives (milestones) → Key Results (project) → Tasks (todos)
- Update `.milestones` file as objects are decided
  - Use task markers to indicate the task progress, Mark completed tasks with [X]
  - Add completion dates
- Update `.project` file as key results for each milestones are decided
  - Use task markers to indicate the task progress, Mark completed tasks with [X]
  - Add completion dates
- Update `.todos` file as tasks are completed, including:
  - Use task markers to indicate the task progress, Mark completed tasks with [X]
  - Add completion dates
  - Record any issues encountered
  - Note key learnings
- Update `.todos` file regularly to reflect current status and any new tasks
- Update `.milestones` file regularly to reflect current status and any new milestone object
- Update `.project` file regularly to reflect current status and any new key result
- Treat documentation and review tasks with equal priority to implementation tasks
- Compare the milestones in `.milestones` with completed milestones in `.project` regularly to identify gaps
- Compare project completion criteria to know whether the project phase is ready to close, then update project status, including:
  - all object in `.milestones` and key results in `.project` are marked as done
  - all tasks in `.todos` are marked as done
  - all frontend and backend tests in `src/tests` and `tests` are marked as success
- Create detailed test scenarios with specific metrics and clear acceptance criteria

### 3. Test Management and Organization
- Organize all tests according to their type rather than by feature to improve discoverability and maintenance
- Store all test artifacts in the appropriate directories:
  - Store test plans in `docs/project_lifecycle/all_tests/plans/`
  - Store test results in `docs/project_lifecycle/all_tests/results/`
  - Store test reference documentation in `docs/project_lifecycle/all_tests/references/`
- Create and maintain separate test suites for:
  - Frontend component tests - focus on rendering and user interactions
  - Backend integration tests - focus on API contracts and service interactions
  - End-to-end tests - full workflow testing across components
  - Performance tests - measure response times and resource usage
  - Security tests - validate authentication, authorization, and data protection
- Frontend test development:
  - Create mock services in `src/__mocks__` to isolate component testing
  - Use standardized mock factory patterns for common services
  - Ensure tests are compatible with current React version
  - Maintain a comprehensive `setupTests.js` file for shared testing utilities
  - Document any canvas/WebGL mocking strategies in test references
- Backend test development:
  - Create environment variables and test configuration in `/tests/config`
  - Set up appropriate database isolation between test runs
  - Define standard patterns for API contract testing
  - Create test data factories for generating consistent test data
- Test documentation:
  - Create reference documentation for all test patterns and conventions
  - Document mock strategies for external services
  - Maintain test coverage reports in results folder
  - Create and update test user stories for key workflows
- Test execution and CI/CD integration:
  - Define test execution commands in package.json
  - Configure test suites to run independently or together
  - Ensure CI/CD pipeline executes appropriate test suites
  - Report test results in a standardized format
- Test maintenance:
  - Review tests for flakiness and address root causes
  - Update tests when component or API contracts change
  - Refactor tests when patterns or conventions are updated
  - Document test-specific lessons learned in project.lessons.md

### 4. Test-Driven Refactoring
- Use test results from `docs/project_lifecycle/all_tests/results/` to identify refactoring candidates
- Document all identified refactoring opportunities in `docs/project_lifecycle/code_and_project_structure_refactors/plans/test-driven-refactors.md`
- Categorize refactoring needs based on the following criteria:
  - Test flakiness issues - components that produce inconsistent test results
  - Code coverage gaps - areas with insufficient test coverage
  - Performance bottlenecks - components that fail performance tests
  - Architectural issues - components that are difficult to test due to design
  - Technical debt - components with excessive mocking requirements
- Create detailed refactoring plans that include:
  - Current code structure and identified issues
  - Proposed changes with expected improvements
  - Impact on existing tests
  - Testing strategy for the refactored code
- Store refactoring plans in `docs/project_lifecycle/code_and_project_structure_refactors/plans/`
- Reference test result documentation that prompted the refactoring
- Consult refactoring patterns from `docs/project_lifecycle/code_and_project_structure_refactors/references/`
- Execute refactoring in a test-driven approach:
  - Write or update tests to reflect expected behavior after refactoring
  - Implement refactoring to make tests pass
  - Run full test suite to ensure no regressions
- Document all completed refactors in `docs/project_lifecycle/code_and_project_structure_refactors/records/project.refactors.md`
- Record specific test improvements resulting from refactors:
  - Increased test coverage
  - Reduced test execution time
  - Eliminated flaky tests
  - Simplified test setup and mocking
- Update test patterns and mock strategies based on successful refactors

### 5. Phase Completion and Documentation Updates
- Remove duplicated or obsolete files
- Update architecture documentation to reflect changes
- Perform explicit verification against workflow requirements and create a formal sign-off process
- Update all feature-level README files to reflect changes
- Update `project.versions.md` with new version details:
  - Version number and date
  - Added features
  - Changed elements
  - Fixed issues
- Update each `README.md` within project folders to reflect changes and make sure changed contents are correctly recorded

### 6. Process Monitoring and Version Control
- Perform explicit verification against workflow requirements and create a formal sign-off process
- Document the process completion in `docs/project_lifecycle/process_monitors/records/project.phase-completion.md`:
  - Create a comprehensive phase completion report
  - Document all major decisions made during the phase
  - List challenges encountered and solutions implemented
  - Record performance metrics and improvements
- Maintain the implementation summary in `docs/project_lifecycle/process_monitors/implementation_summary.md`:
  - Update implementation status for all features
  - Document architecture evolution and technical debt
  - Track integration points between components
- Create process monitor checkpoints in `docs/project_lifecycle/process_monitors/records/`:
  - Record all process deviations and their justifications
  - Document process improvements identified during the phase
  - Track workflow adherence metrics and bottlenecks
- Update versioning artifacts in `docs/project_lifecycle/version_control/records/`:
  - Ensure all version numbering follows the established pattern
  - Create appropriate release notes with categorized changes
  - Tag repository with appropriate version labels
  - Update the version history documentation
- Submit version transition plans to `docs/project_lifecycle/version_control/plans/`:
  - Document upgrade paths for existing installations
  - Create rollback procedures for critical components
  - Detail backward compatibility guarantees
- Reference and update versioning standards in `docs/project_lifecycle/version_control/references/`:
  - Ensure adherence to semantic versioning principles
  - Maintain compatibility matrices for dependencies
  - Document API versioning strategy for public interfaces

### 7. Project Artifacts Modification
- Remove duplicated or obsolete files
- Update architecture documentation and any `.md` files to reflect changes
- Update all feature-level README files to reflect changes
- Update detailed folder structure in `ARCHITECTURE.md`
- Update api document named `API_OVERVIEW.md`
- Ensure all documentation consistently references the same terms and concepts
- Verify that import paths in documentation match the actual file structure 

### 8. Knowledge Preservation
- Record lessons in `project.lessons.md`, including:
  - Technical insights gained during implementation
  - Best practices discovered
  - Common errors and their solutions
  - Performance optimization techniques
  - Architectural decisions and their rationale
  - API integration lessons
  - Testing strategies that work well
  - Code organization insights
  - Integration patterns between components
  - Error handling strategies
  - Document consolidation and consistency insights
- Format lessons as concise bullet points for easy reference
- Focus on reusable knowledge that can be applied to future phases
- Prioritize recording lessons about:
  - Fixes to mistakes made during development
  - Corrections received from reviews
  - Unexpected challenges and their solutions
  - Performance improvements
  - Security considerations
- Review previous lessons before adding new ones to avoid duplication
- Use clear, actionable language in lesson descriptions
- Always link all new generated files back to this file
- Categorize lessons by type for easier reference

## File Responsibilities

| File | Purpose | Update Frequency | Reference Documentation |
|------|---------|------------------|-------------------------|
| `.milestones` | Project-wide milestone tracking | At project start and completion, major revisions | |
| `.project` | Detailed project status and task tracking | Throughout development | |
| `.todos` | Current action items and task status | Daily/as tasks change | |
| `.mermaidflow` | Visual representation of project workflow | When workflow process changes | |
| `docs/project_lifecycle/process_monitors/records/project.workflow-checklists.md` | Checklists for current project phase to reflect on the workflow completion procedures | At project start and each time when one procedure in workflow marked is finished | [Workflow Checklists](../docs/project_lifecycle/process_monitors/records/project.workflow-checklists.md) |
| `docs/project.document-inventory.md` | Inventory of all documentation artifacts that need updates | At phase start and when new documentation is created | |
| `docs/project_lifecycle/process_monitors/records/project.phase-signoff.md` | Formal phase completion verification and signoff record | At phase completion | |
| `docs/project_lifecycle/all_tests/references/project.test-scenarios.md` | Detailed test scenarios with metrics and acceptance criteria | Before implementation of features | |
| `docs/project_lifecycle/all_tests/references/project.test-user-story.md` | Mock user jounery and generated user story from different user profiles to expand scenario tests | Before implementation of features | |
| `docs/project_lifecycle/code_and_project_structure_refactors/records/project.refactors.md` | Record of structural changes | After refactoring | [Versioning Guide](../docs/project_lifecycle/code_and_project_structure_refactors/records/project.refactors.md) |
| `docs/project_lifecycle/code_and_project_structure_refactors/plans/project.refactors-plan.md` | Refactoring categorization and approach | Before refactoring, quarterly review | [Refactoring Plan](../docs/project_lifecycle/code_and_project_structure_refactors/plans/project.refactors-plan.md) |
| `docs/project_lifecycle/version_control/records/project.versions.md` | Version history and release notes | After version completion | [Versioning Guide](../docs/project_lifecycle/version_control/records/project.versions.md) |
| `docs/project_lifecycle/knowledge/project.lessons.md` | Centralized location for all project lessons | After resolving challenges or discovering insights | |
| `docs/project_lifecycle/all_tests/results/project.test-execution-results.md` | Current test execution status and next steps | After each test run | |
| `docs/project_lifecycle/deployment/pipelines/project.deployment-pipeline.md` | Detailed deployment process documentation | Before production release | |
| `docs/project_lifecycle/deployment/plans/project.performance-optimization-plan.md` | Detailed performance strategy and targets | Before optimization work | |
| `docs/project_lifecycle/all_tests/plans/project.tests.backend-plan.md` | Comprehensive planning for backend API and service tests | At phase start, updated as needed | |
| `docs/project_lifecycle/all_tests/plans/project.tests.frontend-plan.md` | Complete frontend component & integration test plan | At phase start, updated as needed | |
| `docs/project_lifecycle/all_tests/references/project.tests.test-patterns.md` | Standard test patterns and conventions | Updated when patterns evolve | |
| `docs/project_lifecycle/all_tests/references/project.tests.mock-strategies.md` | Documentation of mocking approaches for services | Updated when mock strategies change | |
| `docs/project_lifecycle/all_tests/references/test-user-stories.md` | User stories for test scenario generation | Updated as features evolve | |
| `docs/project_lifecycle/all_tests/results/project.tests.frontend-results-template.md` | Template for frontend test execution results | Used to create date-specific result files | |
| `docs/project_lifecycle/all_tests/results/project.tests.backend-results-template.md` | Template for backend test execution results | Used to create date-specific result files | |
| `docs/project_lifecycle/all_tests/results/coverage-report.md` | Test coverage metrics and trends | After each test run | |
| `docs/project_lifecycle/code_and_project_structure_refactors/plans/project.refactors.test-driven.md` | Planning for test-driven refactoring | Before refactoring | [Test-Driven Refactoring](../docs/project_lifecycle/code_and_project_structure_refactors/plans/project.refactors.test-driven.md) |
| `docs/project_lifecycle/code_and_project_structure_refactors/records/project.refactors.test-driven-completed.md` | Documentation of completed test-driven refactors | After refactoring | [Completed Refactors](../docs/project_lifecycle/code_and_project_structure_refactors/records/project.refactors.test-driven-completed.md) |
| `docs/project_lifecycle/code_and_project_structure_refactors/references/refactoring-patterns.md` | Reference patterns for improving testability | Updated as patterns evolve | [Refactoring Patterns](../docs/project_lifecycle/code_and_project_structure_refactors/references/refactoring-patterns.md) |
| `docs/project_lifecycle/process_monitors/implementation_summary.md` | Overall project implementation status | After each major feature | [Implementation Summary](../docs/project_lifecycle/process_monitors/implementation_summary.md) |
| `docs/project_lifecycle/process_monitors/records/project.phase-completion.md` | Detailed phase completion reports | At phase completion | [Phase Completion](../docs/project_lifecycle/process_monitors/records/project.phase-completion.md) |
| `docs/project_lifecycle/process_monitors/records/project.workflow-deviations.md` | Documentation of process exceptions and deviations | When process adaptations occur | [Workflow Deviations](../docs/project_lifecycle/process_monitors/records/project.workflow-deviations.md) |
| `docs/project_lifecycle/process_monitors/plans/project.process-improvements.md` | Planned workflow and process improvements | Quarterly | [Process Improvements](../docs/project_lifecycle/process_monitors/plans/project.process-improvements.md) |
| `docs/project_lifecycle/process_monitors/references/process-metrics.md` | Standard metrics for process evaluation | Updated as metrics evolve | [Process Metrics](../docs/project_lifecycle/process_monitors/references/process-metrics.md) |
| `docs/project_lifecycle/version_control/records/project.release-notes.md` | Detailed release notes for each version | At version release | [Release Notes](../docs/project_lifecycle/version_control/records/project.release-notes.md) |
| `docs/project_lifecycle/version_control/plans/project.version-transition.md` | Plans for migration between versions | Before major version changes | [Version Transition](../docs/project_lifecycle/version_control/plans/project.version-transition.md) |
| `docs/project_lifecycle/version_control/references/semantic-versioning.md` | Guidelines for semantic versioning | When versioning strategy changes | [Semantic Versioning](../docs/project_lifecycle/version_control/references/semantic-versioning.md) |
| `docs/project_lifecycle/version_control/references/api-versioning.md` | API versioning and compatibility strategy | Updated as API evolves | [API Versioning](../docs/project_lifecycle/version_control/references/api-versioning.md) |

## Standard Procedure for New Phase

This is a simplified checklist of phases to execute. For detailed steps of each phase, refer to the corresponding sections in the **Project Phase Workflow** above.

1. **Phase Initialization** - See [section 1: Phase Initialization](#1-phase-initialization)
   - Create workflow checklist
   - Review project standards
   - Check existing documentation
   - Plan phase with OKR structure
   
2. **Development Process** - See [section 2: Development Process](#2-development-process)
   - Follow task sequence from workflow
   - Complete one functional area before moving to next
   - Balance documentation with implementation
   - Regular progress tracking

3. **Test Management and Organization** - See [section 3: Test Management and Organization](#3-test-management-and-organization)
   - Organize tests by type rather than feature
   - Create separate test suites for frontend and backend
   - Develop standardized mock strategies for services
   - Document test patterns and references
   - Maintain test results in appropriate directories

4. **Test-Driven Refactoring** - See [section 4: Test-Driven Refactoring](#4-test-driven-refactoring)
   - Identify refactoring candidates from test results
   - Create detailed refactoring plans
   - Execute refactoring in a test-driven approach
   - Document completed refactors and test improvements
   - Update test patterns based on successful refactors

5. **Project Verification** - Ensure all milestones, key results, and tasks are complete
   - Verify against acceptance criteria
   - Conduct comprehensive testing
   - Document test results

6. **Phase Completion and Documentation Updates** - See [section 5: Phase Completion and Documentation Updates](#5-phase-completion-and-documentation-updates)
   - Perform code review sessions
   - Complete refactoring and document changes
   - Update all documentation artifacts

7. **Process Monitoring and Version Control** - See [section 6: Process Monitoring and Version Control](#6-process-monitoring-and-version-control)
   - Document process completion and implementation status
   - Create process monitor checkpoints
   - Update versioning artifacts and transition plans
   - Ensure adherence to versioning standards

8. **Project Artifacts Modification** - See [section 7: Project Artifacts Modification](#7-project-artifacts-modification)
   - Update architecture documentation
   - Update API documentation
   - Ensure consistency across artifacts

9. **Knowledge Preservation** - See [section 8: Knowledge Preservation](#8-knowledge-preservation)
   - Document lessons by category
   - Focus on reusable knowledge

10. **Final Review** - Verify all steps are complete and announce completion
    - Formal sign-off process
    - Verification against workflow requirements