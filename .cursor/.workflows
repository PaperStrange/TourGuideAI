# TourGuideAI Project Workflow

This document outlines the standard workflow for executing a new project phase in the TourGuideAI project. This workflow ensures consistent process, comprehensive documentation, and knowledge preservation throughout the project lifecycle. 

## Project Phase Workflow

### 1. Phase Initialization
- Review `.milestones` file to understand the overall project structure
- Identify the current phase requirements and objectives
- Refer to the references and tips within `Project Structure Guide`, `Coding Standards`, and `API Integration Rules` sections in `.cursorrules` to keep those principles in mind when start generating new things
- Refer to the lessons recorded in `project.lessons.md` to avoid mistakes, errors used to make
- Break down the phase into logical milestones and tasks
- Update `.milestones` file with the new logical milestones and **objects**
- Update `.project` file with the new phase details, **key results** for **objects** in `.milestones`
- Update `.todos` file with specific actionable items for **key results** in `.project` 
- Check existing planning files in 'docs' directory before creating new ones to avoid duplication
- Create a whole planning file for each phase and use a consistent naming convention for this file (e.g., `phase#-[focus]-plan.md`)
- Update or create detail planning files in 'docs' with specific actionable items for the new phase
- Ensure all planning files follow the same format structure as existing plan files
- Create proper cross-references between the whole planning file and related detail planning files
- Planning artifacts should refer to the corresponding task and lines in `.todos` with a link

### 2. Development Process
- Execute tasks according to the priorities defined in `.todos`
- For complex tasks, utilize the `cursor-thinking-protocol` section in `.cursorrules` as a scratchpad
- Update `.milestones` file as objects are decided
  - Use task markers to indicate the task progress, Mark completed tasks with [X]
  - Add completion dates
- Update `.project` file as key results for each milestones are decided
  - Use task markers to indicate the task progress, Mark completed tasks with [X]
  - Add completion dates
- Update `.todos` file as tasks are completed, including:
  - Use task markers to indicate the task progress, Mark completed tasks with [X]
  - Add completion dates
  - Record any issues encountered
  - Note key learnings
- Update `.todos` file regularly to reflect current status and any new tasks
- Update `.milestones` file regularly to reflect current status and any new milestone object
- Update `.project` file regularly to reflect current status and any new key result
- Compare the milestones in `.milestones` with completed milestones in `.project` regularly to identify gaps
- Compare project completion criteria to know whether the project phase is ready to close, then update project status, including:
  - all object in `.milestones` and key results in `.project` are marked as done
  - all tasks in `.todos` are marked as done
  - all tests in `tests` are marked as success
  - Update `docs/test-execution-results.md` with latest test status and next steps

### 3. Phase Completion and Documentation Updates
- Perform comprehensive code review referring to `docs/references/code-review-checklist.md`and `docs/references/whats-code-review-looking-for.md`
- Follow the refactoring plan in `docs/refactor-plan.md` to categorize and implement refactors
- Document all refactors in `docs/project.refactors.md` by type (code structure, duplication, performance, security, etc.)
- Remove duplicated or obsolete files
- Update architecture documentation to reflect changes
- Review all project files against the standards in `.cursorrules`
- Update `project.refactors` with details of any structural changes:
  - Document file relocations
  - Record line changes
  - Summarize modifications
- Update `project.versions.md` with new version details:
  - Version number and date
  - Added features
  - Changed elements
  - Fixed issues
- Update each `README.md` within project folders to reflect changes and make sure changed contents are correctly recorded
- Update `docs/test-execution-results.md` with final test status and any remaining issues

### 4. Project Artifacts Modification
- Update detailed folder structure in `ARCHITECTURE.md`
- Update api document named `API_OVERVIEW.md`

### 5. Knowledge Preservation
- Record lessons in `project.lessons.md`, including:
  - Technical insights gained during implementation
  - Best practices discovered
  - Common errors and their solutions
  - Performance optimization techniques
  - Architectural decisions and their rationale
  - API integration lessons
  - Testing strategies that work well
  - Code organization insights
  - Integration patterns between components
  - Error handling strategies
- Format lessons as concise bullet points for easy reference
- Focus on reusable knowledge that can be applied to future phases
- Prioritize recording lessons about:
  - Fixes to mistakes made during development
  - Corrections received from reviews
  - Unexpected challenges and their solutions
  - Performance improvements
  - Security considerations
- Review previous lessons before adding new ones to avoid duplication
- Use clear, actionable language in lesson descriptions
- Always link all new generated files back to this file
- Never store lessons in `.cursorrules`

## File Responsibilities

| File | Purpose | Update Frequency | Reference Documentation |
|------|---------|------------------|-------------------------|
| `.milestones` | Project-wide milestone tracking | At project start, major revisions | |
| `.project` | Detailed project status and task tracking | Throughout development | |
| `.todos` | Current action items and task status | Daily/as tasks change | |
| `.cursorrules` | Project standards and useful protocols | As new standards emerge | |
| `.cursorrules` (Instructions) | Project management guidelines | Reference at phase start | |
| `.cursorrules` (Thinking Protocol) | Thinking process for complex tasks | During task analysis | |
| `.cursorrules` (Standards) | Coding and API standards | Reference throughout development | |
| `.cursorrules` (Scratchpad) | Current thinking context | Before and during task execution | |
| `docs/project.refactors.md` | Record of structural changes | After refactoring | [Versioning Guide](../docs/project.refactors.md) |
| `docs/refactor-plan.md` | Refactoring categorization and approach | Before refactoring, quarterly review | [Refactoring Plan](../docs/refactor-plan.md) |
| `docs/project.versions.md` | Version history and release notes | After version completion | [Versioning Guide](../docs/project.versions.md) |
| `docs/project.lessons.md` | Centralized location for all project lessons | After resolving challenges or discovering insights | |
| `docs/references/code-review-checklist.md` | Standard for code reviews | Reference during review | [Code Review Checklist](../docs/references/code-review-checklist.md) |
| `docs/references/version-control.md` | Versioning conventions | Reference during releases | [Versioning Conventions](../docs/references/version-control.md) |
| `docs/references/dependencies-tracking.md` | Component dependency management | Update with architectural changes | [Dependencies Tracking](../docs/references/dependencies-tracking.md) |
| `docs/references/whats-code-review-looking-for.md` | Google's code review guide | Reference during reviews | [Code Review Guide](../docs/references/whats-code-review-looking-for.md) |
| `docs/phase#-planning.md` | Whole phase planning overview with strategy and cross-references | At phase start | |
| `docs/stability-test-plan.md` | Detailed testing approach and test cases | Before phase execution | |
| `docs/test-execution-results.md` | Current test execution status and next steps | After each test run | |
| `docs/deployment-pipeline.md` | Detailed deployment process documentation | Before production release | |
| `docs/performance-optimization-plan.md` | Detailed performance strategy and targets | Before optimization work | |
| `README.md` | Introduction for the new-comers | After version completion | |
| `ARCHITECTURE.md` | Introduction for the the whole project file structure | After version completion | |
| `API_OVERVIEW.md` | Introduction for the api embedded in this project | After version completion | |

## Standard Procedure for New Phase

This is a simplified checklist of phases to execute. For detailed steps of each phase, refer to the corresponding sections in the **Project Phase Workflow** above.

1. **Phase Initialization** - See [section 1: Phase Initialization](#1-phase-initialization)
2. **Development Process** - See [section 2: Development Process](#2-development-process)
3. **Project Verification** - Ensure all milestones, key results, and tasks are complete
4. **Phase Completion and Documentation Updates** - See [section 3: Phase Completion and Documentation Updates](#3-phase-completion-and-documentation-updates)
5. **Project Artifacts Modification** - See [section 4: Project Artifacts Modification](#4-project-artifacts-modification)
6. **Knowledge Preservation** - See [section 5: Knowledge Preservation](#5-knowledge-preservation)
7. **Final Review** - Verify all steps are complete and announce completion