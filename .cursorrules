# TourGuideAI Cursor Rules

## Project Structure
- Maintain separate directories for frontend and backend code
- Keep API-related code in the 'src/api' directory
- Store environment variables in '.env' files (not to be committed to version control)

## Coding Standards
- Use ES6+ JavaScript features
- Document all functions with JSDoc comments
- Use async/await for asynchronous operations
- Follow a consistent naming convention (camelCase for variables and functions)
- Keep files under 500 lines, splitting functionality when necessary

## API Integration Rules
- Never store API keys in client-side code
- Always validate inputs before sending to external APIs
- Include error handling for all API calls
- Use environment variables for configuration
- Implement rate limiting to prevent API quota exhaustion

## Testing Guidelines
- Write tests for all API integration points
- Include both unit and integration tests
- Test error handling and edge cases
- Document test scenarios and expected outcomes

## Lessons
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Use LLM to perform flexible text understanding tasks. First test on a few files. After success, make it parallel.
- For website image paths, always use the correct relative path (e.g., 'images/filename.png') and ensure the images directory exists
- Ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes

## Scratchpad
This section is used for cursor thinking protocol and tracking the progress of current tasks.

### Current Task: Phase 4 - Backend Integration
- Setting up a secure server-side component for API management
- Planning server-side caching and rate limiting
- Designing API proxy endpoints

### Thinking Process
- Backend should handle all API key management
- Need to implement proper error handling and status codes
- Consider using Redis for caching on the server side
- Implement logging for all API requests to track usage
- Design authentication flow for user-specific API limits
