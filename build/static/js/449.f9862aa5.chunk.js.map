{"version":3,"file":"static/js/449.f9862aa5.chunk.js","mappings":"yKAYA,IAAIA,EAAS,CACXC,OAAQ,GACRC,MAAO,SACPC,YAAa,6CACbC,OAAO,GAOF,MAAMC,EAAaJ,IACxB,IAAKA,GAA4B,kBAAXA,GAAuBA,EAAOK,OAAS,GAC3D,MAAM,IAAIC,MAAM,0BAIlB,OAFAP,EAAOC,OAASA,EAChBO,QAAQC,IAAI,2CACL,CAAI,EA2BAC,EAAgBC,IAC3BX,EAAOI,QAAUO,EACjBH,QAAQC,IAAI,eAAcT,EAAOI,MAAQ,UAAY,cAC9C,GAKPC,EAAUO,4BAIZF,GAAaE,GAOb,MAAMC,EAAWA,CAACC,EAASC,KACrBf,EAAOI,OACTI,QAAQC,IAAI,gBAAgBK,IAAWC,GAAQ,GACjD,EAOIC,EAAkBA,IACfC,EAAAA,EAAMC,OAAO,CAClBC,QAASnB,EAAOoB,WAChBC,QAASrB,EAAOsB,eAAiB,CAAC,EAAI,CACpC,eAAgB,mBAChB,cAAiB,UAAUtB,EAAOC,UAEpCsB,QAAS,MAUPC,EAAaC,eAAOC,GAA4B,IAAlBC,EAAOC,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7C,IAAK5B,EAAOC,SAAWD,EAAOsB,eAC5B,MAAM,IAAIf,MAAM,mEAGlB,MAAMuB,EAAYd,IAElB,IACE,IAAIe,EAEJ,GAAI/B,EAAOsB,eAAgB,CAEzBT,EAAS,kCAAmC,CAAEmB,UAAU,EAAMN,aAG9D,IAAIO,EAAW,eAgBf,OAdIN,EAAQM,WACVA,EAAW,WAAWN,EAAQM,YAGhCF,QAAiBD,EAAUI,KAAKD,EAAU,CACxCP,WACAC,QAAS,CACPzB,MAAOyB,EAAQzB,OAASF,EAAOE,MAC/BiC,iBAAqCN,IAAxBF,EAAQQ,YAA4BR,EAAQQ,YAAc,GACvEC,WAAYT,EAAQS,YAAc,OAK/BL,EAAShB,KAAKsB,MACvB,CAAO,CAELxB,EAAS,sCAAuC,CAAEmB,UAAU,EAAON,WAAUC,YAE7E,MAAMW,EAAiB,CACrBpC,MAAOyB,EAAQzB,OAASF,EAAOE,MAC/BwB,WACAS,iBAAqCN,IAAxBF,EAAQQ,YAA4BR,EAAQQ,YAAc,GACvEC,WAAYT,EAAQS,YAAc,IAClCG,MAAOZ,EAAQY,OAAS,EACxBC,kBAAmBb,EAAQa,mBAAqB,EAChDC,iBAAkBd,EAAQc,kBAAoB,EAC9CC,gBAAiBf,EAAQe,iBAAmB,CAAEC,KAAM,gBAGtDZ,QAAiBD,EAAUI,KAAK,6CAA8CI,GAG9E,MAAMM,EAAUb,EAAShB,KAAK8B,QAAQ,GAAG/B,QAAQ8B,QACjD,IACE,OAAOE,KAAKC,MAAMH,EACpB,CAAE,MAAOI,GAEP,OADAnC,EAAS,8BAA+B,CAAEoC,MAAOD,EAAYJ,YACtD,CAAEM,YAAaN,EAASK,MAAO,mBACxC,CACF,CACF,CAAE,MAAOA,GAEP,MADAzC,QAAQyC,MAAM,4BAA6BA,GACrCA,CACR,CACF,EAOaE,EAAsB1B,UAGjC,GAFAZ,EAAS,+BAAgCuC,IAErCpD,EAAOsB,eAaJ,CACL,MAAMI,EAAW,CACf,CACE2B,KAAM,SACNT,QAAS,ggCAgBX,CACES,KAAM,OACNT,QAASQ,IAIb,aAAa5B,EAAWE,EAAU,CAChCS,YAAa,IAEjB,CA1C2B,CACzB,MAAML,EAAYd,IAElB,IAKE,aAJuBc,EAAUI,KAAK,2BAA4B,CAChEoB,KAAMF,KAGQrC,KAAKwC,MACvB,CAAE,MAAON,GAEP,MADAzC,QAAQyC,MAAM,iCAAkCA,GAC1CA,CACR,CACF,CA6BA,EAQWO,EAAgB/B,UAG3B,GAFAZ,EAAS,wBAAyBuC,IAE9BpD,EAAOsB,eAsBJ,CAEL,MAAMiC,QAAeJ,EAAoBC,GAGnC1B,EAAW,CACf,CACE2B,KAAM,SACNT,QAAS,6/BAiBX,CACES,KAAM,OACNT,QAAS,gCAAgCQ,gGAG1BG,EAAOE,SAAW,sCACrBF,EAAOG,iBAAmB,0CACtBH,EAAOI,cAAgB,uDACVJ,EAAOK,sBAAwB,wDAC9BL,EAAOM,uBAAyB,uDACjCN,EAAOO,sBAAwB,oCAClDP,EAAOQ,mBAAqB,2CACrBR,EAAOS,oBAAsB,oBAIlD,aAAaxC,EAAWE,EAAU,CAChCS,YAAa,GACbC,WAAY,MAEhB,CAnE2B,CACzB,MAAMN,EAAYd,IAElB,IAEE,MAIMuC,SAJuBzB,EAAUI,KAAK,2BAA4B,CACtEoB,KAAMF,KAGsBrC,KAAKwC,OAQnC,aALuBzB,EAAUI,KAAK,yBAA0B,CAC9DoB,KAAMF,EACNG,OAAQA,KAGMxC,KAAKkD,KACvB,CAAE,MAAOhB,GAEP,MADAzC,QAAQyC,MAAM,0BAA2BA,GACnCA,CACR,CACF,CA6CA,EAOWiB,EAAsBzC,UAGjC,GAFAZ,EAAS,4BAELb,EAAOsB,eAUJ,CACL,MAAMI,EAAW,CACf,CACE2B,KAAM,SACNT,QAAS,+5BAcX,CACES,KAAM,OACNT,QAAS,4EAIb,aAAapB,EAAWE,EAAU,CAChCS,YAAa,GACbC,WAAY,MAEhB,CAtC2B,CACzB,MAAMN,EAAYd,IAElB,IAEE,aADuBc,EAAUI,KAAK,kCACtBnB,KAAKkD,KACvB,CAAE,MAAOhB,GAEP,MADAzC,QAAQyC,MAAM,iCAAkCA,GAC1CA,CACR,CACF,CA4BA,EAqEWkB,EAAYA,KAChB,CACLC,eAAgBpE,EAAOC,QAAUD,EAAOsB,eACxCpB,MAAOF,EAAOE,MACdE,MAAOJ,EAAOI,MACdkB,eAAgBtB,EAAOsB,iB,aC1Z3B,MAsEA,EAtEkB+C,KAChB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,CACzCC,QAAQ,EACRC,MAAM,EACNC,UAAU,EACV1B,MAAO,OA0BT,OAvBA2B,EAAAA,EAAAA,YAAU,KACenD,WACrB,IACE,MAAMoD,QAAeV,IACrBI,EAAa,CACXE,OAAQI,EAAOT,aACfM,MAAM,EACNC,UAAU,EACV1B,MAAO,MAEX,CAAE,MAAOA,GACPsB,EAAa,CACXE,QAAQ,EACRC,MAAM,EACNC,UAAU,EACV1B,MAAOA,EAAMnC,SAEjB,GAGFgE,EAAgB,GACf,IAECR,EAAUK,UACLI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SAAC,2BAGjCX,EAAUrB,OAEViC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,8BAA6BC,SAAA,EAC1CF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,sBACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAIX,EAAUrB,SACd8B,EAAAA,EAAAA,KAAA,KAAAE,SAAG,8DAMPC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,gBACJC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,MAAIF,UAAWV,EAAUG,OAAS,gBAAkB,mBAAmBQ,SAAA,CAAC,eACzDX,EAAUG,OAAS,YAAc,iBAC5CH,EAAUG,SACVM,EAAAA,EAAAA,KAAA,KAAGC,UAAU,WAAUC,SAAC,oFAK5BC,EAAAA,EAAAA,MAAA,MAAIF,UAAWV,EAAUI,KAAO,gBAAkB,mBAAmBO,SAAA,CAAC,oBAClDX,EAAUI,KAAO,YAAc,iBAC/CJ,EAAUI,OACVK,EAAAA,EAAAA,KAAA,KAAGC,UAAU,WAAUC,SAAC,kGAM1B,ECjEJE,EAAa,CACjB,CACEC,aAAc,gDACdC,UAAW,SACXC,cAAe,WACfC,QAAS,IACTC,gBAAiB,yBACjBC,aAAc,cAEhB,CACEL,aAAc,kDACdC,UAAW,SACXC,cAAe,WACfC,QAAS,GACTC,gBAAiB,wBACjBC,aAAc,cAEhB,CACEL,aAAc,gDACdC,UAAW,SACXC,cAAe,WACfC,QAAS,GACTC,gBAAiB,kBACjBC,aAAc,eAIZC,EAAgB,CACpB,CACEC,mBAAoB,EACpBP,aAAc,gDACdC,UAAW,SACXC,cAAe,WACfC,QAAS,IACTC,gBAAiB,yBACjBC,aAAc,cAEhB,CACEE,mBAAoB,EACpBP,aAAc,kDACdC,UAAW,SACXC,cAAe,WACfC,QAAS,GACTC,gBAAiB,wBACjBC,aAAc,cAEhB,CACEE,mBAAoB,EACpBP,aAAc,gDACdC,UAAW,SACXC,cAAe,WACfC,QAAS,GACTC,gBAAiB,kBACjBC,aAAc,cAEhB,CACEE,mBAAoB,EACpBP,aAAc,kDACdC,UAAW,SACXC,cAAe,WACfC,QAAS,GACTC,gBAAiB,uBACjBC,aAAc,cAEhB,CACEE,mBAAoB,EACpBP,aAAc,gDACdC,UAAW,SACXC,cAAe,WACfC,QAAS,GACTC,gBAAiB,2BACjBC,aAAc,eAKZG,EAAiBA,KACrB,MAAMC,EAAS,CACb,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,WAE9C,OAAOA,EAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAOvF,QAAQ,EA4K1D,EAzKiB2F,KACf,MAAMC,GAAWC,EAAAA,EAAAA,OACV/C,EAAWgD,IAAgB5B,EAAAA,EAAAA,UAAS,KACpC6B,EAAWC,IAAgB9B,EAAAA,EAAAA,WAAS,IACpCvB,EAAOsD,IAAY/B,EAAAA,EAAAA,UAAS,MA6D7BgC,EAAuBC,IAC3BP,EAAS,OAAQ,CAAEQ,MAAO,CAAED,YAAY,EAG1C,OACEvB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EAExBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYC,SAAC,+BAG3BF,EAAAA,EAAAA,KAACV,EAAS,KAEVa,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAE5BF,EAAAA,EAAAA,KAAA,YACEC,UAAU,YACV2B,YAAY,uCACZC,MAAOxD,EACPyD,SAAWC,GAAMV,EAAaU,EAAEC,OAAOH,UAGzC1B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAE3BF,EAAAA,EAAAA,KAAA,UACEC,UAAU,+BACVgC,QApFgBvF,UAC1B,GAAK2B,EAAU6D,OAAf,CAEAX,GAAa,GACbC,EAAS,MAET,IAEE,MAAMW,QAAuBC,EAA8B/D,GAGrDgE,QAAsBD,EAAwB/D,GAGpD8C,EAAS,OAAQ,CACfQ,MAAO,CACLW,UAAWjE,EACXkE,WAAYJ,EACZK,UAAWH,IAGjB,CAAE,MAAOI,GACPhH,QAAQyC,MAAM,0BAA2BuE,GACzCjB,EAAS,8CACX,CAAC,QACCD,GAAa,EACf,CAzB6B,CAyB7B,EA2DUmB,UAAWrE,EAAU6D,QAAUZ,EAAUpB,SAExCoB,EAAY,gBAAkB,+BAIjCtB,EAAAA,EAAAA,KAAA,UACEC,UAAU,8BACVgC,QA/DYvF,UACtB6E,GAAa,GACbC,EAAS,MAET,IAEE,MAAMmB,QAA4BP,IAGlCjB,EAAS,OAAQ,CACfQ,MAAO,CACLW,UAAW,qBACXC,WAAY,KACZC,UAAWG,IAGjB,CAAE,MAAOF,GACPhH,QAAQyC,MAAM,iCAAkCuE,GAChDjB,EAAS,qDACX,CAAC,QACCD,GAAa,EACf,GA2CUmB,UAAWrE,EAAU6D,QAAUZ,EAAUpB,SAC1C,mBAMFhC,IAAS8B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SAAEhC,QAG5CiC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAE9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mBACJF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,SAC7BE,EAAWwC,KAAI,CAACC,EAAOC,KACtB3C,EAAAA,EAAAA,MAAA,OAEEF,UAAU,aACV8C,MAAO,CAAEC,gBAAiBnC,KAC1BoB,QAASA,KAAMgB,OA5DLvB,EA4DsBmB,EAAMtC,mBA3DpDY,EAAS,OAAQ,CAAEQ,MAAO,CAAED,aADJA,KA4D2C,EAAAxB,SAAA,EAErDF,EAAAA,EAAAA,KAAA,OAAKkD,IAAKL,EAAMxC,aAAc8C,IAAKN,EAAMvC,UAAWL,UAAU,iBAC9DE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWC,SAAE2C,EAAMvC,aAChCN,EAAAA,EAAAA,KAAA,KAAGC,UAAU,aAAYC,SAAE2C,EAAMpC,uBAR9BqC,WAgBb3C,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,gBACJC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SACvBS,EAAcyC,MAAM,EAAG,GAAGR,KAAKS,IAC9BlD,EAAAA,EAAAA,MAAA,OAAmCF,UAAU,aAAagC,QAASA,IAAMR,EAAoB4B,EAAK9C,eAAeL,SAAA,EAC/GC,EAAAA,EAAAA,MAAA,OAAKF,UAAW,cAAcoD,EAAKzC,qBAAqBV,SAAA,EACtDF,EAAAA,EAAAA,KAAA,OAAKkD,IAAKG,EAAKhD,aAAc8C,IAAKE,EAAK/C,UAAWL,UAAU,iBAC5DD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SAAEmD,EAAK7C,cAEtCR,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWC,SAAEmD,EAAK/C,aAC/BN,EAAAA,EAAAA,KAAA,KAAGC,UAAU,aAAYC,SAAEmD,EAAK5C,oBANxB4C,EAAKzC,yBAWnBZ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SACzBS,EAAcyC,MAAM,GAAGR,KAAKS,IAC3BlD,EAAAA,EAAAA,MAAA,OAAmCF,UAAU,YAAYgC,QAASA,IAAMR,EAAoB4B,EAAK9C,eAAeL,SAAA,EAC9GF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SAAEmD,EAAKzC,sBACnCT,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,aAAYC,SAAEmD,EAAK5C,mBAChCN,EAAAA,EAAAA,MAAA,KAAGF,UAAU,UAASC,SAAA,CAAEmD,EAAK7C,QAAQ,mBAJ/B6C,EAAKzC,sCAavB,C","sources":["core/api/openaiApi.js","components/ApiStatus.js","pages/ChatPage.js"],"sourcesContent":["/**\r\n * OpenAI API Service for TourGuideAI\r\n * \r\n * This file contains implementations of OpenAI API functions for travel planning\r\n * using GPT models to generate personalized travel content.\r\n * \r\n * @requires API_KEY - An OpenAI API key must be configured\r\n */\r\n\r\nimport axios from 'axios';\r\n\r\n// OpenAI API configuration\r\nlet config = {\r\n  apiKey: '', // Set via setApiKey\r\n  model: 'gpt-4o', // Default model\r\n  apiEndpoint: 'https://api.openai.com/v1/chat/completions',\r\n  debug: false\r\n};\r\n\r\n/**\r\n * Set the OpenAI API key\r\n * @param {string} apiKey - The OpenAI API key\r\n */\r\nexport const setApiKey = (apiKey) => {\r\n  if (!apiKey || typeof apiKey !== 'string' || apiKey.length < 10) {\r\n    throw new Error('Invalid API key format');\r\n  }\r\n  config.apiKey = apiKey;\r\n  console.log('OpenAI API key configured successfully');\r\n  return true;\r\n};\r\n\r\n/**\r\n * Set the OpenAI model to use\r\n * @param {string} model - The model name (e.g., 'gpt-4o', 'gpt-4-turbo')\r\n */\r\nexport const setModel = (model) => {\r\n  config.model = model;\r\n  console.log(`OpenAI model set to ${model}`);\r\n  return true;\r\n};\r\n\r\n/**\r\n * Set whether to use the server proxy\r\n * @param {boolean} useProxy - Whether to use the server proxy\r\n */\r\nexport const setUseServerProxy = (useProxy) => {\r\n  config.useServerProxy = !!useProxy;\r\n  console.log(`Server proxy ${config.useServerProxy ? 'enabled' : 'disabled'}`);\r\n  return true;\r\n};\r\n\r\n/**\r\n * Enable or disable debug logging\r\n * @param {boolean} enabled - Whether to enable debug logging\r\n */\r\nexport const setDebugMode = (enabled) => {\r\n  config.debug = !!enabled;\r\n  console.log(`Debug mode ${config.debug ? 'enabled' : 'disabled'}`);\r\n  return true;\r\n};\r\n\r\n// Initialize API key from environment variables if available\r\nif (process.env.REACT_APP_OPENAI_API_KEY) {\r\n  setApiKey(process.env.REACT_APP_OPENAI_API_KEY);\r\n}\r\n\r\n// Make debug mode follow the NODE_ENV by default\r\nsetDebugMode(process.env.NODE_ENV === 'development');\r\n\r\n/**\r\n * Log debug messages if debug mode is enabled\r\n * @param {string} message - The message to log\r\n * @param {object} data - Optional data to log\r\n */\r\nconst debugLog = (message, data) => {\r\n  if (config.debug) {\r\n    console.log(`[OpenAI API] ${message}`, data || '');\r\n  }\r\n};\r\n\r\n/**\r\n * Create API client\r\n * @returns {Object} API client instance\r\n */\r\nconst createApiClient = () => {\r\n  return axios.create({\r\n    baseURL: config.apiBaseUrl,\r\n    headers: config.useServerProxy ? {} : {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${config.apiKey}`\r\n    },\r\n    timeout: 60000 // 60 seconds\r\n  });\r\n};\r\n\r\n/**\r\n * Make a call to the OpenAI API\r\n * @param {object} messages - Array of message objects for the conversation\r\n * @param {object} options - Additional options for the API call\r\n * @returns {Promise<object>} - The API response\r\n */\r\nconst callOpenAI = async (messages, options = {}) => {\r\n  if (!config.apiKey && !config.useServerProxy) {\r\n    throw new Error('OpenAI API key not configured. Use setApiKey() to configure it.');\r\n  }\r\n\r\n  const apiClient = createApiClient();\r\n  \r\n  try {\r\n    let response;\r\n    \r\n    if (config.useServerProxy) {\r\n      // Server handles the actual API call, just pass the messages\r\n      debugLog('Using server proxy for API call', { useProxy: true, messages });\r\n      \r\n      // Determine which endpoint to use based on the options\r\n      let endpoint = '/openai/chat';\r\n      \r\n      if (options.endpoint) {\r\n        endpoint = `/openai/${options.endpoint}`;\r\n      }\r\n      \r\n      response = await apiClient.post(endpoint, {\r\n        messages,\r\n        options: {\r\n          model: options.model || config.model,\r\n          temperature: options.temperature !== undefined ? options.temperature : 0.7,\r\n          max_tokens: options.max_tokens || 2000\r\n        }\r\n      });\r\n      \r\n      // Return the parsed data from the server response\r\n      return response.data.result;\r\n    } else {\r\n      // Make direct call to OpenAI API\r\n      debugLog('Making direct API call with options', { useProxy: false, messages, options });\r\n      \r\n      const requestOptions = {\r\n        model: options.model || config.model,\r\n        messages,\r\n        temperature: options.temperature !== undefined ? options.temperature : 0.7,\r\n        max_tokens: options.max_tokens || 2000,\r\n        top_p: options.top_p || 1,\r\n        frequency_penalty: options.frequency_penalty || 0,\r\n        presence_penalty: options.presence_penalty || 0,\r\n        response_format: options.response_format || { type: \"json_object\" }\r\n      };\r\n      \r\n      response = await apiClient.post('https://api.openai.com/v1/chat/completions', requestOptions);\r\n      \r\n      // Parse the content from the OpenAI response\r\n      const content = response.data.choices[0].message.content;\r\n      try {\r\n        return JSON.parse(content);\r\n      } catch (parseError) {\r\n        debugLog('Error parsing JSON response', { error: parseError, content });\r\n        return { raw_content: content, error: 'JSON_PARSE_ERROR' };\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error calling OpenAI API:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Function to recognize text intent from user input\r\n * @param {string} userInput - The user's query text\r\n * @returns {Promise<object>} - Structured intent data\r\n */\r\nexport const recognizeTextIntent = async (userInput) => {\r\n  debugLog('Recognizing text intent for:', userInput);\r\n  \r\n  if (config.useServerProxy) {\r\n    const apiClient = createApiClient();\r\n    \r\n    try {\r\n      const response = await apiClient.post('/openai/recognize-intent', {\r\n        text: userInput\r\n      });\r\n      \r\n      return response.data.intent;\r\n    } catch (error) {\r\n      console.error('Error recognizing text intent:', error);\r\n      throw error;\r\n    }\r\n  } else {\r\n    const messages = [\r\n      {\r\n        role: 'system',\r\n        content: `You are a travel planning assistant that extracts travel intent from user queries.\r\n        Extract the following information from the user's query and return as a JSON object:\r\n        - arrival: destination location\r\n        - departure: departure location (if mentioned)\r\n        - arrival_date: arrival date or time period (if mentioned)\r\n        - departure_date: departure date (if mentioned)\r\n        - travel_duration: duration of the trip (e.g., \"3 days\", \"weekend\", \"week\")\r\n        - entertainment_prefer: preferred entertainment or activities (if mentioned)\r\n        - transportation_prefer: preferred transportation methods (if mentioned)\r\n        - accommodation_prefer: preferred accommodation types (if mentioned)\r\n        - total_cost_prefer: budget information (if mentioned)\r\n        - user_time_zone: inferred time zone (default to \"Unknown\")\r\n        - user_personal_need: any special requirements or preferences (if mentioned)\r\n        \r\n        If any field is not mentioned, use an empty string.`\r\n      },\r\n      {\r\n        role: 'user',\r\n        content: userInput\r\n      }\r\n    ];\r\n    \r\n    return await callOpenAI(messages, {\r\n      temperature: 0.3, // Lower temperature for more deterministic extraction\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Function to generate a route based on user input\r\n * @param {string} userInput - The user's query text\r\n * @returns {Promise<object>} - Generated route data\r\n */\r\nexport const generateRoute = async (userInput) => {\r\n  debugLog('Generating route for:', userInput);\r\n  \r\n  if (config.useServerProxy) {\r\n    const apiClient = createApiClient();\r\n    \r\n    try {\r\n      // First get the intent\r\n      const intentResponse = await apiClient.post('/openai/recognize-intent', {\r\n        text: userInput\r\n      });\r\n      \r\n      const intent = intentResponse.data.intent;\r\n      \r\n      // Then generate the route\r\n      const response = await apiClient.post('/openai/generate-route', {\r\n        text: userInput,\r\n        intent: intent\r\n      });\r\n      \r\n      return response.data.route;\r\n    } catch (error) {\r\n      console.error('Error generating route:', error);\r\n      throw error;\r\n    }\r\n  } else {\r\n    // First, recognize the intent from the user's input\r\n    const intent = await recognizeTextIntent(userInput);\r\n    \r\n    // Create a detailed prompt based on the recognized intent\r\n    const messages = [\r\n      {\r\n        role: 'system',\r\n        content: `You are a travel planning assistant that creates detailed travel itineraries.\r\n        Create a comprehensive travel plan based on the user's query and the extracted intent.\r\n        Include the following in your response as a JSON object:\r\n        - route_name: A catchy name for this travel route\r\n        - destination: The main destination\r\n        - duration: Duration of the trip in days\r\n        - start_date: Suggested start date (if applicable)\r\n        - end_date: Suggested end date (if applicable)\r\n        - overview: A brief overview of the trip\r\n        - highlights: Array of top highlights/attractions\r\n        - daily_itinerary: Array of day objects with activities\r\n        - estimated_costs: Breakdown of estimated costs\r\n        - recommended_transportation: Suggestions for getting around\r\n        - accommodation_suggestions: Array of accommodation options\r\n        - best_time_to_visit: Information about ideal visiting periods\r\n        - travel_tips: Array of useful tips for this destination`\r\n      },\r\n      {\r\n        role: 'user',\r\n        content: `Generate a travel plan for: \"${userInput}\".\r\n        \r\n        Here's what I've understood about this request:\r\n        Destination: ${intent.arrival || 'Not specified'}\r\n        Duration: ${intent.travel_duration || 'Not specified'}\r\n        Arrival date: ${intent.arrival_date || 'Not specified'}\r\n        Entertainment preferences: ${intent.entertainment_prefer || 'Not specified'}\r\n        Transportation preferences: ${intent.transportation_prefer || 'Not specified'}\r\n        Accommodation preferences: ${intent.accommodation_prefer || 'Not specified'}\r\n        Budget: ${intent.total_cost_prefer || 'Not specified'}\r\n        Special needs: ${intent.user_personal_need || 'Not specified'}`\r\n      }\r\n    ];\r\n    \r\n    return await callOpenAI(messages, {\r\n      temperature: 0.7,\r\n      max_tokens: 2500\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Function to generate a random route\r\n * @returns {Promise<object>} - Generated random route data\r\n */\r\nexport const generateRandomRoute = async () => {\r\n  debugLog('Generating random route');\r\n  \r\n  if (config.useServerProxy) {\r\n    const apiClient = createApiClient();\r\n    \r\n    try {\r\n      const response = await apiClient.post('/openai/generate-random-route');\r\n      return response.data.route;\r\n    } catch (error) {\r\n      console.error('Error generating random route:', error);\r\n      throw error;\r\n    }\r\n  } else {\r\n    const messages = [\r\n      {\r\n        role: 'system',\r\n        content: `You are a travel planning assistant that creates surprising and interesting travel itineraries.\r\n        Create a completely random but interesting travel itinerary to a destination that most travelers find appealing.\r\n        Include the following in your response as a JSON object:\r\n        - route_name: A catchy name for this travel route\r\n        - destination: The main destination you've chosen\r\n        - duration: Duration of the trip in days (choose something between 2-7 days)\r\n        - overview: A brief overview of the trip\r\n        - highlights: Array of top highlights/attractions\r\n        - daily_itinerary: Array of day objects with activities\r\n        - estimated_costs: Breakdown of estimated costs\r\n        - recommended_transportation: Suggestions for getting around\r\n        - accommodation_suggestions: Array of accommodation options\r\n        - travel_tips: Array of useful tips for this destination`\r\n      },\r\n      {\r\n        role: 'user',\r\n        content: 'Surprise me with an interesting travel itinerary to somewhere exciting!'\r\n      }\r\n    ];\r\n    \r\n    return await callOpenAI(messages, {\r\n      temperature: 0.9, // Higher temperature for more randomness\r\n      max_tokens: 2500\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Function to split route by day\r\n * @param {object} route - Route data to split\r\n * @returns {Promise<object>} - Timeline data with daily itineraries\r\n */\r\nexport const splitRouteByDay = async (route) => {\r\n  debugLog('Splitting route by day:', route);\r\n  \r\n  if (config.useServerProxy) {\r\n    const apiClient = createApiClient();\r\n    \r\n    try {\r\n      const response = await apiClient.post('/openai/split-route-by-day', {\r\n        route: route\r\n      });\r\n      \r\n      return response.data.timeline;\r\n    } catch (error) {\r\n      console.error('Error splitting route by day:', error);\r\n      throw error;\r\n    }\r\n  } else {\r\n    const messages = [\r\n      {\r\n        role: 'system',\r\n        content: `You are a travel planning assistant that creates detailed daily itineraries.\r\n        Based on the provided route information, create a day-by-day itinerary.\r\n        For each day, include:\r\n        - travel_day: Day number\r\n        - current_date: Suggested date for this day\r\n        - dairy_routes: Array of activities with:\r\n           - route_id: Unique identifier for this route (format: r001, r002, etc.)\r\n           - departure_site: Starting point for this leg\r\n           - arrival_site: Ending point for this leg\r\n           - departure_time: Suggested departure time (include timezone)\r\n           - arrival_time: Estimated arrival time (include timezone)\r\n           - user_time_zone: User's time zone (e.g., \"GMT-4\")\r\n           - transportation_type: How to get there (e.g., \"walk\", \"drive\", \"public_transit\")\r\n           - duration: Estimated duration\r\n           - duration_unit: Unit for duration (e.g., \"minute\", \"hour\")\r\n           - distance: Estimated distance\r\n           - distance_unit: Unit for distance (e.g., \"mile\", \"km\")\r\n           - recommended_reason: Why this site is recommended`\r\n      },\r\n      {\r\n        role: 'user',\r\n        content: `Create a detailed day-by-day itinerary for the following trip:\r\n        \r\n        Destination: ${route.destination || 'Unknown location'}\r\n        Duration: ${route.duration || '3 days'}\r\n        Overview: ${route.overview || 'No overview provided'}\r\n        Highlights: ${Array.isArray(route.highlights) ? route.highlights.join(', ') : 'No highlights provided'}`\r\n      }\r\n    ];\r\n    \r\n    return await callOpenAI(messages, {\r\n      temperature: 0.7,\r\n      max_tokens: 2500\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Get the current configuration status\r\n * @returns {object} Configuration status\r\n */\r\nexport const getStatus = () => {\r\n  return {\r\n    isConfigured: !!config.apiKey || config.useServerProxy,\r\n    model: config.model,\r\n    debug: config.debug,\r\n    useServerProxy: config.useServerProxy\r\n  };\r\n};\r\n\r\nexport default {\r\n  setApiKey,\r\n  setModel,\r\n  setUseServerProxy,\r\n  setDebugMode,\r\n  getStatus,\r\n  recognizeTextIntent,\r\n  generateRoute,\r\n  generateRandomRoute,\r\n  splitRouteByDay\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { getStatus } from '../core/api/openaiApi';\r\n\r\n/**\r\n * ApiStatus component - displays the status of the API connections\r\n */\r\nconst ApiStatus = () => {\r\n  const [apiStatus, setApiStatus] = useState({\r\n    openai: false,\r\n    maps: false,\r\n    checking: true,\r\n    error: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    const checkApiStatus = async () => {\r\n      try {\r\n        const status = await getStatus();\r\n        setApiStatus({\r\n          openai: status.isConfigured,\r\n          maps: !!process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n          checking: false,\r\n          error: null\r\n        });\r\n      } catch (error) {\r\n        setApiStatus({\r\n          openai: false,\r\n          maps: false,\r\n          checking: false,\r\n          error: error.message\r\n        });\r\n      }\r\n    };\r\n\r\n    checkApiStatus();\r\n  }, []);\r\n\r\n  if (apiStatus.checking) {\r\n    return <div className=\"api-status\">Checking API status...</div>;\r\n  }\r\n\r\n  if (apiStatus.error) {\r\n    return (\r\n      <div className=\"api-status api-status-error\">\r\n        <h3>API Status Error</h3>\r\n        <p>{apiStatus.error}</p>\r\n        <p>Please check your API configuration in the .env file.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"api-status\">\r\n      <h3>API Status</h3>\r\n      <ul>\r\n        <li className={apiStatus.openai ? \"api-connected\" : \"api-disconnected\"}>\r\n          OpenAI API: {apiStatus.openai ? \"Connected\" : \"Not Connected\"}\r\n          {!apiStatus.openai && (\r\n            <p className=\"api-help\">\r\n              Please set your OpenAI API key in the .env file (REACT_APP_OPENAI_API_KEY).\r\n            </p>\r\n          )}\r\n        </li>\r\n        <li className={apiStatus.maps ? \"api-connected\" : \"api-disconnected\"}>\r\n          Google Maps API: {apiStatus.maps ? \"Connected\" : \"Not Connected\"}\r\n          {!apiStatus.maps && (\r\n            <p className=\"api-help\">\r\n              Please set your Google Maps API key in the .env file (REACT_APP_GOOGLE_MAPS_API_KEY).\r\n            </p>\r\n          )}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ApiStatus; ","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../styles/ChatPage.css';\r\nimport * as openaiApi from '../core/api/openaiApi';\r\nimport ApiStatus from '../components/ApiStatus';\r\n\r\n// Mock data for live pop-up window and route rankboard\r\nconst mockPopups = [\r\n  {\r\n    user_profile: 'https://randomuser.me/api/portraits/men/1.jpg',\r\n    user_name: 'uid001',\r\n    user_route_id: 'uid001-1',\r\n    upvotes: 100,\r\n    user_route_name: 'A 3-day US travel plan',\r\n    created_date: '2025-01-01'\r\n  },\r\n  {\r\n    user_profile: 'https://randomuser.me/api/portraits/women/2.jpg',\r\n    user_name: 'uid002',\r\n    user_route_id: 'uid002-1',\r\n    upvotes: 85,\r\n    user_route_name: 'Paris weekend getaway',\r\n    created_date: '2025-01-02'\r\n  },\r\n  {\r\n    user_profile: 'https://randomuser.me/api/portraits/men/3.jpg',\r\n    user_name: 'uid003',\r\n    user_route_id: 'uid003-1',\r\n    upvotes: 72,\r\n    user_route_name: 'Tokyo adventure',\r\n    created_date: '2025-01-03'\r\n  }\r\n];\r\n\r\nconst mockRankboard = [\r\n  {\r\n    upvote_rank_number: 1,\r\n    user_profile: 'https://randomuser.me/api/portraits/men/1.jpg',\r\n    user_name: 'uid001',\r\n    user_route_id: 'uid001-1',\r\n    upvotes: 100,\r\n    user_route_name: 'A 3-day US travel plan',\r\n    created_date: '2025-01-01'\r\n  },\r\n  {\r\n    upvote_rank_number: 2,\r\n    user_profile: 'https://randomuser.me/api/portraits/women/2.jpg',\r\n    user_name: 'uid002',\r\n    user_route_id: 'uid002-1',\r\n    upvotes: 85,\r\n    user_route_name: 'Paris weekend getaway',\r\n    created_date: '2025-01-02'\r\n  },\r\n  {\r\n    upvote_rank_number: 3,\r\n    user_profile: 'https://randomuser.me/api/portraits/men/3.jpg',\r\n    user_name: 'uid003',\r\n    user_route_id: 'uid003-1',\r\n    upvotes: 72,\r\n    user_route_name: 'Tokyo adventure',\r\n    created_date: '2025-01-03'\r\n  },\r\n  {\r\n    upvote_rank_number: 4,\r\n    user_profile: 'https://randomuser.me/api/portraits/women/4.jpg',\r\n    user_name: 'uid004',\r\n    user_route_id: 'uid004-1',\r\n    upvotes: 65,\r\n    user_route_name: 'Rome historical tour',\r\n    created_date: '2025-01-04'\r\n  },\r\n  {\r\n    upvote_rank_number: 5,\r\n    user_profile: 'https://randomuser.me/api/portraits/men/5.jpg',\r\n    user_name: 'uid005',\r\n    user_route_id: 'uid005-1',\r\n    upvotes: 58,\r\n    user_route_name: 'Barcelona beach vacation',\r\n    created_date: '2025-01-05'\r\n  }\r\n];\r\n\r\n// Function to generate random background color for pop-ups\r\nconst getRandomColor = () => {\r\n  const colors = [\r\n    '#ffcdd2', '#f8bbd0', '#e1bee7', '#d1c4e9', '#c5cae9', \r\n    '#bbdefb', '#b3e5fc', '#b2ebf2', '#b2dfdb', '#c8e6c9', \r\n    '#dcedc8', '#f0f4c3', '#fff9c4', '#ffecb3', '#ffe0b2'\r\n  ];\r\n  return colors[Math.floor(Math.random() * colors.length)];\r\n};\r\n\r\nconst ChatPage = () => {\r\n  const navigate = useNavigate();\r\n  const [userInput, setUserInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // Real implementation for user_route_generate using OpenAI API\r\n  const handleGenerateRoute = async () => {\r\n    if (!userInput.trim()) return;\r\n    \r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // 1. Recognize the intent from user input\r\n      const intentResponse = await openaiApi.recognizeTextIntent(userInput);\r\n      \r\n      // 2. Generate a route based on the recognized intent\r\n      const routeResponse = await openaiApi.generateRoute(userInput);\r\n      \r\n      // 3. Navigate to map page with the generated route data\r\n      navigate('/map', { \r\n        state: { \r\n          userQuery: userInput, \r\n          intentData: intentResponse,\r\n          routeData: routeResponse\r\n        } \r\n      });\r\n    } catch (err) {\r\n      console.error('Error generating route:', err);\r\n      setError('Failed to generate route. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Real implementation for user_route_generate_randomly using OpenAI API\r\n  const handleFeelLucky = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // 1. Generate a random route\r\n      const randomRouteResponse = await openaiApi.generateRandomRoute();\r\n      \r\n      // 2. Navigate to map page with the randomly generated route\r\n      navigate('/map', { \r\n        state: { \r\n          userQuery: 'Random destination', \r\n          intentData: null,\r\n          routeData: randomRouteResponse\r\n        } \r\n      });\r\n    } catch (err) {\r\n      console.error('Error generating random route:', err);\r\n      setError('Failed to generate random route. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  const handlePopupClick = (routeId) => {\r\n    navigate('/map', { state: { routeId } });\r\n  };\r\n  \r\n  const handleRankItemClick = (routeId) => {\r\n    navigate('/map', { state: { routeId } });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-page\">\r\n      {/* Element 1: Title */}\r\n      <h1 className=\"page-title\">Your personal tour guide!</h1>\r\n      \r\n      {/* API Status component */}\r\n      <ApiStatus />\r\n      \r\n      <div className=\"chat-container\">\r\n        <div className=\"input-section\">\r\n          {/* Element 2: Input Box */}\r\n          <textarea\r\n            className=\"input-box\"\r\n            placeholder=\"Tell me about your dream vacation...\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n          />\r\n          \r\n          <div className=\"button-group\">\r\n            {/* Element 3: Generate Button */}\r\n            <button\r\n              className=\"btn btn-primary generate-btn\"\r\n              onClick={handleGenerateRoute}\r\n              disabled={!userInput.trim() || isLoading}\r\n            >\r\n              {isLoading ? 'Generating...' : 'Generate your first plan!'}\r\n            </button>\r\n            \r\n            {/* Element 4: Feel Lucky Button */}\r\n            <button\r\n              className=\"btn btn-secondary lucky-btn\"\r\n              onClick={handleFeelLucky}\r\n              disabled={!userInput.trim() || isLoading}\r\n            >\r\n              Feel lucky?\r\n            </button>\r\n          </div>\r\n          \r\n          {/* Error message */}\r\n          {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n        \r\n        <div className=\"content-section\">\r\n          {/* Element 5: Live Pop-up Window */}\r\n          <div className=\"live-popup-section\">\r\n            <h2>Live Activity</h2>\r\n            <div className=\"popup-container\">\r\n              {mockPopups.map((popup, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"popup-item\"\r\n                  style={{ backgroundColor: getRandomColor() }}\r\n                  onClick={() => handlePopupClick(popup.user_route_id)}\r\n                >\r\n                  <img src={popup.user_profile} alt={popup.user_name} className=\"user-avatar\" />\r\n                  <div className=\"popup-content\">\r\n                    <p className=\"user-name\">{popup.user_name}</p>\r\n                    <p className=\"route-name\">{popup.user_route_name}</p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Element 6: Route Rankboard */}\r\n          <div className=\"rankboard-section\">\r\n            <h2>Top Routes</h2>\r\n            <div className=\"rankboard-container\">\r\n              <div className=\"top-three\">\r\n                {mockRankboard.slice(0, 3).map((item) => (\r\n                  <div key={item.upvote_rank_number} className=\"medal-item\" onClick={() => handleRankItemClick(item.user_route_id)}>\r\n                    <div className={`medal rank-${item.upvote_rank_number}`}>\r\n                      <img src={item.user_profile} alt={item.user_name} className=\"user-avatar\" />\r\n                      <div className=\"upvote-badge\">{item.upvotes}</div>\r\n                    </div>\r\n                    <p className=\"user-name\">{item.user_name}</p>\r\n                    <p className=\"route-name\">{item.user_route_name}</p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              \r\n              <div className=\"other-ranks\">\r\n                {mockRankboard.slice(3).map((item) => (\r\n                  <div key={item.upvote_rank_number} className=\"rank-item\" onClick={() => handleRankItemClick(item.user_route_id)}>\r\n                    <div className=\"rank-number\">{item.upvote_rank_number}</div>\r\n                    <div className=\"rank-details\">\r\n                      <p className=\"route-name\">{item.user_route_name}</p>\r\n                      <p className=\"upvotes\">{item.upvotes} upvotes</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage; "],"names":["config","apiKey","model","apiEndpoint","debug","setApiKey","length","Error","console","log","setDebugMode","enabled","process","debugLog","message","data","createApiClient","axios","create","baseURL","apiBaseUrl","headers","useServerProxy","timeout","callOpenAI","async","messages","options","arguments","undefined","apiClient","response","useProxy","endpoint","post","temperature","max_tokens","result","requestOptions","top_p","frequency_penalty","presence_penalty","response_format","type","content","choices","JSON","parse","parseError","error","raw_content","recognizeTextIntent","userInput","role","text","intent","generateRoute","arrival","travel_duration","arrival_date","entertainment_prefer","transportation_prefer","accommodation_prefer","total_cost_prefer","user_personal_need","route","generateRandomRoute","getStatus","isConfigured","ApiStatus","apiStatus","setApiStatus","useState","openai","maps","checking","useEffect","status","checkApiStatus","_jsx","className","children","_jsxs","mockPopups","user_profile","user_name","user_route_id","upvotes","user_route_name","created_date","mockRankboard","upvote_rank_number","getRandomColor","colors","Math","floor","random","ChatPage","navigate","useNavigate","setUserInput","isLoading","setIsLoading","setError","handleRankItemClick","routeId","state","placeholder","value","onChange","e","target","onClick","trim","intentResponse","openaiApi","routeResponse","userQuery","intentData","routeData","err","disabled","randomRouteResponse","map","popup","index","style","backgroundColor","handlePopupClick","src","alt","slice","item"],"sourceRoot":""}