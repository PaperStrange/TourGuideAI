{"version":3,"file":"static/js/823.733308f9.chunk.js","mappings":"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","sources":["pages/MapPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport '../styles/MapPage.css';\r\n\r\n// Mock data for user input and route timeline\r\nconst mockUserInput = {\r\n  user_name: \"uid001\",\r\n  user_query: \"wish a 3-day US travel plan during christmas!\",\r\n  user_intent_recognition: [\r\n    {\r\n      arrival: \"united states\",\r\n      departure: \"\",\r\n      arrival_date: \"christmas day\",\r\n      departure_date: \"\",\r\n      travel_duration: \"3 days\",\r\n      entertainment_prefer: \"\",\r\n      transportation_prefer: \"\",\r\n      accommodation_prefer: \"\",\r\n      total_cost_prefer: \"\",\r\n      user_time_zone: \"GMT-4\",\r\n      user_personal_need: \"\"\r\n    }\r\n  ],\r\n  created_date: \"2025-01-01\"\r\n};\r\n\r\nconst mockRouteData = {\r\n  user_profile: \"https://randomuser.me/api/portraits/men/1.jpg\",\r\n  user_name: \"uid001\",\r\n  user_route_id: \"uid001-1\",\r\n  user_route_rank: 1,\r\n  created_date: \"2025-01-01\",\r\n  upvotes: 100,\r\n  user_route_name: \"a 3-day US travel plan\",\r\n  travel_split_by_day: [\r\n    {\r\n      travel_day: 1,\r\n      current_date: \"2025/03/10\",\r\n      dairy_routes: [\r\n        {\r\n          route_id: \"r001\",\r\n          departure_site: \"Hotel Washington\",\r\n          arrival_site: \"Smithsonian National Museum of Natural History\",\r\n          departure_time: \"2025/03/10 9.00 AM(GMT-4)\",\r\n          arrival_time: \"2025/03/10 9.16 AM(GMT-4)\",\r\n          user_time_zone: \"GMT-4\",\r\n          transportation_type: \"walk\",\r\n          duration: \"14\",\r\n          duration_unit: \"minute\",\r\n          distance: 0.7,\r\n          distance_unit: \"mile\",\r\n          recommended_reason: \"From dinosaur exhibits to displays of rare gems, this acclaimed museum celebrates the natural world.\"\r\n        },\r\n        {\r\n          route_id: \"r002\",\r\n          departure_site: \"Smithsonian National Museum of Natural History\",\r\n          arrival_site: \"National Air and Space Museum\",\r\n          departure_time: \"2025/03/10 11.30 AM(GMT-4)\",\r\n          arrival_time: \"2025/03/10 11.45 AM(GMT-4)\",\r\n          user_time_zone: \"GMT-4\",\r\n          transportation_type: \"walk\",\r\n          duration: \"15\",\r\n          duration_unit: \"minute\",\r\n          distance: 0.8,\r\n          distance_unit: \"mile\",\r\n          recommended_reason: \"Explore the history of flight and space exploration at this fascinating museum.\"\r\n        },\r\n        {\r\n          route_id: \"r003\",\r\n          departure_site: \"National Air and Space Museum\",\r\n          arrival_site: \"Lincoln Memorial\",\r\n          departure_time: \"2025/03/10 2.00 PM(GMT-4)\",\r\n          arrival_time: \"2025/03/10 2.20 PM(GMT-4)\",\r\n          user_time_zone: \"GMT-4\",\r\n          transportation_type: \"taxi\",\r\n          duration: \"20\",\r\n          duration_unit: \"minute\",\r\n          distance: 2.1,\r\n          distance_unit: \"mile\",\r\n          recommended_reason: \"This iconic memorial honors Abraham Lincoln and offers stunning views of the National Mall.\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      travel_day: 2,\r\n      current_date: \"2025/03/11\",\r\n      dairy_routes: [\r\n        {\r\n          route_id: \"r004\",\r\n          departure_site: \"Hotel Washington\",\r\n          arrival_site: \"White House\",\r\n          departure_time: \"2025/03/11 9.00 AM(GMT-4)\",\r\n          arrival_time: \"2025/03/11 9.10 AM(GMT-4)\",\r\n          user_time_zone: \"GMT-4\",\r\n          transportation_type: \"walk\",\r\n          duration: \"10\",\r\n          duration_unit: \"minute\",\r\n          distance: 0.5,\r\n          distance_unit: \"mile\",\r\n          recommended_reason: \"The official residence and workplace of the President of the United States.\"\r\n        },\r\n        {\r\n          route_id: \"r005\",\r\n          departure_site: \"White House\",\r\n          arrival_site: \"National Gallery of Art\",\r\n          departure_time: \"2025/03/11 11.00 AM(GMT-4)\",\r\n          arrival_time: \"2025/03/11 11.20 AM(GMT-4)\",\r\n          user_time_zone: \"GMT-4\",\r\n          transportation_type: \"walk\",\r\n          duration: \"20\",\r\n          duration_unit: \"minute\",\r\n          distance: 1.0,\r\n          distance_unit: \"mile\",\r\n          recommended_reason: \"One of the world's finest art museums with an impressive collection spanning centuries.\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      travel_day: 3,\r\n      current_date: \"2025/03/12\",\r\n      dairy_routes: [\r\n        {\r\n          route_id: \"r006\",\r\n          departure_site: \"Hotel Washington\",\r\n          arrival_site: \"United States Capitol\",\r\n          departure_time: \"2025/03/12 9.00 AM(GMT-4)\",\r\n          arrival_time: \"2025/03/12 9.25 AM(GMT-4)\",\r\n          user_time_zone: \"GMT-4\",\r\n          transportation_type: \"taxi\",\r\n          duration: \"25\",\r\n          duration_unit: \"minute\",\r\n          distance: 2.3,\r\n          distance_unit: \"mile\",\r\n          recommended_reason: \"The meeting place of the United States Congress and the seat of the legislative branch of the U.S. federal government.\"\r\n        },\r\n        {\r\n          route_id: \"r007\",\r\n          departure_site: \"United States Capitol\",\r\n          arrival_site: \"Library of Congress\",\r\n          departure_time: \"2025/03/12 11.30 AM(GMT-4)\",\r\n          arrival_time: \"2025/03/12 11.40 AM(GMT-4)\",\r\n          user_time_zone: \"GMT-4\",\r\n          transportation_type: \"walk\",\r\n          duration: \"10\",\r\n          duration_unit: \"minute\",\r\n          distance: 0.5,\r\n          distance_unit: \"mile\",\r\n          recommended_reason: \"The largest library in the world, with millions of books, recordings, photographs, newspapers, maps and manuscripts.\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n};\r\n\r\n// Mock nearby interest points\r\nconst mockNearbyPoints = [\r\n  {\r\n    id: 'np1',\r\n    name: 'National Museum of American History',\r\n    position: { lat: 38.8911, lng: -77.0300 },\r\n    address: '1300 Constitution Ave NW, Washington, DC 20560',\r\n    reviews: [\r\n      { user: 'John D.', text: 'Amazing collection of American artifacts!' },\r\n      { user: 'Sarah M.', text: 'Spent hours here, very educational.' },\r\n      { user: 'Mike T.', text: 'The First Ladies exhibit was fascinating.' },\r\n      { user: 'Lisa R.', text: 'Great for history buffs of all ages.' },\r\n      { user: 'David K.', text: 'Well organized and informative displays.' }\r\n    ]\r\n  },\r\n  {\r\n    id: 'np2',\r\n    name: 'Washington Monument',\r\n    position: { lat: 38.8895, lng: -77.0353 },\r\n    address: '2 15th St NW, Washington, DC 20024',\r\n    reviews: [\r\n      { user: 'Emma S.', text: 'The view from the top is breathtaking!' },\r\n      { user: 'Robert J.', text: 'Iconic monument, a must-see in DC.' },\r\n      { user: 'Patricia L.', text: 'Get tickets in advance to avoid long lines.' },\r\n      { user: 'Thomas B.', text: 'Beautiful at sunset.' },\r\n      { user: 'Jennifer W.', text: 'Great photo opportunity.' }\r\n    ]\r\n  },\r\n  {\r\n    id: 'np3',\r\n    name: 'National Gallery of Art Sculpture Garden',\r\n    position: { lat: 38.8913, lng: -77.0231 },\r\n    address: 'Constitution Ave NW &, 7th St NW, Washington, DC 20408',\r\n    reviews: [\r\n      { user: 'Richard M.', text: 'Peaceful oasis in the middle of the city.' },\r\n      { user: 'Karen P.', text: 'Beautiful sculptures in a lovely setting.' },\r\n      { user: 'Daniel T.', text: 'Great place to relax after museum visits.' },\r\n      { user: 'Nancy C.', text: 'The fountain is beautiful in summer.' },\r\n      { user: 'Paul S.', text: 'Ice skating in winter is a fun activity here.' }\r\n    ]\r\n  }\r\n];\r\n\r\n// Map component configuration\r\nconst mapContainerStyle = {\r\n  width: '100%',\r\n  height: '500px'\r\n};\r\n\r\nconst center = {\r\n  lat: 38.8977,\r\n  lng: -77.0365\r\n};\r\n\r\nconst options = {\r\n  disableDefaultUI: true,\r\n  zoomControl: true,\r\n};\r\n\r\nconst MapPage = () => {\r\n  const location = useLocation();\r\n  const [selectedPoint, setSelectedPoint] = useState(null);\r\n  const [routeData, setRouteData] = useState(mockRouteData);\r\n  const [userInput, setUserInput] = useState(mockUserInput);\r\n  \r\n  // Load Google Maps script\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || \"\", // Use environment variable\r\n    libraries: [\"places\"],\r\n  });\r\n  \r\n  // Effect to handle route data from navigation state\r\n  useEffect(() => {\r\n    if (location.state) {\r\n      console.log('Route data from navigation:', location.state);\r\n      \r\n      // Use real data passed from ChatPage if available\r\n      if (location.state.routeData) {\r\n        // Transform the OpenAI route format to our app's route format\r\n        const transformedRouteData = transformRouteData(location.state.routeData, location.state.userQuery);\r\n        setRouteData(transformedRouteData);\r\n      }\r\n      \r\n      if (location.state.userQuery) {\r\n        // Create user input object from the query\r\n        setUserInput({\r\n          user_name: \"current_user\",\r\n          user_query: location.state.userQuery,\r\n          user_intent_recognition: location.state.intentData ? [location.state.intentData.intent] : mockUserInput.user_intent_recognition,\r\n          created_date: new Date().toISOString().split('T')[0]\r\n        });\r\n      }\r\n    }\r\n  }, [location]);\r\n  \r\n  // Helper function to transform the OpenAI route data format to our app's format\r\n  const transformRouteData = (openaiRoute, query) => {\r\n    if (!openaiRoute) return mockRouteData;\r\n    \r\n    try {\r\n      // Create a transformed route object\r\n      const transformedRoute = {\r\n        user_profile: \"https://randomuser.me/api/portraits/men/1.jpg\", // Default profile\r\n        user_name: \"current_user\",\r\n        user_route_id: `route-${Date.now()}`,\r\n        user_route_rank: 1,\r\n        created_date: new Date().toISOString().split('T')[0],\r\n        upvotes: 0,\r\n        user_route_name: openaiRoute.route_name || `${openaiRoute.destination} Trip`,\r\n        travel_split_by_day: []\r\n      };\r\n      \r\n      // Transform daily itinerary into travel_split_by_day format\r\n      if (openaiRoute.daily_itinerary && Array.isArray(openaiRoute.daily_itinerary)) {\r\n        transformedRoute.travel_split_by_day = openaiRoute.daily_itinerary.map((day, dayIndex) => {\r\n          // Get activities for the day\r\n          const activities = day.activities || [];\r\n          \r\n          // Create routes between activities\r\n          const routes = [];\r\n          for (let i = 0; i < activities.length - 1; i++) {\r\n            const departure = activities[i];\r\n            const arrival = activities[i + 1];\r\n            \r\n            routes.push({\r\n              route_id: `r${dayIndex + 1}-${i + 1}`,\r\n              departure_site: departure.activity.split(' at ')[1] || departure.activity,\r\n              arrival_site: arrival.activity.split(' at ')[1] || arrival.activity,\r\n              departure_time: `${new Date().getFullYear()}/${String(new Date().getMonth() + 1).padStart(2, '0')}/${String(dayIndex + 1).padStart(2, '0')} ${departure.time}`,\r\n              arrival_time: `${new Date().getFullYear()}/${String(new Date().getMonth() + 1).padStart(2, '0')}/${String(dayIndex + 1).padStart(2, '0')} ${arrival.time}`,\r\n              user_time_zone: \"Local\",\r\n              transportation_type: getRandomTransportation(),\r\n              duration: getRandomDuration(),\r\n              duration_unit: \"minute\",\r\n              distance: getRandomDistance(),\r\n              distance_unit: \"mile\",\r\n              recommended_reason: getRecommendationFromActivity(arrival.activity)\r\n            });\r\n          }\r\n          \r\n          return {\r\n            travel_day: day.day || dayIndex + 1,\r\n            current_date: `${new Date().getFullYear()}/${String(new Date().getMonth() + 1).padStart(2, '0')}/${String(dayIndex + 1).padStart(2, '0')}`,\r\n            dairy_routes: routes\r\n          };\r\n        });\r\n      }\r\n      \r\n      return transformedRoute;\r\n    } catch (error) {\r\n      console.error('Error transforming route data:', error);\r\n      return mockRouteData;\r\n    }\r\n  };\r\n  \r\n  // Helper functions to generate random data when real data is not available\r\n  const getRandomTransportation = () => {\r\n    const options = ['walk', 'taxi', 'bus', 'subway', 'bike'];\r\n    return options[Math.floor(Math.random() * options.length)];\r\n  };\r\n  \r\n  const getRandomDuration = () => {\r\n    return String(Math.floor(Math.random() * 30) + 10);\r\n  };\r\n  \r\n  const getRandomDistance = () => {\r\n    return (Math.random() * 2 + 0.5).toFixed(1);\r\n  };\r\n  \r\n  const getRecommendationFromActivity = (activity) => {\r\n    // Extract a recommendation from the activity description\r\n    if (!activity) return \"A must-visit destination on your trip.\";\r\n    \r\n    const recommendations = [\r\n      `Discover ${activity} - a highlight of the area.`,\r\n      `${activity} offers an unforgettable experience.`,\r\n      `Don't miss ${activity} during your visit.`,\r\n      `${activity} is popular among travelers for good reason.`,\r\n      `Experience the unique atmosphere of ${activity}.`\r\n    ];\r\n    \r\n    return recommendations[Math.floor(Math.random() * recommendations.length)];\r\n  };\r\n  \r\n  // Mock function for map_real_time_display\r\n  const displayRouteOnMap = () => {\r\n    console.log('Displaying route on map');\r\n    // In a real implementation, this would use the Google Maps Directions API\r\n  };\r\n  \r\n  // Mock function for get nearby interest point\r\n  const getNearbyInterestPoints = () => {\r\n    console.log('Getting nearby interest points');\r\n    // In a real implementation, this would use the Google Maps Places API\r\n    return mockNearbyPoints;\r\n  };\r\n  \r\n  // Mock function for user_route_split_by_day\r\n  const splitRouteByDay = () => {\r\n    console.log('Splitting route by day');\r\n    // In a real implementation, this would call the OpenAI API\r\n    return routeData.travel_split_by_day;\r\n  };\r\n  \r\n  // Mock function for user_route_transportation_validation\r\n  const validateTransportation = () => {\r\n    console.log('Validating transportation');\r\n    // In a real implementation, this would use the Google Maps Directions API\r\n  };\r\n  \r\n  // Mock function for user_route_interest_points_validation\r\n  const validateInterestPoints = () => {\r\n    console.log('Validating interest points');\r\n    // In a real implementation, this would use the Google Maps Distance Matrix API\r\n  };\r\n  \r\n  // Handle marker click\r\n  const handleMarkerClick = (point) => {\r\n    setSelectedPoint(point);\r\n  };\r\n  \r\n  // Render loading indicator or error message for map\r\n  const renderMap = () => {\r\n    if (loadError) {\r\n      return (\r\n        <div className=\"map-error-container\">\r\n          <h3>Error loading maps</h3>\r\n          <p>There was an error loading Google Maps. Please check your API key configuration.</p>\r\n          <p className=\"error-details\">Error: {loadError.message}</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!isLoaded) {\r\n      return <div className=\"map-loading\">Loading maps...</div>;\r\n    }\r\n\r\n    return (\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainerStyle}\r\n        zoom={14}\r\n        center={center}\r\n        options={options}\r\n        onLoad={displayRouteOnMap}\r\n      >\r\n        {/* Route markers */}\r\n        {routeData.travel_split_by_day.flatMap(day =>\r\n          day.dairy_routes.map(route => (\r\n            <React.Fragment key={route.route_id}>\r\n              <Marker\r\n                key={`departure-${route.route_id}`}\r\n                position={{\r\n                  lat: 38.8977 + (Math.random() - 0.5) * 0.02,\r\n                  lng: -77.0365 + (Math.random() - 0.5) * 0.02\r\n                }}\r\n                onClick={() => handleMarkerClick({\r\n                  id: `departure-${route.route_id}`,\r\n                  name: route.departure_site,\r\n                  position: {\r\n                    lat: 38.8977 + (Math.random() - 0.5) * 0.02,\r\n                    lng: -77.0365 + (Math.random() - 0.5) * 0.02\r\n                  }\r\n                })}\r\n              />\r\n              <Marker\r\n                key={`arrival-${route.route_id}`}\r\n                position={{\r\n                  lat: 38.8977 + (Math.random() - 0.5) * 0.02,\r\n                  lng: -77.0365 + (Math.random() - 0.5) * 0.02\r\n                }}\r\n                onClick={() => handleMarkerClick({\r\n                  id: `arrival-${route.route_id}`,\r\n                  name: route.arrival_site,\r\n                  position: {\r\n                    lat: 38.8977 + (Math.random() - 0.5) * 0.02,\r\n                    lng: -77.0365 + (Math.random() - 0.5) * 0.02\r\n                  }\r\n                })}\r\n              />\r\n            </React.Fragment>\r\n          ))\r\n        )}\r\n\r\n        {/* Nearby points */}\r\n        {getNearbyInterestPoints().map(point => (\r\n          <Marker\r\n            key={point.id}\r\n            position={point.position}\r\n            icon={{\r\n              url: `http://maps.google.com/mapfiles/ms/icons/green-dot.png`,\r\n              scaledSize: isLoaded ? new window.google.maps.Size(32, 32) : null\r\n            }}\r\n            onClick={() => handleMarkerClick(point)}\r\n          />\r\n        ))}\r\n\r\n        {/* Info window */}\r\n        {selectedPoint && (\r\n          <InfoWindow\r\n            position={selectedPoint.position}\r\n            onCloseClick={() => setSelectedPoint(null)}\r\n          >\r\n            <div className=\"info-window\">\r\n              <h3>{selectedPoint.name}</h3>\r\n              {selectedPoint.address && <p>{selectedPoint.address}</p>}\r\n              {selectedPoint.reviews && selectedPoint.reviews.length > 0 && (\r\n                <div className=\"reviews\">\r\n                  <h4>Reviews</h4>\r\n                  {selectedPoint.reviews.map((review, index) => (\r\n                    <div key={index} className=\"review\">\r\n                      <div className=\"review-rating\">{review.rating}/5</div>\r\n                      <div className=\"review-text\">{review.text}</div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </InfoWindow>\r\n        )}\r\n      </GoogleMap>\r\n    );\r\n  };\r\n\r\n  // Add helper function to get coordinates from location name (mock implementation)\r\n  const getCoordinatesFromLocation = (locationName) => {\r\n    // This would be replaced with actual geocoding in a real application\r\n    return {\r\n      lat: 38.8977 + (Math.random() - 0.5) * 0.02,\r\n      lng: -77.0365 + (Math.random() - 0.5) * 0.02\r\n    };\r\n  };\r\n\r\n  // Main component return\r\n  return (\r\n    <div className=\"map-page\">\r\n      <h1 className=\"page-title\">Interactive Map</h1>\r\n      \r\n      <div className=\"map-container\">\r\n        {renderMap()}\r\n      </div>\r\n        \r\n      {/* Element 2: User Input Box Component */}\r\n      <div className=\"user-input-box\">\r\n        <h2>User Query</h2>\r\n        <div className=\"query-display\">\r\n          <p>{userInput.user_query}</p>\r\n          <div className=\"intent-recognition\">\r\n            <h3>Recognized Intent</h3>\r\n            <ul>\r\n              {userInput.user_intent_recognition.map((intent, index) => (\r\n                <li key={index}>\r\n                  <strong>Destination:</strong> {intent.arrival || 'Not specified'}<br />\r\n                  <strong>Travel Period:</strong> {intent.arrival_date || 'Not specified'}<br />\r\n                  <strong>Duration:</strong> {intent.travel_duration || 'Not specified'}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Element 3: Route Timeline Component */}\r\n      <div className=\"route-timeline\">\r\n        <h2>Route Timeline</h2>\r\n        <div className=\"timeline-container\">\r\n          {splitRouteByDay().map((day) => (\r\n            <div key={day.travel_day} className=\"day-container\">\r\n              <div className=\"day-header\">\r\n                <h3>Day {day.travel_day}</h3>\r\n                <span className=\"day-date\">{day.current_date}</span>\r\n              </div>\r\n              <div className=\"routes-container\">\r\n                {day.dairy_routes.map((route) => (\r\n                  <div key={route.route_id} className=\"route-item\">\r\n                    <div className=\"timeline-marker\"></div>\r\n                    <div className=\"route-content\">\r\n                      <div className=\"route-sites\">\r\n                        <div className=\"departure-site\">\r\n                          <span className=\"time\">{route.departure_time.split(' ')[1]}</span>\r\n                          <span className=\"site-name\">{route.departure_site}</span>\r\n                        </div>\r\n                        <div className=\"transportation\">\r\n                          <span className=\"transport-type\">{route.transportation_type}</span>\r\n                          <span className=\"transport-details\">\r\n                            {route.duration} {route.duration_unit} • {route.distance} {route.distance_unit}\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"arrival-site\">\r\n                          <span className=\"time\">{route.arrival_time.split(' ')[1]}</span>\r\n                          <span className=\"site-name\">{route.arrival_site}</span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"recommendation\">\r\n                        <p>{route.recommended_reason}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage; "],"names":["mockUserInput","user_name","user_query","user_intent_recognition","arrival","departure","arrival_date","departure_date","travel_duration","entertainment_prefer","transportation_prefer","accommodation_prefer","total_cost_prefer","user_time_zone","user_personal_need","created_date","mockRouteData","user_profile","user_route_id","user_route_rank","upvotes","user_route_name","travel_split_by_day","travel_day","current_date","dairy_routes","route_id","departure_site","arrival_site","departure_time","arrival_time","transportation_type","duration","duration_unit","distance","distance_unit","recommended_reason","mockNearbyPoints","id","name","position","lat","lng","address","reviews","user","text","mapContainerStyle","width","height","center","options","disableDefaultUI","zoomControl","MapPage","location","useLocation","selectedPoint","setSelectedPoint","useState","routeData","setRouteData","userInput","setUserInput","isLoaded","loadError","useLoadScript","googleMapsApiKey","process","libraries","useEffect","state","console","log","transformedRouteData","transformRouteData","userQuery","intentData","intent","Date","toISOString","split","openaiRoute","query","transformedRoute","now","route_name","destination","daily_itinerary","Array","isArray","map","day","dayIndex","activities","routes","i","length","push","activity","getFullYear","String","getMonth","padStart","time","getRandomTransportation","getRandomDuration","getRandomDistance","getRecommendationFromActivity","error","Math","floor","random","toFixed","recommendations","displayRouteOnMap","handleMarkerClick","point","_jsxs","className","children","_jsx","message","GoogleMap","zoom","onLoad","flatMap","route","React","Marker","onClick","icon","url","scaledSize","window","google","maps","Size","InfoWindow","onCloseClick","review","index","rating"],"sourceRoot":""}