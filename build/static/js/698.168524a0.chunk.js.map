{"version":3,"file":"static/js/698.168524a0.chunk.js","mappings":"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","sources":["features/beta-program/components/RegistrationForm.jsx","features/beta-program/components/onboarding/CodeRedemptionForm.jsx","features/beta-program/components/onboarding/UserProfileSetup.jsx","features/beta-program/components/onboarding/PreferencesSetup.jsx","features/beta-program/components/onboarding/WelcomeScreen.jsx","features/beta-program/components/OnboardingFlow.jsx","features/beta-program/hooks/useCurrentPermissions.js","features/beta-program/components/user/UserPermissionsCard.jsx","features/beta-program/components/feature-request/FeatureRequestBoard.jsx","features/beta-program/components/community/BetaCommunityForum.jsx","features/beta-program/services/analytics/AnalyticsService.js","features/beta-program/components/analytics/AnalyticsDashboard.jsx","features/beta-program/components/BetaPortal.jsx","features/beta-program/services/InviteCodeService.js","features/beta-program/services/EmailService.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  InputAdornment,\r\n  IconButton,\r\n  FormHelperText,\r\n  Alert,\r\n  Divider,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport authService from '../services/AuthService';\r\n\r\n/**\r\n * Registration form for beta program users\r\n * Includes validation for email, password strength, and beta access code\r\n * \r\n * @param {Object} props Component props\r\n * @param {Function} props.onSuccess Callback function when registration is successful\r\n */\r\nconst RegistrationForm = ({ onSuccess }) => {\r\n  // Form state\r\n  const [formValues, setFormValues] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    betaCode: ''\r\n  });\r\n\r\n  // UI state\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [formError, setFormError] = useState(null);\r\n  const [formSuccess, setFormSuccess] = useState(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // Password requirements\r\n  const passwordRequirements = [\r\n    { id: 'length', label: 'At least 8 characters', test: (password) => password.length >= 8 },\r\n    { id: 'uppercase', label: 'At least one uppercase letter', test: (password) => /[A-Z]/.test(password) },\r\n    { id: 'lowercase', label: 'At least one lowercase letter', test: (password) => /[a-z]/.test(password) },\r\n    { id: 'number', label: 'At least one number', test: (password) => /\\d/.test(password) },\r\n    { id: 'special', label: 'At least one special character', test: (password) => /[^A-Za-z0-9]/.test(password) }\r\n  ];\r\n\r\n  // Check password strength\r\n  const checkPasswordRequirements = (password) => {\r\n    return passwordRequirements.map(req => ({\r\n      ...req,\r\n      fulfilled: req.test(password)\r\n    }));\r\n  };\r\n\r\n  // Handle input changes\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormValues({\r\n      ...formValues,\r\n      [name]: value\r\n    });\r\n\r\n    // Clear specific error when field is edited\r\n    if (errors[name]) {\r\n      setErrors({\r\n        ...errors,\r\n        [name]: null\r\n      });\r\n    }\r\n\r\n    // Clear form-level errors when any field is edited\r\n    if (formError) {\r\n      setFormError(null);\r\n    }\r\n  };\r\n\r\n  // Toggle password visibility\r\n  const handleTogglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  // Toggle confirm password visibility\r\n  const handleToggleConfirmPasswordVisibility = () => {\r\n    setShowConfirmPassword(!showConfirmPassword);\r\n  };\r\n\r\n  // Validate form\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    \r\n    // Name validation\r\n    if (!formValues.name.trim()) {\r\n      newErrors.name = 'Name is required';\r\n    }\r\n    \r\n    // Email validation\r\n    if (!formValues.email) {\r\n      newErrors.email = 'Email is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formValues.email)) {\r\n      newErrors.email = 'Email is invalid';\r\n    }\r\n    \r\n    // Password validation\r\n    if (!formValues.password) {\r\n      newErrors.password = 'Password is required';\r\n    } else {\r\n      const requirements = checkPasswordRequirements(formValues.password);\r\n      const failedRequirements = requirements.filter(req => !req.fulfilled);\r\n      if (failedRequirements.length > 0) {\r\n        newErrors.password = 'Password does not meet requirements';\r\n      }\r\n    }\r\n    \r\n    // Confirm password validation\r\n    if (!formValues.confirmPassword) {\r\n      newErrors.confirmPassword = 'Please confirm your password';\r\n    } else if (formValues.password !== formValues.confirmPassword) {\r\n      newErrors.confirmPassword = 'Passwords do not match';\r\n    }\r\n    \r\n    // Beta code validation\r\n    if (!formValues.betaCode) {\r\n      newErrors.betaCode = 'Beta access code is required';\r\n    } else if (formValues.betaCode.length !== 6) {\r\n      newErrors.betaCode = 'Beta code must be 6 characters';\r\n    }\r\n    \r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    setIsSubmitting(true);\r\n    setFormError(null);\r\n    setFormSuccess(null);\r\n    \r\n    try {\r\n      // Validate beta code first\r\n      const isValidCode = await authService.validateBetaCode(formValues.betaCode);\r\n      \r\n      if (!isValidCode) {\r\n        setErrors({\r\n          ...errors,\r\n          betaCode: 'Invalid or expired beta code'\r\n        });\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n      \r\n      // Use AuthService register method (updated version)\r\n      const result = await authService.register(\r\n        formValues.email, \r\n        formValues.betaCode, \r\n        formValues.name, \r\n        formValues.password\r\n      );\r\n      \r\n      if (!result) {\r\n        setFormError('Registration failed: Invalid server response');\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n      \r\n      setFormSuccess('Registration successful! Redirecting to your dashboard...');\r\n      \r\n      // Notify parent component of successful registration\r\n      setTimeout(() => {\r\n        if (onSuccess) {\r\n          onSuccess(result);\r\n        }\r\n      }, 1500);\r\n      \r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      \r\n      if (error.response && error.response.data && error.response.data.error) {\r\n        // Handle specific API errors\r\n        const apiError = error.response.data.error;\r\n        \r\n        if (apiError.type === 'duplicate_email') {\r\n          setErrors({\r\n            ...errors,\r\n            email: 'This email is already registered'\r\n          });\r\n        } else if (apiError.type === 'invalid_invite_code') {\r\n          setErrors({\r\n            ...errors,\r\n            betaCode: 'Invalid or expired beta code'\r\n          });\r\n        } else {\r\n          setFormError(apiError.message || 'Registration failed');\r\n        }\r\n      } else {\r\n        setFormError('Registration failed: ' + (error.message || 'Unknown error'));\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Password requirements display\r\n  const renderPasswordRequirements = () => {\r\n    if (!formValues.password) {\r\n      return null;\r\n    }\r\n    \r\n    const requirements = checkPasswordRequirements(formValues.password);\r\n    \r\n    return (\r\n      <Box sx={{ mt: 1, mb: 2 }}>\r\n        <Typography variant=\"caption\" color=\"textSecondary\">\r\n          Password requirements:\r\n        </Typography>\r\n        <Grid container spacing={1}>\r\n          {requirements.map((req) => (\r\n            <Grid item xs={12} sm={6} key={req.id}>\r\n              <FormHelperText\r\n                sx={{\r\n                  color: req.fulfilled ? 'success.main' : 'text.secondary',\r\n                  display: 'flex',\r\n                  alignItems: 'center'\r\n                }}\r\n              >\r\n                {req.fulfilled ? '✓' : '○'} {req.label}\r\n              </FormHelperText>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box component=\"form\" onSubmit={handleSubmit} noValidate>\r\n      {formError && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {formError}\r\n        </Alert>\r\n      )}\r\n      \r\n      {formSuccess && (\r\n        <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n          {formSuccess}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            name=\"name\"\r\n            label=\"Full Name\"\r\n            fullWidth\r\n            value={formValues.name}\r\n            onChange={handleInputChange}\r\n            error={!!errors.name}\r\n            helperText={errors.name}\r\n            disabled={isSubmitting}\r\n            required\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12}>\r\n          <TextField\r\n            name=\"email\"\r\n            label=\"Email Address\"\r\n            fullWidth\r\n            type=\"email\"\r\n            value={formValues.email}\r\n            onChange={handleInputChange}\r\n            error={!!errors.email}\r\n            helperText={errors.email}\r\n            disabled={isSubmitting}\r\n            required\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12}>\r\n          <TextField\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            fullWidth\r\n            type={showPassword ? 'text' : 'password'}\r\n            value={formValues.password}\r\n            onChange={handleInputChange}\r\n            error={!!errors.password}\r\n            helperText={errors.password}\r\n            disabled={isSubmitting}\r\n            required\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    onClick={handleTogglePasswordVisibility}\r\n                    edge=\"end\"\r\n                  >\r\n                    {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n          {renderPasswordRequirements()}\r\n        </Grid>\r\n        \r\n        <Grid item xs={12}>\r\n          <TextField\r\n            name=\"confirmPassword\"\r\n            label=\"Confirm Password\"\r\n            fullWidth\r\n            type={showConfirmPassword ? 'text' : 'password'}\r\n            value={formValues.confirmPassword}\r\n            onChange={handleInputChange}\r\n            error={!!errors.confirmPassword}\r\n            helperText={errors.confirmPassword}\r\n            disabled={isSubmitting}\r\n            required\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    onClick={handleToggleConfirmPasswordVisibility}\r\n                    edge=\"end\"\r\n                  >\r\n                    {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12}>\r\n          <Divider sx={{ my: 1 }} />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12}>\r\n          <TextField\r\n            name=\"betaCode\"\r\n            label=\"Beta Access Code\"\r\n            fullWidth\r\n            value={formValues.betaCode}\r\n            onChange={handleInputChange}\r\n            error={!!errors.betaCode}\r\n            helperText={errors.betaCode || \"Enter the 6-character code you received via email\"}\r\n            disabled={isSubmitting}\r\n            required\r\n            inputProps={{ maxLength: 6 }}\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12}>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={isSubmitting}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            {isSubmitting ? <CircularProgress size={24} /> : 'Register'}\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RegistrationForm; ","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  Alert,\r\n  Link,\r\n  InputAdornment,\r\n  Tooltip,\r\n  IconButton\r\n} from '@mui/material';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\r\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\r\nimport inviteCodeService from '../../services/InviteCodeService';\r\n\r\n/**\r\n * Beta code redemption form\r\n * Used in the onboarding flow to validate beta access codes\r\n * \r\n * @param {Object} props Component props\r\n * @param {String} props.initialCode Initial code value (if provided)\r\n * @param {Function} props.onSubmit Callback function when a valid code is submitted\r\n */\r\nconst CodeRedemptionForm = ({ initialCode = '', onSubmit }) => {\r\n  // Form state\r\n  const [code, setCode] = useState(initialCode);\r\n  const [error, setError] = useState(null);\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [isValid, setIsValid] = useState(false);\r\n  const [hasAttempted, setHasAttempted] = useState(false);\r\n  \r\n  // Check code format (6 character alphanumeric)\r\n  const isValidFormat = (code) => {\r\n    return /^[A-Za-z0-9]{6}$/.test(code);\r\n  };\r\n  \r\n  // Effect to format code (uppercase, trim)\r\n  useEffect(() => {\r\n    if (code) {\r\n      const formattedCode = code.trim().toUpperCase();\r\n      if (formattedCode !== code) {\r\n        setCode(formattedCode);\r\n      }\r\n      \r\n      // Clear validation state when code changes\r\n      if (hasAttempted) {\r\n        setIsValid(false);\r\n        setError(null);\r\n      }\r\n    }\r\n  }, [code, hasAttempted]);\r\n  \r\n  // Handle code input change\r\n  const handleCodeChange = (e) => {\r\n    const newCode = e.target.value;\r\n    setCode(newCode);\r\n    \r\n    // Reset validation state\r\n    if (isValid || error) {\r\n      setIsValid(false);\r\n      setError(null);\r\n    }\r\n  };\r\n  \r\n  // Validate the beta code\r\n  const validateCode = async () => {\r\n    if (!code || !isValidFormat(code)) {\r\n      setError('Please enter a valid 6-character beta code');\r\n      setHasAttempted(true);\r\n      return;\r\n    }\r\n    \r\n    setIsValidating(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const valid = await inviteCodeService.validateCode(code);\r\n      setIsValid(valid);\r\n      setHasAttempted(true);\r\n      \r\n      if (!valid) {\r\n        setError('Invalid or expired beta code. Please check and try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error validating code:', err);\r\n      setError('An error occurred while validating your code. Please try again.');\r\n      setIsValid(false);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n  \r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (isValid) {\r\n      // If already validated, just submit\r\n      onSubmit(code);\r\n    } else {\r\n      // Validate and then submit if valid\r\n      await validateCode();\r\n      if (isValid) {\r\n        onSubmit(code);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box component=\"form\" onSubmit={handleSubmit} sx={{ width: '100%' }}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Enter your beta access code\r\n      </Typography>\r\n      \r\n      <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\r\n        Please enter the 6-character code you received in your invitation email.\r\n        This code grants you exclusive access to the TourGuideAI beta program.\r\n      </Typography>\r\n      \r\n      <TextField\r\n        fullWidth\r\n        label=\"Beta Access Code\"\r\n        variant=\"outlined\"\r\n        value={code}\r\n        onChange={handleCodeChange}\r\n        error={!!error}\r\n        helperText={error}\r\n        placeholder=\"Enter 6-character code\"\r\n        disabled={isValidating}\r\n        inputProps={{ \r\n          maxLength: 6,\r\n          style: { textTransform: 'uppercase' }\r\n        }}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              {isValid && <CheckCircleOutlineIcon color=\"success\" />}\r\n              {error && <ErrorOutlineIcon color=\"error\" />}\r\n              <Tooltip title=\"Your beta code is a 6-character alphanumeric code you received via email\">\r\n                <IconButton edge=\"end\">\r\n                  <HelpOutlineIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        sx={{ mb: 3, mt: 2 }}\r\n      />\r\n      \r\n      {isValid && (\r\n        <Alert severity=\"success\" sx={{ mb: 3 }}>\r\n          Beta code verified successfully!\r\n        </Alert>\r\n      )}\r\n      \r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n        <Link \r\n          href=\"#\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            // TODO: Implement request code functionality or redirect to support\r\n            window.open('/beta/request-code', '_blank');\r\n          }}\r\n          sx={{ fontSize: '0.875rem' }}\r\n        >\r\n          Don't have a code?\r\n        </Link>\r\n        \r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          disabled={isValidating || (!isValid && !code)}\r\n        >\r\n          {isValidating ? 'Validating...' : isValid ? 'Continue' : 'Validate Code'}\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CodeRedemptionForm; ","import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n  Avatar,\r\n  IconButton,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\n/**\r\n * User profile setup component for onboarding flow\r\n * Allows new beta users to configure their profile information\r\n * \r\n * @param {Object} props Component props\r\n * @param {Object} props.initialData Initial profile data\r\n * @param {Function} props.onSubmit Callback function when profile setup is submitted\r\n */\r\nconst UserProfileSetup = ({ initialData = {}, onSubmit }) => {\r\n  // Set default values from initial data\r\n  const [profile, setProfile] = useState({\r\n    displayName: initialData.displayName || '',\r\n    jobTitle: initialData.jobTitle || '',\r\n    company: initialData.company || '',\r\n    bio: initialData.bio || '',\r\n    profilePicture: initialData.profilePicture || null\r\n  });\r\n  \r\n  // Form validation state\r\n  const [errors, setErrors] = useState({});\r\n  \r\n  // Image preview state\r\n  const [imagePreview, setImagePreview] = useState(\r\n    initialData.profilePicture ? URL.createObjectURL(initialData.profilePicture) : null\r\n  );\r\n  \r\n  // Handle input changes\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    \r\n    setProfile(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    \r\n    // Clear error when field is edited\r\n    if (errors[name]) {\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [name]: null\r\n      }));\r\n    }\r\n  };\r\n  \r\n  // Handle image upload\r\n  const handleImageUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      // Validate file type and size\r\n      const validTypes = ['image/jpeg', 'image/png', 'image/gif'];\r\n      if (!validTypes.includes(file.type)) {\r\n        setErrors(prev => ({\r\n          ...prev,\r\n          profilePicture: 'Please upload a valid image file (JPEG, PNG, or GIF)'\r\n        }));\r\n        return;\r\n      }\r\n      \r\n      // Max size: 5MB\r\n      if (file.size > 5 * 1024 * 1024) {\r\n        setErrors(prev => ({\r\n          ...prev,\r\n          profilePicture: 'Image size should be less than 5MB'\r\n        }));\r\n        return;\r\n      }\r\n      \r\n      // Clear previous error\r\n      if (errors.profilePicture) {\r\n        setErrors(prev => ({\r\n          ...prev,\r\n          profilePicture: null\r\n        }));\r\n      }\r\n      \r\n      // Set file and generate preview\r\n      setProfile(prev => ({\r\n        ...prev,\r\n        profilePicture: file\r\n      }));\r\n      \r\n      // Create and set preview URL\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setImagePreview(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n  \r\n  // Handle removing profile picture\r\n  const handleRemoveImage = () => {\r\n    setProfile(prev => ({\r\n      ...prev,\r\n      profilePicture: null\r\n    }));\r\n    setImagePreview(null);\r\n    \r\n    // Clear any profile picture errors\r\n    if (errors.profilePicture) {\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        profilePicture: null\r\n      }));\r\n    }\r\n  };\r\n  \r\n  // Validate form\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    \r\n    // Display name is required\r\n    if (!profile.displayName.trim()) {\r\n      newErrors.displayName = 'Display name is required';\r\n    }\r\n    \r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n  \r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    onSubmit(profile);\r\n  };\r\n  \r\n  return (\r\n    <Box component=\"form\" onSubmit={handleSubmit} sx={{ width: '100%' }}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Set Up Your Profile\r\n      </Typography>\r\n      \r\n      <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\r\n        Customize your beta program profile. This information will help us\r\n        provide a personalized experience and better understand our users.\r\n      </Typography>\r\n      \r\n      <Grid container spacing={3} sx={{ mt: 1 }}>\r\n        {/* Profile picture */}\r\n        <Grid item xs={12} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n          <Box sx={{ position: 'relative', mb: 2 }}>\r\n            <Avatar\r\n              src={imagePreview}\r\n              sx={{ \r\n                width: 120, \r\n                height: 120,\r\n                border: theme => `2px solid ${theme.palette.primary.main}`\r\n              }}\r\n            />\r\n            {imagePreview && (\r\n              <IconButton\r\n                onClick={handleRemoveImage}\r\n                size=\"small\"\r\n                sx={{\r\n                  position: 'absolute',\r\n                  top: 0,\r\n                  right: 0,\r\n                  bgcolor: 'background.paper',\r\n                  '&:hover': {\r\n                    bgcolor: 'error.light',\r\n                    color: 'white'\r\n                  }\r\n                }}\r\n              >\r\n                <DeleteIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            )}\r\n          </Box>\r\n          \r\n          <Box>\r\n            <input\r\n              accept=\"image/*\"\r\n              id=\"profile-picture-upload\"\r\n              type=\"file\"\r\n              style={{ display: 'none' }}\r\n              onChange={handleImageUpload}\r\n            />\r\n            <label htmlFor=\"profile-picture-upload\">\r\n              <Button\r\n                variant=\"outlined\"\r\n                component=\"span\"\r\n                startIcon={<CloudUploadIcon />}\r\n                size=\"medium\"\r\n              >\r\n                {imagePreview ? 'Change Picture' : 'Upload Picture'}\r\n              </Button>\r\n            </label>\r\n          </Box>\r\n          \r\n          {errors.profilePicture && (\r\n            <Typography color=\"error\" variant=\"caption\" sx={{ mt: 1 }}>\r\n              {errors.profilePicture}\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n        \r\n        {/* Form fields */}\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Display Name\"\r\n            name=\"displayName\"\r\n            value={profile.displayName}\r\n            onChange={handleInputChange}\r\n            error={!!errors.displayName}\r\n            helperText={errors.displayName}\r\n            required\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Job Title\"\r\n            name=\"jobTitle\"\r\n            value={profile.jobTitle}\r\n            onChange={handleInputChange}\r\n            placeholder=\"Optional\"\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Company/Organization\"\r\n            name=\"company\"\r\n            value={profile.company}\r\n            onChange={handleInputChange}\r\n            placeholder=\"Optional\"\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Bio\"\r\n            name=\"bio\"\r\n            value={profile.bio}\r\n            onChange={handleInputChange}\r\n            multiline\r\n            rows={3}\r\n            placeholder=\"Tell us a bit about yourself and how you plan to use TourGuideAI (optional)\"\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Continue\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserProfileSetup; ","import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  FormGroup,\r\n  FormHelperText,\r\n  Switch,\r\n  Checkbox,\r\n  Radio,\r\n  RadioGroup,\r\n  Chip,\r\n  Autocomplete,\r\n  TextField,\r\n  Divider\r\n} from '@mui/material';\r\n\r\n/**\r\n * User preferences setup component for onboarding flow\r\n * Allows new beta users to set their preferences for the application\r\n * \r\n * @param {Object} props Component props\r\n * @param {Object} props.initialData Initial preferences data\r\n * @param {Function} props.onSubmit Callback function when preferences are submitted\r\n */\r\nconst PreferencesSetup = ({ initialData = {}, onSubmit }) => {\r\n  // Available interest topics\r\n  const availableTopics = [\r\n    'Cultural Tours', 'Nature Exploration', 'Adventure Travel', \r\n    'City Sightseeing', 'Food Tourism', 'Historical Sites',\r\n    'Beach Holidays', 'Mountain Hikes', 'Road Trips',\r\n    'Museum Tours', 'Architecture', 'Wildlife Viewing',\r\n    'Photography Spots', 'Shopping Tours', 'Local Festivals',\r\n    'Nightlife Experience', 'Family Activities', 'Luxury Travel'\r\n  ];\r\n  \r\n  // Tour preferences\r\n  const tourPreferenceOptions = [\r\n    { value: 'walking', label: 'Walking Tours' },\r\n    { value: 'driving', label: 'Driving Routes' },\r\n    { value: 'public_transit', label: 'Public Transit' },\r\n    { value: 'cycling', label: 'Cycling Routes' },\r\n    { value: 'wheelchair', label: 'Wheelchair Accessible' },\r\n    { value: 'group', label: 'Group Activities' },\r\n    { value: 'solo', label: 'Solo Activities' },\r\n    { value: 'family', label: 'Family-friendly' }\r\n  ];\r\n  \r\n  // Set default values from initial data\r\n  const [preferences, setPreferences] = useState({\r\n    notificationEmail: initialData.notificationEmail !== undefined ? initialData.notificationEmail : true,\r\n    dataSharingLevel: initialData.dataSharingLevel || 'minimal',\r\n    tourPreferences: initialData.tourPreferences || [],\r\n    interestTopics: initialData.interestTopics || []\r\n  });\r\n  \r\n  // Handle email notification toggle\r\n  const handleNotificationToggle = (e) => {\r\n    setPreferences(prev => ({\r\n      ...prev,\r\n      notificationEmail: e.target.checked\r\n    }));\r\n  };\r\n  \r\n  // Handle data sharing level change\r\n  const handleDataSharingChange = (e) => {\r\n    setPreferences(prev => ({\r\n      ...prev,\r\n      dataSharingLevel: e.target.value\r\n    }));\r\n  };\r\n  \r\n  // Handle tour preference change\r\n  const handleTourPreferenceChange = (e) => {\r\n    const { checked, value } = e.target;\r\n    \r\n    setPreferences(prev => {\r\n      const updatedPreferences = checked\r\n        ? [...prev.tourPreferences, value]\r\n        : prev.tourPreferences.filter(pref => pref !== value);\r\n        \r\n      return {\r\n        ...prev,\r\n        tourPreferences: updatedPreferences\r\n      };\r\n    });\r\n  };\r\n  \r\n  // Handle interest topics change\r\n  const handleInterestTopicsChange = (event, newValues) => {\r\n    setPreferences(prev => ({\r\n      ...prev,\r\n      interestTopics: newValues\r\n    }));\r\n  };\r\n  \r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit(preferences);\r\n  };\r\n  \r\n  // Get data sharing level description\r\n  const getDataSharingDescription = (level) => {\r\n    switch (level) {\r\n      case 'minimal':\r\n        return 'We collect only essential data required for the application to function';\r\n      case 'standard':\r\n        return 'We collect usage data to improve the application and your experience';\r\n      case 'comprehensive':\r\n        return 'We collect detailed analytics data to optimize all aspects of the application';\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Box component=\"form\" onSubmit={handleSubmit} sx={{ width: '100%' }}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Set Your Preferences\r\n      </Typography>\r\n      \r\n      <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\r\n        Configure your preferences to personalize your beta experience.\r\n        You can update these settings at any time from your profile.\r\n      </Typography>\r\n      \r\n      <Grid container spacing={3} sx={{ mt: 1 }}>\r\n        {/* Notification preferences */}\r\n        <Grid item xs={12}>\r\n          <FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">Notifications</FormLabel>\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={preferences.notificationEmail}\r\n                    onChange={handleNotificationToggle}\r\n                    name=\"notificationEmail\"\r\n                  />\r\n                }\r\n                label=\"Receive email notifications about beta updates and new features\"\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </Grid>\r\n        \r\n        {/* Data sharing preferences */}\r\n        <Grid item xs={12}>\r\n          <Divider sx={{ my: 1 }} />\r\n          <FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">Data Sharing Level</FormLabel>\r\n            <RadioGroup\r\n              name=\"dataSharingLevel\"\r\n              value={preferences.dataSharingLevel}\r\n              onChange={handleDataSharingChange}\r\n            >\r\n              <FormControlLabel value=\"minimal\" control={<Radio />} label=\"Minimal\" />\r\n              <FormControlLabel value=\"standard\" control={<Radio />} label=\"Standard\" />\r\n              <FormControlLabel value=\"comprehensive\" control={<Radio />} label=\"Comprehensive\" />\r\n            </RadioGroup>\r\n            <FormHelperText>\r\n              {getDataSharingDescription(preferences.dataSharingLevel)}\r\n            </FormHelperText>\r\n          </FormControl>\r\n        </Grid>\r\n        \r\n        {/* Tour preferences */}\r\n        <Grid item xs={12}>\r\n          <Divider sx={{ my: 1 }} />\r\n          <FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">Tour Preferences</FormLabel>\r\n            <FormHelperText sx={{ mt: 0, mb: 1 }}>\r\n              Select your preferred types of tours (select all that apply)\r\n            </FormHelperText>\r\n            <FormGroup row>\r\n              {tourPreferenceOptions.map(option => (\r\n                <FormControlLabel\r\n                  key={option.value}\r\n                  control={\r\n                    <Checkbox\r\n                      checked={preferences.tourPreferences.includes(option.value)}\r\n                      onChange={handleTourPreferenceChange}\r\n                      value={option.value}\r\n                    />\r\n                  }\r\n                  label={option.label}\r\n                  sx={{ width: { xs: '100%', sm: '50%', md: '33%' } }}\r\n                />\r\n              ))}\r\n            </FormGroup>\r\n          </FormControl>\r\n        </Grid>\r\n        \r\n        {/* Interest topics */}\r\n        <Grid item xs={12}>\r\n          <Divider sx={{ my: 1 }} />\r\n          <FormControl fullWidth component=\"fieldset\" sx={{ mt: 2 }}>\r\n            <FormLabel component=\"legend\">Interest Topics</FormLabel>\r\n            <FormHelperText sx={{ mt: 0, mb: 1 }}>\r\n              Select topics you're interested in exploring\r\n            </FormHelperText>\r\n            <Autocomplete\r\n              multiple\r\n              id=\"interest-topics\"\r\n              options={availableTopics}\r\n              value={preferences.interestTopics}\r\n              onChange={handleInterestTopicsChange}\r\n              renderTags={(value, getTagProps) =>\r\n                value.map((option, index) => (\r\n                  <Chip\r\n                    variant=\"outlined\"\r\n                    label={option}\r\n                    {...getTagProps({ index })}\r\n                    key={option}\r\n                  />\r\n                ))\r\n              }\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  variant=\"outlined\"\r\n                  placeholder=\"Select topics...\"\r\n                />\r\n              )}\r\n            />\r\n          </FormControl>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Continue\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PreferencesSetup; ","import React from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Paper,\r\n  Avatar,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Divider\r\n} from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport EmojiEventsIcon from '@mui/icons-material/EmojiEvents';\r\nimport FeedbackIcon from '@mui/icons-material/Feedback';\r\nimport ExploreIcon from '@mui/icons-material/Explore';\r\nimport MapIcon from '@mui/icons-material/Map';\r\nimport ForumIcon from '@mui/icons-material/Forum';\r\n\r\n// Styled components\r\nconst WelcomeCard = styled(Card)(({ theme }) => ({\r\n  textAlign: 'center',\r\n  padding: theme.spacing(3),\r\n  marginBottom: theme.spacing(4),\r\n  background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.primary.light} 90%)`,\r\n  color: theme.palette.primary.contrastText\r\n}));\r\n\r\nconst BetaFeature = styled(Paper)(({ theme }) => ({\r\n  padding: theme.spacing(2),\r\n  height: '100%',\r\n  transition: 'transform 0.2s',\r\n  '&:hover': {\r\n    transform: 'translateY(-4px)',\r\n    boxShadow: theme.shadows[4]\r\n  }\r\n}));\r\n\r\n/**\r\n * Welcome screen for the final step of onboarding flow\r\n * Shows a summary of the profile and next steps for beta users\r\n * \r\n * @param {Object} props Component props\r\n * @param {Object} props.profile User profile data\r\n * @param {Function} props.onFinish Callback function when user completes onboarding\r\n */\r\nconst WelcomeScreen = ({ profile, onFinish }) => {\r\n  // Beta program features to highlight\r\n  const betaFeatures = [\r\n    {\r\n      icon: <ExploreIcon color=\"primary\" fontSize=\"large\" />,\r\n      title: 'Tour Planning',\r\n      description: 'Generate personalized travel itineraries with AI-powered route optimization'\r\n    },\r\n    {\r\n      icon: <MapIcon color=\"primary\" fontSize=\"large\" />,\r\n      title: 'Interactive Maps',\r\n      description: 'Explore your routes with detailed maps and points of interest'\r\n    },\r\n    {\r\n      icon: <ForumIcon color=\"primary\" fontSize=\"large\" />,\r\n      title: 'Beta Community',\r\n      description: 'Join discussions and share feedback with other beta testers'\r\n    }\r\n  ];\r\n  \r\n  // Next steps for beta users\r\n  const nextSteps = [\r\n    'Explore the dashboard to see available features',\r\n    'Create your first travel plan and provide feedback',\r\n    'Join the beta community forum for discussions',\r\n    'Check your email for upcoming feature releases',\r\n    'Share your experience with us through the feedback widget'\r\n  ];\r\n  \r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <WelcomeCard>\r\n        <EmojiEventsIcon sx={{ fontSize: 60, mb: 2 }} />\r\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n          Welcome to the TourGuideAI Beta Program!\r\n        </Typography>\r\n        <Typography variant=\"body1\">\r\n          Congratulations, {profile.displayName || 'Beta Tester'}! Your setup is complete,\r\n          and you're ready to start exploring TourGuideAI.\r\n        </Typography>\r\n      </WelcomeCard>\r\n      \r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>\r\n        <Avatar\r\n          src={profile.profilePicture ? URL.createObjectURL(profile.profilePicture) : undefined}\r\n          sx={{ width: 64, height: 64, mr: 2 }}\r\n        />\r\n        <Box>\r\n          <Typography variant=\"h6\">{profile.displayName || 'Beta Tester'}</Typography>\r\n          {profile.jobTitle && profile.company && (\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              {profile.jobTitle} at {profile.company}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      \r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Beta Program Features\r\n      </Typography>\r\n      \r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        {betaFeatures.map((feature, index) => (\r\n          <Grid item xs={12} sm={4} key={index}>\r\n            <BetaFeature elevation={2}>\r\n              <Box sx={{ textAlign: 'center', mb: 2 }}>\r\n                {feature.icon}\r\n              </Box>\r\n              <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n                {feature.title}\r\n              </Typography>\r\n              <Typography variant=\"body2\" align=\"center\" color=\"textSecondary\">\r\n                {feature.description}\r\n              </Typography>\r\n            </BetaFeature>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n      \r\n      <Divider sx={{ mb: 4 }} />\r\n      \r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Next Steps\r\n      </Typography>\r\n      \r\n      <List>\r\n        {nextSteps.map((step, index) => (\r\n          <ListItem key={index} sx={{ py: 1 }}>\r\n            <ListItemIcon>\r\n              <CheckCircleIcon color=\"primary\" />\r\n            </ListItemIcon>\r\n            <ListItemText primary={step} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      \r\n      <Box sx={{ \r\n        display: 'flex', \r\n        justifyContent: 'space-between', \r\n        alignItems: 'center',\r\n        mt: 4,\r\n        p: 2,\r\n        bgcolor: 'background.paper',\r\n        borderRadius: 1\r\n      }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n          <FeedbackIcon sx={{ mr: 2, color: 'primary.main' }} />\r\n          <Typography>\r\n            Your feedback is valuable to us! Use the feedback button at any time.\r\n          </Typography>\r\n        </Box>\r\n        <Button \r\n          variant=\"contained\" \r\n          color=\"primary\"\r\n          onClick={onFinish}\r\n          size=\"large\"\r\n        >\r\n          Start Exploring\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default WelcomeScreen; ","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Button,\r\n  Typography,\r\n  Paper,\r\n  Container,\r\n  CircularProgress,\r\n  Alert,\r\n  Divider\r\n} from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport authService from '../services/AuthService';\r\nimport inviteCodeService from '../services/InviteCodeService';\r\nimport CodeRedemptionForm from './onboarding/CodeRedemptionForm';\r\nimport UserProfileSetup from './onboarding/UserProfileSetup';\r\nimport PreferencesSetup from './onboarding/PreferencesSetup';\r\nimport WelcomeScreen from './onboarding/WelcomeScreen';\r\n\r\n// Styled components\r\nconst OnboardingPaper = styled(Paper)(({ theme }) => ({\r\n  padding: theme.spacing(4),\r\n  marginTop: theme.spacing(2),\r\n  marginBottom: theme.spacing(2),\r\n  boxShadow: theme.shadows[3],\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n}));\r\n\r\nconst StepContainer = styled(Box)(({ theme }) => ({\r\n  marginTop: theme.spacing(3),\r\n  marginBottom: theme.spacing(3),\r\n  minHeight: '300px',\r\n}));\r\n\r\nconst ButtonContainer = styled(Box)(({ theme }) => ({\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  marginTop: theme.spacing(4),\r\n}));\r\n\r\n/**\r\n * Onboarding flow for new beta users\r\n * Guides users through the complete setup process including code redemption\r\n * \r\n * @param {Object} props Component props\r\n * @param {Function} props.onComplete Callback function when onboarding is complete\r\n * @param {String} props.initialCode Initial beta code (if provided)\r\n */\r\nconst OnboardingFlow = ({ onComplete, initialCode = '' }) => {\r\n  // Onboarding steps\r\n  const steps = [\r\n    'Redeem Beta Code',\r\n    'Setup Your Profile',\r\n    'Set Preferences',\r\n    'Welcome to Beta'\r\n  ];\r\n\r\n  // State\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(null);\r\n  const [betaCode, setBetaCode] = useState(initialCode);\r\n  const [userProfile, setUserProfile] = useState({\r\n    displayName: '',\r\n    jobTitle: '',\r\n    company: '',\r\n    profilePicture: null,\r\n    bio: ''\r\n  });\r\n  const [preferences, setPreferences] = useState({\r\n    notificationEmail: true,\r\n    dataSharingLevel: 'minimal',\r\n    tourPreferences: [],\r\n    interestTopics: []\r\n  });\r\n\r\n  // Initialize with code if provided\r\n  useEffect(() => {\r\n    if (initialCode) {\r\n      setBetaCode(initialCode);\r\n      // If code is provided and valid, we might want to skip to next step\r\n      validateAndProceed(initialCode);\r\n    }\r\n  }, [initialCode]);\r\n\r\n  // Validate code and move to next step if valid\r\n  const validateAndProceed = async (code) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const isValid = await inviteCodeService.validateCode(code);\r\n      \r\n      if (isValid) {\r\n        setSuccess('Beta code accepted!');\r\n        setTimeout(() => {\r\n          setActiveStep(1);\r\n          setSuccess(null);\r\n        }, 1000);\r\n      } else {\r\n        setError('Invalid or expired beta code. Please check and try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error validating beta code:', err);\r\n      setError('Error validating beta code. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle code redemption\r\n  const handleCodeRedemption = (code) => {\r\n    setBetaCode(code);\r\n    validateAndProceed(code);\r\n  };\r\n\r\n  // Handle profile setup\r\n  const handleProfileSetup = (profileData) => {\r\n    setUserProfile(profileData);\r\n    setActiveStep(2);\r\n  };\r\n\r\n  // Handle preferences setup\r\n  const handlePreferencesSetup = (preferencesData) => {\r\n    setPreferences(preferencesData);\r\n    setActiveStep(3);\r\n  };\r\n\r\n  // Handle completion of onboarding\r\n  const handleFinishOnboarding = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Save all data to user profile\r\n      await authService.updateUserProfile({\r\n        ...userProfile,\r\n        preferences,\r\n        onboardingCompleted: true\r\n      });\r\n      \r\n      setSuccess('Onboarding completed successfully!');\r\n      \r\n      // Notify parent component\r\n      setTimeout(() => {\r\n        if (onComplete) {\r\n          onComplete({\r\n            betaCode,\r\n            profile: userProfile,\r\n            preferences\r\n          });\r\n        }\r\n      }, 1500);\r\n    } catch (err) {\r\n      console.error('Error completing onboarding:', err);\r\n      setError('Error saving your preferences. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle next step\r\n  const handleNext = () => {\r\n    setActiveStep(prevStep => prevStep + 1);\r\n  };\r\n\r\n  // Handle back step\r\n  const handleBack = () => {\r\n    setActiveStep(prevStep => prevStep - 1);\r\n  };\r\n\r\n  // Render current step content\r\n  const getStepContent = (step) => {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <CodeRedemptionForm \r\n            initialCode={betaCode} \r\n            onSubmit={handleCodeRedemption} \r\n          />\r\n        );\r\n      case 1:\r\n        return (\r\n          <UserProfileSetup\r\n            initialData={userProfile}\r\n            onSubmit={handleProfileSetup}\r\n          />\r\n        );\r\n      case 2:\r\n        return (\r\n          <PreferencesSetup\r\n            initialData={preferences}\r\n            onSubmit={handlePreferencesSetup}\r\n          />\r\n        );\r\n      case 3:\r\n        return (\r\n          <WelcomeScreen\r\n            profile={userProfile}\r\n            onFinish={handleFinishOnboarding}\r\n          />\r\n        );\r\n      default:\r\n        return 'Unknown step';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <OnboardingPaper>\r\n        <Typography variant=\"h4\" component=\"h1\" align=\"center\" gutterBottom>\r\n          Beta Program Onboarding\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body1\" color=\"textSecondary\" align=\"center\" paragraph>\r\n          Complete the following steps to set up your beta experience\r\n        </Typography>\r\n        \r\n        <Divider sx={{ my: 2 }} />\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ my: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {success && (\r\n          <Alert severity=\"success\" sx={{ my: 2 }}>\r\n            {success}\r\n          </Alert>\r\n        )}\r\n        \r\n        <Stepper activeStep={activeStep} sx={{ mt: 3, mb: 4 }}>\r\n          {steps.map((label) => (\r\n            <Step key={label}>\r\n              <StepLabel>{label}</StepLabel>\r\n            </Step>\r\n          ))}\r\n        </Stepper>\r\n        \r\n        <StepContainer>\r\n          {loading ? (\r\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100%\">\r\n              <CircularProgress />\r\n            </Box>\r\n          ) : (\r\n            getStepContent(activeStep)\r\n          )}\r\n        </StepContainer>\r\n        \r\n        <ButtonContainer>\r\n          <Button\r\n            disabled={activeStep === 0 || loading}\r\n            onClick={handleBack}\r\n            variant=\"outlined\"\r\n          >\r\n            Back\r\n          </Button>\r\n          \r\n          {activeStep < steps.length - 1 ? (\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleNext}\r\n              disabled={loading || (activeStep === 0 && !betaCode)}\r\n            >\r\n              Next\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleFinishOnboarding}\r\n              disabled={loading}\r\n            >\r\n              Finish\r\n            </Button>\r\n          )}\r\n        </ButtonContainer>\r\n      </OnboardingPaper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default OnboardingFlow; ","import { useState, useEffect } from 'react';\r\nimport permissionsService from '../services/PermissionsService';\r\n\r\n/**\r\n * Custom hook for accessing current user permissions and roles\r\n * @returns {Object} Object containing permissions and roles data and utility functions\r\n */\r\nconst useCurrentPermissions = () => {\r\n  const [permissions, setPermissions] = useState([]);\r\n  const [roles, setRoles] = useState([]);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [isModerator, setIsModerator] = useState(false);\r\n  const [isBetaTester, setIsBetaTester] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchPermissions = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        \r\n        // Initialize permissions if needed\r\n        await permissionsService.initialize();\r\n        \r\n        // Get all permissions and roles\r\n        const allPermissions = permissionsService.getAllPermissions();\r\n        const allRoles = permissionsService.getAllRoles();\r\n        \r\n        setPermissions(allPermissions);\r\n        setRoles(allRoles);\r\n        \r\n        // Check specific roles\r\n        setIsAdmin(await permissionsService.isAdmin());\r\n        setIsModerator(await permissionsService.isModerator());\r\n        setIsBetaTester(await permissionsService.isBetaTester());\r\n      } catch (error) {\r\n        console.error('Error fetching permissions:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPermissions();\r\n  }, []);\r\n\r\n  /**\r\n   * Check if user has a specific permission\r\n   * @param {string} permission Permission to check\r\n   * @returns {boolean} Whether user has the permission\r\n   */\r\n  const hasPermission = async (permission) => {\r\n    return await permissionsService.hasPermission(permission);\r\n  };\r\n\r\n  /**\r\n   * Check if user has a specific role\r\n   * @param {string} role Role to check\r\n   * @returns {boolean} Whether user has the role\r\n   */\r\n  const hasRole = async (role) => {\r\n    return await permissionsService.hasRole(role);\r\n  };\r\n\r\n  /**\r\n   * Check if user has any of the specified permissions\r\n   * @param {string[]} permissionList Permissions to check\r\n   * @returns {boolean} Whether user has any of the permissions\r\n   */\r\n  const hasAnyPermission = async (permissionList) => {\r\n    return await permissionsService.hasAnyPermission(permissionList);\r\n  };\r\n\r\n  /**\r\n   * Check if user has all of the specified permissions\r\n   * @param {string[]} permissionList Permissions to check\r\n   * @returns {boolean} Whether user has all of the permissions\r\n   */\r\n  const hasAllPermissions = async (permissionList) => {\r\n    return await permissionsService.hasAllPermissions(permissionList);\r\n  };\r\n\r\n  return {\r\n    permissions,\r\n    roles,\r\n    isAdmin,\r\n    isModerator,\r\n    isBetaTester,\r\n    isLoading,\r\n    hasPermission,\r\n    hasRole,\r\n    hasAnyPermission,\r\n    hasAllPermissions\r\n  };\r\n};\r\n\r\nexport default useCurrentPermissions; ","import React, { useEffect, useState } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Paper,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Chip,\r\n  Divider,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport SecurityIcon from '@mui/icons-material/Security';\r\nimport LockIcon from '@mui/icons-material/Lock';\r\nimport VerifiedUserIcon from '@mui/icons-material/VerifiedUser';\r\nimport GppBadIcon from '@mui/icons-material/GppBad';\r\nimport permissionsService from '../../services/PermissionsService';\r\nimport { useCurrentPermissions } from '../../hooks';\r\n\r\n/**\r\n * UserPermissionsCard Component\r\n * \r\n * Displays the current user's roles and permissions\r\n */\r\nconst UserPermissionsCard = () => {\r\n  const { \r\n    permissions, \r\n    roles, \r\n    isAdmin, \r\n    isModerator, \r\n    isBetaTester,\r\n    isLoading \r\n  } = useCurrentPermissions();\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" p={3}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Group permissions by category\r\n  const groupedPermissions = {};\r\n  permissions.forEach(permission => {\r\n    const category = permission.split(':')[0];\r\n    if (!groupedPermissions[category]) {\r\n      groupedPermissions[category] = [];\r\n    }\r\n    groupedPermissions[category].push(permission);\r\n  });\r\n\r\n  return (\r\n    <Paper elevation={2} sx={{ p: 2 }}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        <SecurityIcon sx={{ mr: 1, verticalAlign: 'text-bottom' }} />\r\n        Security Roles & Permissions\r\n      </Typography>\r\n      \r\n      <Box mt={2}>\r\n        <Typography variant=\"subtitle1\">\r\n          Your Roles\r\n        </Typography>\r\n        <Box display=\"flex\" gap={1} mt={1} mb={2}>\r\n          {isAdmin && (\r\n            <Chip \r\n              icon={<VerifiedUserIcon />} \r\n              label=\"Admin\" \r\n              color=\"error\" \r\n              variant=\"outlined\" \r\n            />\r\n          )}\r\n          {isModerator && (\r\n            <Chip \r\n              icon={<VerifiedUserIcon />} \r\n              label=\"Moderator\" \r\n              color=\"warning\" \r\n              variant=\"outlined\" \r\n            />\r\n          )}\r\n          {isBetaTester && (\r\n            <Chip \r\n              icon={<VerifiedUserIcon />} \r\n              label=\"Beta Tester\" \r\n              color=\"primary\" \r\n              variant=\"outlined\" \r\n            />\r\n          )}\r\n          {!isAdmin && !isModerator && !isBetaTester && (\r\n            <Chip \r\n              icon={<GppBadIcon />} \r\n              label=\"No Roles\" \r\n              color=\"default\" \r\n              variant=\"outlined\" \r\n            />\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      \r\n      <Divider sx={{ my: 2 }} />\r\n      \r\n      <Typography variant=\"subtitle1\" gutterBottom>\r\n        Your Permissions\r\n      </Typography>\r\n\r\n      {Object.keys(groupedPermissions).length === 0 ? (\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          You don't have any specific permissions assigned.\r\n        </Typography>\r\n      ) : (\r\n        <List dense sx={{ mb: 1 }}>\r\n          {Object.entries(groupedPermissions).map(([category, perms]) => (\r\n            <Box key={category} mb={2}>\r\n              <Typography \r\n                variant=\"subtitle2\" \r\n                color=\"primary\" \r\n                sx={{ textTransform: 'capitalize' }}\r\n              >\r\n                {category}\r\n              </Typography>\r\n              {perms.map(permission => (\r\n                <ListItem key={permission} dense>\r\n                  <ListItemIcon sx={{ minWidth: 30 }}>\r\n                    <LockIcon fontSize=\"small\" color=\"action\" />\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary={permission.split(':')[1]} \r\n                    primaryTypographyProps={{ \r\n                      variant: 'body2',\r\n                      sx: { textTransform: 'capitalize' }\r\n                    }}\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </Box>\r\n          ))}\r\n        </List>\r\n      )}\r\n      \r\n      <Typography variant=\"caption\" color=\"text.secondary\">\r\n        These permissions determine what actions you can perform within the beta program.\r\n      </Typography>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default UserPermissionsCard; ","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Paper,\r\n  Grid,\r\n  TextField,\r\n  MenuItem,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Divider,\r\n  Chip,\r\n  Avatar,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Tabs,\r\n  Tab,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Tooltip,\r\n  CircularProgress,\r\n  Badge,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  AddCircleOutline as AddIcon,\r\n  ThumbUp as ThumbUpIcon,\r\n  Comment as CommentIcon,\r\n  MoreVert as MoreVertIcon,\r\n  CheckCircleOutline as ImplementedIcon,\r\n  Schedule as PlannedIcon,\r\n  Close as RejectedIcon,\r\n  KeyboardArrowUp as ArrowUpIcon,\r\n  KeyboardArrowDown as ArrowDownIcon,\r\n  Label as LabelIcon,\r\n  FilterList as FilterIcon\r\n} from '@mui/icons-material';\r\n\r\n/**\r\n * Feature Request Board component\r\n * Allows beta users to submit, vote on, and track feature requests\r\n * \r\n * @param {Object} props Component props\r\n * @param {Object} props.featureService Service for managing feature requests\r\n */\r\nconst FeatureRequestBoard = ({ featureService }) => {\r\n  // Available categories\r\n  const CATEGORIES = [\r\n    'UI/UX', 'Mobile App', 'Performance', 'Navigation',\r\n    'Tours', 'Maps', 'Integrations', 'Accessibility',\r\n    'Offline Mode', 'Accounts', 'Social Features', 'Other'\r\n  ];\r\n  \r\n  // Feature statuses\r\n  const STATUSES = {\r\n    REQUESTED: 'requested',\r\n    UNDER_REVIEW: 'under_review',\r\n    PLANNED: 'planned',\r\n    IN_PROGRESS: 'in_progress',\r\n    IMPLEMENTED: 'implemented',\r\n    REJECTED: 'rejected'\r\n  };\r\n  \r\n  // State\r\n  const [features, setFeatures] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [showAddDialog, setShowAddDialog] = useState(false);\r\n  const [sortBy, setSortBy] = useState('votes');\r\n  const [filters, setFilters] = useState({\r\n    category: 'all',\r\n    status: 'all'\r\n  });\r\n  \r\n  // New feature request state\r\n  const [newFeature, setNewFeature] = useState({\r\n    title: '',\r\n    description: '',\r\n    category: '',\r\n    tags: []\r\n  });\r\n  \r\n  // Form errors\r\n  const [formErrors, setFormErrors] = useState({});\r\n  \r\n  // Load features on component mount\r\n  useEffect(() => {\r\n    loadFeatures();\r\n  }, []);\r\n  \r\n  // Load feature requests\r\n  const loadFeatures = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // In a real implementation, this would call the service\r\n      // const data = await featureService.getFeatures();\r\n      \r\n      // Mock data for demo\r\n      const mockFeatures = [\r\n        {\r\n          id: 'feat-1',\r\n          title: 'Add dark mode support',\r\n          description: 'Implement a dark mode theme option to reduce eye strain during nighttime use.',\r\n          category: 'UI/UX',\r\n          status: STATUSES.PLANNED,\r\n          votes: 36,\r\n          comments: 12,\r\n          userVoted: true,\r\n          tags: ['Dark Mode', 'Usability'],\r\n          createdBy: {\r\n            id: 'user-1',\r\n            name: 'Alex Johnson',\r\n            avatar: null\r\n          },\r\n          createdAt: '2023-03-15T08:22:17Z',\r\n          updatedAt: '2023-03-22T16:33:41Z'\r\n        },\r\n        {\r\n          id: 'feat-2',\r\n          title: 'Offline maps for saved routes',\r\n          description: 'Allow users to download maps for their saved routes to use when no internet connection is available.',\r\n          category: 'Offline Mode',\r\n          status: STATUSES.IN_PROGRESS,\r\n          votes: 58,\r\n          comments: 23,\r\n          userVoted: false,\r\n          tags: ['Offline', 'Maps'],\r\n          createdBy: {\r\n            id: 'user-2',\r\n            name: 'Maria Garcia',\r\n            avatar: 'https://i.pravatar.cc/150?u=user-2'\r\n          },\r\n          createdAt: '2023-03-10T11:42:35Z',\r\n          updatedAt: '2023-03-25T09:17:22Z'\r\n        },\r\n        {\r\n          id: 'feat-3',\r\n          title: 'Export routes to GPX/KML formats',\r\n          description: 'Add the ability to export created routes in standard GPX and KML formats for use in other applications.',\r\n          category: 'Integrations',\r\n          status: STATUSES.REQUESTED,\r\n          votes: 24,\r\n          comments: 8,\r\n          userVoted: true,\r\n          tags: ['Export', 'Integration'],\r\n          createdBy: {\r\n            id: 'user-3',\r\n            name: 'David Wong',\r\n            avatar: 'https://i.pravatar.cc/150?u=user-3'\r\n          },\r\n          createdAt: '2023-03-20T14:52:09Z',\r\n          updatedAt: '2023-03-20T14:52:09Z'\r\n        },\r\n        {\r\n          id: 'feat-4',\r\n          title: 'Improve route optimization algorithm',\r\n          description: 'Enhance the current route optimization to consider factors like traffic patterns, opening hours, and weather.',\r\n          category: 'Performance',\r\n          status: STATUSES.UNDER_REVIEW,\r\n          votes: 42,\r\n          comments: 16,\r\n          userVoted: false,\r\n          tags: ['Algorithm', 'Optimization'],\r\n          createdBy: {\r\n            id: 'user-4',\r\n            name: 'Samantha Lee',\r\n            avatar: 'https://i.pravatar.cc/150?u=user-4'\r\n          },\r\n          createdAt: '2023-03-18T09:12:47Z',\r\n          updatedAt: '2023-03-24T11:32:18Z'\r\n        },\r\n        {\r\n          id: 'feat-5',\r\n          title: 'Social sharing of created routes',\r\n          description: 'Allow users to share their created routes on social media platforms directly from the app.',\r\n          category: 'Social Features',\r\n          status: STATUSES.IMPLEMENTED,\r\n          votes: 31,\r\n          comments: 7,\r\n          userVoted: true,\r\n          tags: ['Social', 'Sharing'],\r\n          createdBy: {\r\n            id: 'user-5',\r\n            name: 'James Wilson',\r\n            avatar: null\r\n          },\r\n          createdAt: '2023-03-05T16:41:23Z',\r\n          updatedAt: '2023-03-27T13:45:56Z'\r\n        }\r\n      ];\r\n      \r\n      setFeatures(mockFeatures);\r\n    } catch (err) {\r\n      console.error('Error loading features:', err);\r\n      setError('Failed to load feature requests. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Handle tab change\r\n  const handleTabChange = (event, newValue) => {\r\n    setActiveTab(newValue);\r\n  };\r\n  \r\n  // Handle opening add dialog\r\n  const handleOpenAddDialog = () => {\r\n    setNewFeature({\r\n      title: '',\r\n      description: '',\r\n      category: '',\r\n      tags: []\r\n    });\r\n    setFormErrors({});\r\n    setShowAddDialog(true);\r\n  };\r\n  \r\n  // Handle closing add dialog\r\n  const handleCloseAddDialog = () => {\r\n    setShowAddDialog(false);\r\n  };\r\n  \r\n  // Handle new feature input change\r\n  const handleFeatureInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNewFeature(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    \r\n    // Clear error when field changes\r\n    if (formErrors[name]) {\r\n      setFormErrors(prev => ({\r\n        ...prev,\r\n        [name]: null\r\n      }));\r\n    }\r\n  };\r\n  \r\n  // Handle tag input (comma separated)\r\n  const handleTagInput = (e) => {\r\n    const value = e.target.value;\r\n    if (value.endsWith(',')) {\r\n      const tag = value.slice(0, -1).trim();\r\n      if (tag && !newFeature.tags.includes(tag)) {\r\n        setNewFeature(prev => ({\r\n          ...prev,\r\n          tags: [...prev.tags, tag]\r\n        }));\r\n      }\r\n      e.target.value = '';\r\n    }\r\n  };\r\n  \r\n  // Remove a tag\r\n  const handleRemoveTag = (tag) => {\r\n    setNewFeature(prev => ({\r\n      ...prev,\r\n      tags: prev.tags.filter(t => t !== tag)\r\n    }));\r\n  };\r\n  \r\n  // Validate form\r\n  const validateForm = () => {\r\n    const errors = {};\r\n    \r\n    if (!newFeature.title.trim()) {\r\n      errors.title = 'Title is required';\r\n    }\r\n    \r\n    if (!newFeature.description.trim()) {\r\n      errors.description = 'Description is required';\r\n    }\r\n    \r\n    if (!newFeature.category) {\r\n      errors.category = 'Category is required';\r\n    }\r\n    \r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n  \r\n  // Submit new feature request\r\n  const handleSubmitFeature = async () => {\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setLoading(true);\r\n      \r\n      // In a real implementation, this would call the service\r\n      // const result = await featureService.createFeature(newFeature);\r\n      \r\n      // Mock implementation\r\n      const mockNewFeature = {\r\n        id: `feat-${Date.now()}`,\r\n        ...newFeature,\r\n        status: STATUSES.REQUESTED,\r\n        votes: 1,\r\n        comments: 0,\r\n        userVoted: true,\r\n        createdBy: {\r\n          id: 'current-user',\r\n          name: 'Current User',\r\n          avatar: null\r\n        },\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      \r\n      setFeatures(prev => [mockNewFeature, ...prev]);\r\n      setShowAddDialog(false);\r\n    } catch (err) {\r\n      console.error('Error creating feature request:', err);\r\n      setError('Failed to create feature request. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Vote for a feature\r\n  const handleVote = async (featureId) => {\r\n    try {\r\n      // In a real implementation, this would call the service\r\n      // await featureService.voteFeature(featureId);\r\n      \r\n      // Update local state\r\n      setFeatures(prev => \r\n        prev.map(feature => {\r\n          if (feature.id === featureId) {\r\n            return {\r\n              ...feature,\r\n              votes: feature.userVoted ? feature.votes - 1 : feature.votes + 1,\r\n              userVoted: !feature.userVoted\r\n            };\r\n          }\r\n          return feature;\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.error('Error voting for feature:', err);\r\n      // Show error notification\r\n    }\r\n  };\r\n  \r\n  // Handle sort change\r\n  const handleSortChange = (event) => {\r\n    setSortBy(event.target.value);\r\n  };\r\n  \r\n  // Handle filter change\r\n  const handleFilterChange = (type, value) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      [type]: value\r\n    }));\r\n  };\r\n  \r\n  // Format date\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString(undefined, {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n  \r\n  // Get status icon\r\n  const getStatusIcon = (status) => {\r\n    switch (status) {\r\n      case STATUSES.IMPLEMENTED:\r\n        return <ImplementedIcon color=\"success\" />;\r\n      case STATUSES.PLANNED:\r\n      case STATUSES.IN_PROGRESS:\r\n        return <PlannedIcon color=\"primary\" />;\r\n      case STATUSES.REJECTED:\r\n        return <RejectedIcon color=\"error\" />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  \r\n  // Get status label\r\n  const getStatusLabel = (status) => {\r\n    switch (status) {\r\n      case STATUSES.REQUESTED:\r\n        return 'Requested';\r\n      case STATUSES.UNDER_REVIEW:\r\n        return 'Under Review';\r\n      case STATUSES.PLANNED:\r\n        return 'Planned';\r\n      case STATUSES.IN_PROGRESS:\r\n        return 'In Progress';\r\n      case STATUSES.IMPLEMENTED:\r\n        return 'Implemented';\r\n      case STATUSES.REJECTED:\r\n        return 'Rejected';\r\n      default:\r\n        return status;\r\n    }\r\n  };\r\n  \r\n  // Get status color\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case STATUSES.REQUESTED:\r\n        return 'default';\r\n      case STATUSES.UNDER_REVIEW:\r\n        return 'warning';\r\n      case STATUSES.PLANNED:\r\n        return 'info';\r\n      case STATUSES.IN_PROGRESS:\r\n        return 'primary';\r\n      case STATUSES.IMPLEMENTED:\r\n        return 'success';\r\n      case STATUSES.REJECTED:\r\n        return 'error';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n  \r\n  // Filter features\r\n  const filteredFeatures = features.filter(feature => {\r\n    if (filters.category !== 'all' && feature.category !== filters.category) {\r\n      return false;\r\n    }\r\n    \r\n    if (filters.status !== 'all' && feature.status !== filters.status) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by tab\r\n    if (activeTab === 1 && !feature.userVoted) {\r\n      return false;\r\n    }\r\n    \r\n    if (activeTab === 2 && feature.status !== STATUSES.IMPLEMENTED) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  });\r\n  \r\n  // Sort features\r\n  const sortedFeatures = [...filteredFeatures].sort((a, b) => {\r\n    switch (sortBy) {\r\n      case 'votes':\r\n        return b.votes - a.votes;\r\n      case 'newest':\r\n        return new Date(b.createdAt) - new Date(a.createdAt);\r\n      case 'oldest':\r\n        return new Date(a.createdAt) - new Date(b.createdAt);\r\n      default:\r\n        return b.votes - a.votes;\r\n    }\r\n  });\r\n  \r\n  return (\r\n    <Box>\r\n      {/* Add Feature Dialog */}\r\n      <Dialog\r\n        open={showAddDialog}\r\n        onClose={handleCloseAddDialog}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Submit Feature Request</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={3} sx={{ mt: 0 }}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Title\"\r\n                name=\"title\"\r\n                value={newFeature.title}\r\n                onChange={handleFeatureInputChange}\r\n                error={!!formErrors.title}\r\n                helperText={formErrors.title}\r\n                placeholder=\"Enter a concise title for your feature request\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <FormControl fullWidth error={!!formErrors.category}>\r\n                <InputLabel id=\"category-label\">Category</InputLabel>\r\n                <Select\r\n                  labelId=\"category-label\"\r\n                  name=\"category\"\r\n                  value={newFeature.category}\r\n                  onChange={handleFeatureInputChange}\r\n                  label=\"Category\"\r\n                  required\r\n                >\r\n                  {CATEGORIES.map(category => (\r\n                    <MenuItem key={category} value={category}>\r\n                      {category}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {formErrors.category && (\r\n                  <Typography variant=\"caption\" color=\"error\">\r\n                    {formErrors.category}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Tags\"\r\n                placeholder=\"Type tag and press comma to add\"\r\n                onKeyUp={handleTagInput}\r\n                helperText=\"Enter tags to help categorize your request\"\r\n              />\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>\r\n                {newFeature.tags.map(tag => (\r\n                  <Chip\r\n                    key={tag}\r\n                    label={tag}\r\n                    onDelete={() => handleRemoveTag(tag)}\r\n                    size=\"small\"\r\n                  />\r\n                ))}\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Description\"\r\n                name=\"description\"\r\n                value={newFeature.description}\r\n                onChange={handleFeatureInputChange}\r\n                error={!!formErrors.description}\r\n                helperText={formErrors.description || 'Provide a detailed description of the feature you would like to see'}\r\n                multiline\r\n                rows={4}\r\n                required\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseAddDialog}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleSubmitFeature}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={loading}\r\n          >\r\n            {loading ? <CircularProgress size={24} /> : 'Submit Request'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* Feature Board Header */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Feature Requests\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          startIcon={<AddIcon />}\r\n          onClick={handleOpenAddDialog}\r\n        >\r\n          Submit Request\r\n        </Button>\r\n      </Box>\r\n      \r\n      {/* Tabs */}\r\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n        <Tabs \r\n          value={activeTab} \r\n          onChange={handleTabChange}\r\n          aria-label=\"feature request tabs\"\r\n        >\r\n          <Tab label=\"All Requests\" />\r\n          <Tab label=\"My Votes\" />\r\n          <Tab label=\"Implemented\" />\r\n        </Tabs>\r\n      </Box>\r\n      \r\n      {/* Filters */}\r\n      <Paper sx={{ p: 2, mb: 3 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item>\r\n            <FilterIcon color=\"action\" />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <FormControl fullWidth size=\"small\">\r\n              <InputLabel id=\"category-filter-label\">Category</InputLabel>\r\n              <Select\r\n                labelId=\"category-filter-label\"\r\n                value={filters.category}\r\n                onChange={(e) => handleFilterChange('category', e.target.value)}\r\n                label=\"Category\"\r\n              >\r\n                <MenuItem value=\"all\">All Categories</MenuItem>\r\n                {CATEGORIES.map(category => (\r\n                  <MenuItem key={category} value={category}>\r\n                    {category}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <FormControl fullWidth size=\"small\">\r\n              <InputLabel id=\"status-filter-label\">Status</InputLabel>\r\n              <Select\r\n                labelId=\"status-filter-label\"\r\n                value={filters.status}\r\n                onChange={(e) => handleFilterChange('status', e.target.value)}\r\n                label=\"Status\"\r\n              >\r\n                <MenuItem value=\"all\">All Statuses</MenuItem>\r\n                {Object.values(STATUSES).map(status => (\r\n                  <MenuItem key={status} value={status}>\r\n                    {getStatusLabel(status)}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <FormControl fullWidth size=\"small\">\r\n              <InputLabel id=\"sort-label\">Sort By</InputLabel>\r\n              <Select\r\n                labelId=\"sort-label\"\r\n                value={sortBy}\r\n                onChange={handleSortChange}\r\n                label=\"Sort By\"\r\n              >\r\n                <MenuItem value=\"votes\">Most Votes</MenuItem>\r\n                <MenuItem value=\"newest\">Newest</MenuItem>\r\n                <MenuItem value=\"oldest\">Oldest</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              {filteredFeatures.length} {filteredFeatures.length === 1 ? 'request' : 'requests'} found\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      \r\n      {/* Error Alert */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {/* Feature List */}\r\n      {loading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : filteredFeatures.length === 0 ? (\r\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\r\n          <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\r\n            No feature requests found\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\r\n            {activeTab === 0 ? \r\n              'No feature requests match your current filters.' :\r\n              activeTab === 1 ? \r\n                'You haven\\'t voted for any feature requests yet.' :\r\n                'No implemented features match your current filters.'\r\n            }\r\n          </Typography>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            onClick={handleOpenAddDialog}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Submit a New Request\r\n          </Button>\r\n        </Paper>\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          {sortedFeatures.map(feature => (\r\n            <Grid item xs={12} key={feature.id}>\r\n              <Card \r\n                variant=\"outlined\"\r\n                sx={{\r\n                  position: 'relative',\r\n                  transition: 'transform 0.2s, box-shadow 0.2s',\r\n                  '&:hover': {\r\n                    boxShadow: 3,\r\n                    transform: 'translateY(-2px)'\r\n                  }\r\n                }}\r\n              >\r\n                {/* Status indicator */}\r\n                {getStatusIcon(feature.status) && (\r\n                  <Box\r\n                    sx={{\r\n                      position: 'absolute',\r\n                      top: 12,\r\n                      right: 12,\r\n                      zIndex: 1\r\n                    }}\r\n                  >\r\n                    <Tooltip title={getStatusLabel(feature.status)}>\r\n                      {getStatusIcon(feature.status)}\r\n                    </Tooltip>\r\n                  </Box>\r\n                )}\r\n                \r\n                <Grid container>\r\n                  {/* Vote count column */}\r\n                  <Grid item xs={1} sm={1}>\r\n                    <Box \r\n                      sx={{ \r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        p: 2,\r\n                        height: '100%',\r\n                        borderRight: 1,\r\n                        borderColor: 'divider'\r\n                      }}\r\n                    >\r\n                      <IconButton \r\n                        onClick={() => handleVote(feature.id)}\r\n                        color={feature.userVoted ? 'primary' : 'default'}\r\n                        size=\"small\"\r\n                      >\r\n                        <ArrowUpIcon />\r\n                      </IconButton>\r\n                      <Typography \r\n                        variant=\"h6\" \r\n                        color={feature.userVoted ? 'primary' : 'textPrimary'}\r\n                        sx={{ fontWeight: feature.userVoted ? 'bold' : 'normal' }}\r\n                      >\r\n                        {feature.votes}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" color=\"textSecondary\">\r\n                        votes\r\n                      </Typography>\r\n                    </Box>\r\n                  </Grid>\r\n                  \r\n                  {/* Feature content column */}\r\n                  <Grid item xs={11} sm={11}>\r\n                    <CardContent>\r\n                      <Box sx={{ mb: 2 }}>\r\n                        <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                          {feature.title}\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', mb: 1 }}>\r\n                          <Chip \r\n                            label={feature.category} \r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            variant=\"outlined\"\r\n                            sx={{ mr: 1 }}\r\n                          />\r\n                          <Chip \r\n                            label={getStatusLabel(feature.status)} \r\n                            size=\"small\"\r\n                            color={getStatusColor(feature.status)}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </Box>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\r\n                          {feature.description}\r\n                        </Typography>\r\n                        \r\n                        {/* Tags */}\r\n                        {feature.tags.length > 0 && (\r\n                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\r\n                            {feature.tags.map(tag => (\r\n                              <Chip\r\n                                key={tag}\r\n                                label={tag}\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                icon={<LabelIcon />}\r\n                              />\r\n                            ))}\r\n                          </Box>\r\n                        )}\r\n                      </Box>\r\n                      \r\n                      <Divider sx={{ mb: 2 }} />\r\n                      \r\n                      {/* Feature metadata */}\r\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                          <Avatar \r\n                            src={feature.createdBy.avatar}\r\n                            alt={feature.createdBy.name}\r\n                            sx={{ width: 24, height: 24, mr: 1 }}\r\n                          />\r\n                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n                            {feature.createdBy.name}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mx: 1 }}>\r\n                            •\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n                            {formatDate(feature.createdAt)}\r\n                          </Typography>\r\n                        </Box>\r\n                        \r\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                          <Tooltip title=\"Comments\">\r\n                            <Box sx={{ display: 'flex', alignItems: 'center', mr: 1 }}>\r\n                              <CommentIcon fontSize=\"small\" color=\"action\" sx={{ mr: 0.5 }} />\r\n                              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                {feature.comments}\r\n                              </Typography>\r\n                            </Box>\r\n                          </Tooltip>\r\n                        </Box>\r\n                      </Box>\r\n                    </CardContent>\r\n                  </Grid>\r\n                </Grid>\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FeatureRequestBoard; ","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Paper,\r\n  Grid,\r\n  TextField,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Chip,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  DialogContentText,\r\n  Tabs,\r\n  Tab,\r\n  InputAdornment,\r\n  CircularProgress,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  Search as SearchIcon,\r\n  Add as AddIcon,\r\n  ThumbUp as ThumbUpIcon,\r\n  Comment as CommentIcon,\r\n  MoreVert as MoreVertIcon,\r\n  Flag as FlagIcon,\r\n  BookmarkBorder as BookmarkIcon,\r\n  Bookmark as BookmarkedIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Sort as SortIcon,\r\n  FilterList as FilterIcon\r\n} from '@mui/icons-material';\r\n\r\n/**\r\n * Beta Community Forum component\r\n * Provides a discussion platform for beta users\r\n */\r\nconst BetaCommunityForum = () => {\r\n  // State\r\n  const [discussions, setDiscussions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [sortOption, setSortOption] = useState('newest');\r\n  const [menuAnchorEl, setMenuAnchorEl] = useState(null);\r\n  const [selectedDiscussion, setSelectedDiscussion] = useState(null);\r\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\r\n  const [newDiscussion, setNewDiscussion] = useState({\r\n    title: '',\r\n    content: '',\r\n    tags: []\r\n  });\r\n  const [formErrors, setFormErrors] = useState({});\r\n  \r\n  // Load discussions on component mount\r\n  useEffect(() => {\r\n    loadDiscussions();\r\n  }, []);\r\n  \r\n  // Load discussions from API (mock implementation)\r\n  const loadDiscussions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Mock data for demo\r\n      setTimeout(() => {\r\n        const mockDiscussions = [\r\n          {\r\n            id: 'disc-1',\r\n            title: 'How to use the map feature effectively?',\r\n            content: 'I\\'ve been trying to plan a route with multiple stops, but I\\'m having trouble optimizing the order. Does anyone have tips on how to use the map feature more effectively?',\r\n            author: {\r\n              id: 'user-1',\r\n              name: 'Alex Johnson',\r\n              avatar: null\r\n            },\r\n            createdAt: '2023-03-18T09:22:17Z',\r\n            updatedAt: '2023-03-18T09:22:17Z',\r\n            upvotes: 12,\r\n            commentCount: 5,\r\n            tags: ['Maps', 'Routes', 'Tips'],\r\n            pinned: false,\r\n            bookmarked: false,\r\n            category: 'Help & Support'\r\n          },\r\n          {\r\n            id: 'disc-2',\r\n            title: 'Offline mode suggestion',\r\n            content: 'Has anyone found a good workaround for using the app in areas with poor connectivity? I\\'m going hiking next month and I\\'d like to be able to access my saved routes.',\r\n            author: {\r\n              id: 'user-2',\r\n              name: 'Maria Garcia',\r\n              avatar: 'https://i.pravatar.cc/150?u=user-2'\r\n            },\r\n            createdAt: '2023-03-15T14:33:41Z',\r\n            updatedAt: '2023-03-16T10:15:22Z',\r\n            upvotes: 24,\r\n            commentCount: 8,\r\n            tags: ['Offline', 'Feature Request'],\r\n            pinned: false,\r\n            bookmarked: true,\r\n            category: 'Feature Discussions'\r\n          },\r\n          {\r\n            id: 'disc-3',\r\n            title: 'Introducing myself to the beta community',\r\n            content: 'Hello everyone! I\\'m new to the beta program and wanted to introduce myself. I\\'m a travel enthusiast from Canada and I\\'m excited to help test and improve TourGuideAI!',\r\n            author: {\r\n              id: 'user-3',\r\n              name: 'David Wong',\r\n              avatar: 'https://i.pravatar.cc/150?u=user-3'\r\n            },\r\n            createdAt: '2023-03-20T11:42:09Z',\r\n            updatedAt: '2023-03-20T11:42:09Z',\r\n            upvotes: 18,\r\n            commentCount: 12,\r\n            tags: ['Introduction', 'Community'],\r\n            pinned: true,\r\n            bookmarked: false,\r\n            category: 'General'\r\n          },\r\n          {\r\n            id: 'disc-4',\r\n            title: 'Integration with weather services',\r\n            content: 'I think it would be great if we could see weather forecasts for our planned routes directly in the app. What do others think about this idea?',\r\n            author: {\r\n              id: 'user-4',\r\n              name: 'Samantha Lee',\r\n              avatar: 'https://i.pravatar.cc/150?u=user-4'\r\n            },\r\n            createdAt: '2023-03-17T16:23:47Z',\r\n            updatedAt: '2023-03-19T08:45:11Z',\r\n            upvotes: 36,\r\n            commentCount: 15,\r\n            tags: ['Weather', 'Feature Request', 'Integration'],\r\n            pinned: false,\r\n            bookmarked: false,\r\n            category: 'Feature Discussions'\r\n          },\r\n          {\r\n            id: 'disc-5',\r\n            title: 'Beta program feedback process',\r\n            content: 'The beta program has been running for a few weeks now. I\\'m curious how our feedback is being used to improve the app. Can any moderators provide insights?',\r\n            author: {\r\n              id: 'user-5',\r\n              name: 'James Wilson',\r\n              avatar: null\r\n            },\r\n            createdAt: '2023-03-12T10:11:23Z',\r\n            updatedAt: '2023-03-18T13:27:56Z',\r\n            upvotes: 29,\r\n            commentCount: 6,\r\n            tags: ['Feedback', 'Process', 'Beta Program'],\r\n            pinned: false,\r\n            bookmarked: true,\r\n            category: 'General'\r\n          }\r\n        ];\r\n        \r\n        setDiscussions(mockDiscussions);\r\n        setLoading(false);\r\n      }, 1000); // Simulate network delay\r\n      \r\n    } catch (err) {\r\n      console.error('Error loading discussions:', err);\r\n      setError('Failed to load discussions. Please try again.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Format date\r\n  const formatDate = (dateString) => {\r\n    const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n  \r\n  // Handle tab change\r\n  const handleTabChange = (event, newValue) => {\r\n    setActiveTab(newValue);\r\n  };\r\n  \r\n  // Handle search input\r\n  const handleSearchChange = (event) => {\r\n    setSearchQuery(event.target.value);\r\n  };\r\n  \r\n  // Handle menu open\r\n  const handleMenuOpen = (event, discussion) => {\r\n    setMenuAnchorEl(event.currentTarget);\r\n    setSelectedDiscussion(discussion);\r\n  };\r\n  \r\n  // Handle menu close\r\n  const handleMenuClose = () => {\r\n    setMenuAnchorEl(null);\r\n    setSelectedDiscussion(null);\r\n  };\r\n  \r\n  // Handle bookmark\r\n  const handleBookmark = (discussionId) => {\r\n    setDiscussions(prev => \r\n      prev.map(disc => {\r\n        if (disc.id === discussionId) {\r\n          return { ...disc, bookmarked: !disc.bookmarked };\r\n        }\r\n        return disc;\r\n      })\r\n    );\r\n    handleMenuClose();\r\n  };\r\n  \r\n  // Handle upvote\r\n  const handleUpvote = (discussionId) => {\r\n    setDiscussions(prev => \r\n      prev.map(disc => {\r\n        if (disc.id === discussionId) {\r\n          // In a real app, we would track if the user has already upvoted\r\n          // For this mock, we'll just increment the count\r\n          return { \r\n            ...disc, \r\n            upvotes: disc.upvotes + 1 \r\n          };\r\n        }\r\n        return disc;\r\n      })\r\n    );\r\n  };\r\n  \r\n  // Handle sort change\r\n  const handleSortChange = (option) => {\r\n    setSortOption(option);\r\n  };\r\n  \r\n  // Handle create discussion dialog open\r\n  const handleCreateDialogOpen = () => {\r\n    setNewDiscussion({\r\n      title: '',\r\n      content: '',\r\n      tags: []\r\n    });\r\n    setFormErrors({});\r\n    setShowCreateDialog(true);\r\n  };\r\n  \r\n  // Handle create discussion dialog close\r\n  const handleCreateDialogClose = () => {\r\n    setShowCreateDialog(false);\r\n  };\r\n  \r\n  // Handle new discussion input change\r\n  const handleNewDiscussionChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNewDiscussion(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    \r\n    // Clear error when field changes\r\n    if (formErrors[name]) {\r\n      setFormErrors(prev => ({\r\n        ...prev,\r\n        [name]: null\r\n      }));\r\n    }\r\n  };\r\n  \r\n  // Handle tag input (comma separated)\r\n  const handleTagInput = (e) => {\r\n    const value = e.target.value;\r\n    if (value.endsWith(',')) {\r\n      const tag = value.slice(0, -1).trim();\r\n      if (tag && !newDiscussion.tags.includes(tag)) {\r\n        setNewDiscussion(prev => ({\r\n          ...prev,\r\n          tags: [...prev.tags, tag]\r\n        }));\r\n      }\r\n      e.target.value = '';\r\n    }\r\n  };\r\n  \r\n  // Remove a tag\r\n  const handleRemoveTag = (tag) => {\r\n    setNewDiscussion(prev => ({\r\n      ...prev,\r\n      tags: prev.tags.filter(t => t !== tag)\r\n    }));\r\n  };\r\n  \r\n  // Validate form\r\n  const validateForm = () => {\r\n    const errors = {};\r\n    \r\n    if (!newDiscussion.title.trim()) {\r\n      errors.title = 'Title is required';\r\n    }\r\n    \r\n    if (!newDiscussion.content.trim()) {\r\n      errors.content = 'Content is required';\r\n    } else if (newDiscussion.content.length < 20) {\r\n      errors.content = 'Content must be at least 20 characters';\r\n    }\r\n    \r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n  \r\n  // Handle create discussion\r\n  const handleCreateDiscussion = () => {\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    // Create new discussion (in a real app, this would be an API call)\r\n    const newDiscussionObj = {\r\n      id: `disc-${Date.now()}`,\r\n      title: newDiscussion.title,\r\n      content: newDiscussion.content,\r\n      author: {\r\n        id: 'current-user',\r\n        name: 'Current User',\r\n        avatar: null\r\n      },\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      upvotes: 0,\r\n      commentCount: 0,\r\n      tags: newDiscussion.tags,\r\n      pinned: false,\r\n      bookmarked: false,\r\n      category: 'General' // In a real app, the user would select this\r\n    };\r\n    \r\n    setDiscussions(prev => [newDiscussionObj, ...prev]);\r\n    handleCreateDialogClose();\r\n  };\r\n  \r\n  // Filter and sort discussions\r\n  const filteredDiscussions = discussions.filter(discussion => {\r\n    // Filter by search query\r\n    if (searchQuery) {\r\n      const query = searchQuery.toLowerCase();\r\n      if (\r\n        !discussion.title.toLowerCase().includes(query) &&\r\n        !discussion.content.toLowerCase().includes(query) &&\r\n        !discussion.tags.some(tag => tag.toLowerCase().includes(query))\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    // Filter by tab\r\n    if (activeTab === 1 && !discussion.pinned) {\r\n      return false;\r\n    }\r\n    \r\n    if (activeTab === 2 && !discussion.bookmarked) {\r\n      return false;\r\n    }\r\n    \r\n    if (activeTab === 3 && discussion.category !== 'Feature Discussions') {\r\n      return false;\r\n    }\r\n    \r\n    if (activeTab === 4 && discussion.category !== 'Help & Support') {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  });\r\n  \r\n  // Sort discussions\r\n  const sortedDiscussions = [...filteredDiscussions].sort((a, b) => {\r\n    switch (sortOption) {\r\n      case 'newest':\r\n        return new Date(b.createdAt) - new Date(a.createdAt);\r\n      case 'oldest':\r\n        return new Date(a.createdAt) - new Date(b.createdAt);\r\n      case 'most_upvoted':\r\n        return b.upvotes - a.upvotes;\r\n      case 'most_commented':\r\n        return b.commentCount - a.commentCount;\r\n      default:\r\n        return new Date(b.createdAt) - new Date(a.createdAt);\r\n    }\r\n  });\r\n  \r\n  return (\r\n    <Box>\r\n      {/* Create Discussion Dialog */}\r\n      <Dialog\r\n        open={showCreateDialog}\r\n        onClose={handleCreateDialogClose}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Start a New Discussion</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={3} sx={{ mt: 0 }}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Title\"\r\n                name=\"title\"\r\n                value={newDiscussion.title}\r\n                onChange={handleNewDiscussionChange}\r\n                error={!!formErrors.title}\r\n                helperText={formErrors.title}\r\n                placeholder=\"Enter a clear, specific title for your discussion\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Content\"\r\n                name=\"content\"\r\n                value={newDiscussion.content}\r\n                onChange={handleNewDiscussionChange}\r\n                error={!!formErrors.content}\r\n                helperText={formErrors.content}\r\n                multiline\r\n                rows={6}\r\n                placeholder=\"Share your thoughts, questions, or ideas in detail\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Tags\"\r\n                placeholder=\"Type tag and press comma to add\"\r\n                onKeyUp={handleTagInput}\r\n                helperText=\"Add relevant tags to help others find your discussion\"\r\n              />\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>\r\n                {newDiscussion.tags.map(tag => (\r\n                  <Chip\r\n                    key={tag}\r\n                    label={tag}\r\n                    onDelete={() => handleRemoveTag(tag)}\r\n                    size=\"small\"\r\n                  />\r\n                ))}\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCreateDialogClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleCreateDiscussion}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Post Discussion\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* Forum Header */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Beta Community Forum\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          startIcon={<AddIcon />}\r\n          onClick={handleCreateDialogOpen}\r\n        >\r\n          Start Discussion\r\n        </Button>\r\n      </Box>\r\n      \r\n      {/* Search and Filter */}\r\n      <Paper sx={{ p: 2, mb: 3 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              fullWidth\r\n              placeholder=\"Search discussions...\"\r\n              value={searchQuery}\r\n              onChange={handleSearchChange}\r\n              size=\"small\"\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: { xs: 'flex-start', md: 'flex-end' } }}>\r\n              <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n                Sort by:\r\n              </Typography>\r\n              <Button\r\n                size=\"small\"\r\n                endIcon={<SortIcon />}\r\n                onClick={(e) => setMenuAnchorEl(e.currentTarget)}\r\n              >\r\n                {sortOption === 'newest' && 'Newest'}\r\n                {sortOption === 'oldest' && 'Oldest'}\r\n                {sortOption === 'most_upvoted' && 'Most Upvoted'}\r\n                {sortOption === 'most_commented' && 'Most Commented'}\r\n              </Button>\r\n              <Menu\r\n                anchorEl={menuAnchorEl}\r\n                open={Boolean(menuAnchorEl) && !selectedDiscussion}\r\n                onClose={() => setMenuAnchorEl(null)}\r\n              >\r\n                <MenuItem onClick={() => handleSortChange('newest')}>Newest</MenuItem>\r\n                <MenuItem onClick={() => handleSortChange('oldest')}>Oldest</MenuItem>\r\n                <MenuItem onClick={() => handleSortChange('most_upvoted')}>Most Upvoted</MenuItem>\r\n                <MenuItem onClick={() => handleSortChange('most_commented')}>Most Commented</MenuItem>\r\n              </Menu>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      \r\n      {/* Tabs */}\r\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n        <Tabs \r\n          value={activeTab} \r\n          onChange={handleTabChange}\r\n          aria-label=\"forum tabs\"\r\n        >\r\n          <Tab label=\"All Discussions\" />\r\n          <Tab label=\"Pinned\" />\r\n          <Tab label=\"Bookmarked\" />\r\n          <Tab label=\"Feature Discussions\" />\r\n          <Tab label=\"Help & Support\" />\r\n        </Tabs>\r\n      </Box>\r\n      \r\n      {/* Error Alert */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {/* Discussions List */}\r\n      {loading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : filteredDiscussions.length === 0 ? (\r\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\r\n          <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\r\n            No discussions found\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\r\n            {searchQuery ? \r\n              'No discussions match your search criteria.' :\r\n              activeTab === 0 ?\r\n                'There are no discussions yet.' :\r\n                activeTab === 1 ?\r\n                  'There are no pinned discussions.' :\r\n                  activeTab === 2 ?\r\n                    'You have no bookmarked discussions.' :\r\n                    activeTab === 3 ?\r\n                      'There are no feature discussions.' :\r\n                      'There are no help & support discussions.'\r\n            }\r\n          </Typography>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            onClick={handleCreateDialogOpen}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Start a New Discussion\r\n          </Button>\r\n        </Paper>\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          {sortedDiscussions.map(discussion => (\r\n            <Grid item xs={12} key={discussion.id}>\r\n              <Paper \r\n                variant=\"outlined\"\r\n                sx={{\r\n                  p: 2,\r\n                  position: 'relative',\r\n                  bgcolor: discussion.pinned ? 'rgba(144, 202, 249, 0.08)' : 'transparent',\r\n                  border: discussion.pinned ? '1px solid rgba(144, 202, 249, 0.5)' : '1px solid rgba(0, 0, 0, 0.12)',\r\n                  transition: 'transform 0.2s, box-shadow 0.2s',\r\n                  '&:hover': {\r\n                    boxShadow: 2,\r\n                    transform: 'translateY(-2px)'\r\n                  }\r\n                }}\r\n              >\r\n                {/* Discussion Header */}\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Typography variant=\"subtitle1\" fontWeight=\"medium\" sx={{ mr: 1 }}>\r\n                      {discussion.title}\r\n                    </Typography>\r\n                    {discussion.pinned && (\r\n                      <Chip \r\n                        label=\"Pinned\" \r\n                        size=\"small\" \r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mr: 1 }}\r\n                      />\r\n                    )}\r\n                  </Box>\r\n                  <IconButton\r\n                    size=\"small\"\r\n                    onClick={(e) => handleMenuOpen(e, discussion)}\r\n                  >\r\n                    <MoreVertIcon />\r\n                  </IconButton>\r\n                </Box>\r\n                \r\n                {/* Discussion Meta */}\r\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                  <ListItemAvatar sx={{ minWidth: 36 }}>\r\n                    <Avatar \r\n                      src={discussion.author.avatar} \r\n                      alt={discussion.author.name}\r\n                      sx={{ width: 24, height: 24 }}\r\n                    />\r\n                  </ListItemAvatar>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {discussion.author.name}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mx: 1 }}>\r\n                    •\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {formatDate(discussion.createdAt)}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mx: 1 }}>\r\n                    •\r\n                  </Typography>\r\n                  <Chip \r\n                    label={discussion.category} \r\n                    size=\"small\"\r\n                    color=\"default\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Box>\r\n                \r\n                {/* Discussion Content */}\r\n                <Typography variant=\"body1\" paragraph>\r\n                  {discussion.content.length > 300 ?\r\n                    `${discussion.content.slice(0, 300)}...` :\r\n                    discussion.content\r\n                  }\r\n                </Typography>\r\n                \r\n                {/* Tags */}\r\n                {discussion.tags.length > 0 && (\r\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\r\n                    {discussion.tags.map(tag => (\r\n                      <Chip\r\n                        key={tag}\r\n                        label={tag}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    ))}\r\n                  </Box>\r\n                )}\r\n                \r\n                {/* Discussion Actions */}\r\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Button\r\n                      size=\"small\"\r\n                      startIcon={<ThumbUpIcon />}\r\n                      onClick={() => handleUpvote(discussion.id)}\r\n                    >\r\n                      {discussion.upvotes}\r\n                    </Button>\r\n                    <Button\r\n                      size=\"small\"\r\n                      startIcon={<CommentIcon />}\r\n                      sx={{ ml: 1 }}\r\n                    >\r\n                      {discussion.commentCount}\r\n                    </Button>\r\n                  </Box>\r\n                  \r\n                  <Box>\r\n                    {discussion.bookmarked ? (\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        onClick={() => handleBookmark(discussion.id)}\r\n                      >\r\n                        <BookmarkedIcon />\r\n                      </IconButton>\r\n                    ) : (\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleBookmark(discussion.id)}\r\n                      >\r\n                        <BookmarkIcon />\r\n                      </IconButton>\r\n                    )}\r\n                  </Box>\r\n                </Box>\r\n              </Paper>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n      \r\n      {/* Discussion Menu */}\r\n      <Menu\r\n        anchorEl={menuAnchorEl}\r\n        open={Boolean(menuAnchorEl) && Boolean(selectedDiscussion)}\r\n        onClose={handleMenuClose}\r\n      >\r\n        <MenuItem onClick={() => handleBookmark(selectedDiscussion?.id)}>\r\n          {selectedDiscussion?.bookmarked ? 'Remove Bookmark' : 'Bookmark'}\r\n        </MenuItem>\r\n        <MenuItem>View Discussion</MenuItem>\r\n        <MenuItem>Share</MenuItem>\r\n        <MenuItem>Report</MenuItem>\r\n      </Menu>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BetaCommunityForum; ","/**\r\n * Analytics Service for Beta Program\r\n * Handles data collection, processing, and reporting for beta program analytics.\r\n */\r\n\r\nimport authService from '../../services/AuthService';\r\n\r\n// Mock data for different metrics - would be replaced with real API calls in production\r\nconst mockData = {\r\n  // User activity data (daily active users)\r\n  userActivity: [\r\n    { date: '2025-03-20', count: 45 },\r\n    { date: '2025-03-21', count: 62 },\r\n    { date: '2025-03-22', count: 78 },\r\n    { date: '2025-03-23', count: 84 },\r\n    { date: '2025-03-24', count: 103 },\r\n    { date: '2025-03-25', count: 125 },\r\n    { date: '2025-03-26', count: 152 },\r\n    { date: '2025-03-27', count: 187 }\r\n  ],\r\n  \r\n  // Feature usage data\r\n  featureUsage: [\r\n    { feature: 'Route Planning', usage: 427, growth: 15 },\r\n    { feature: 'Map Navigation', usage: 316, growth: 8 },\r\n    { feature: 'Location Search', usage: 254, growth: 12 },\r\n    { feature: 'Itinerary Sharing', usage: 193, growth: 23 },\r\n    { feature: 'Travel Recommendations', usage: 176, growth: 18 }\r\n  ],\r\n  \r\n  // Feedback sentiment data\r\n  feedbackSentiment: [\r\n    { category: 'UI/UX', positive: 67, neutral: 22, negative: 11 },\r\n    { category: 'Performance', positive: 58, neutral: 31, negative: 11 },\r\n    { category: 'Features', positive: 72, neutral: 18, negative: 10 },\r\n    { category: 'Content', positive: 81, neutral: 14, negative: 5 }\r\n  ],\r\n  \r\n  // User retention data\r\n  retentionData: [\r\n    { week: 'Week 1', rate: 89 },\r\n    { week: 'Week 2', rate: 76 },\r\n    { week: 'Week 3', rate: 68 },\r\n    { week: 'Week 4', rate: 62 }\r\n  ],\r\n  \r\n  // Geographic distribution data\r\n  geographicData: [\r\n    { region: 'North America', users: 245 },\r\n    { region: 'Europe', users: 187 },\r\n    { region: 'Asia', users: 134 },\r\n    { region: 'South America', users: 76 },\r\n    { region: 'Africa', users: 53 },\r\n    { region: 'Oceania', users: 38 }\r\n  ],\r\n  \r\n  // Device distribution data\r\n  deviceData: [\r\n    { type: 'Desktop', percentage: 42 },\r\n    { type: 'Mobile', percentage: 48 },\r\n    { type: 'Tablet', percentage: 10 }\r\n  ],\r\n  \r\n  // Browser distribution data\r\n  browserData: [\r\n    { name: 'Chrome', percentage: 64 },\r\n    { name: 'Firefox', percentage: 12 },\r\n    { name: 'Safari', percentage: 16 },\r\n    { name: 'Edge', percentage: 7 },\r\n    { name: 'Other', percentage: 1 }\r\n  ],\r\n  \r\n  // Issue resolution data\r\n  issueData: [\r\n    { type: 'Bug Reports', count: 37, resolved: 31 },\r\n    { type: 'Feature Requests', count: 56, resolved: 22 },\r\n    { type: 'UI/UX Issues', count: 28, resolved: 19 },\r\n    { type: 'Performance Issues', count: 15, resolved: 12 }\r\n  ]\r\n};\r\n\r\n// Anomaly thresholds (for detecting unusual patterns)\r\nconst anomalyThresholds = {\r\n  userActivityChange: 30, // 30% change day-to-day is unusual\r\n  featureUsageSpike: 50,  // 50% increase in a day is unusual\r\n  errorRateThreshold: 5,  // 5% error rate is unusual\r\n  feedbackNegativeThreshold: 25, // 25% negative feedback is unusual\r\n};\r\n\r\nclass AnalyticsService {\r\n  /**\r\n   * Initialize Google Analytics 4 tracking\r\n   * This would integrate with the real GA4 in a production environment\r\n   */\r\n  initGA4() {\r\n    // Mock implementation - would be replaced with actual GA4 initialization\r\n    console.log('Google Analytics 4 initialized');\r\n    \r\n    // Set up custom event listeners\r\n    this.setupEventListeners();\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Set up custom event listeners for tracking\r\n   */\r\n  setupEventListeners() {\r\n    // Track page views\r\n    if (typeof window !== 'undefined') {\r\n      // Page view tracking\r\n      window.addEventListener('load', () => {\r\n        this.trackEvent('page_view', {\r\n          page_title: document.title,\r\n          page_location: window.location.href,\r\n          page_path: window.location.pathname\r\n        });\r\n      });\r\n      \r\n      // Track user interactions (clicks on important elements)\r\n      document.addEventListener('click', (event) => {\r\n        const target = event.target;\r\n        \r\n        // Track button clicks\r\n        if (target.tagName === 'BUTTON' || \r\n            (target.tagName === 'A' && target.getAttribute('role') === 'button')) {\r\n          this.trackEvent('button_click', {\r\n            button_id: target.id || 'unknown',\r\n            button_text: target.innerText || 'unknown',\r\n            page_path: window.location.pathname\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Track custom events\r\n   * @param {string} eventName - Name of the event\r\n   * @param {Object} eventParams - Event parameters\r\n   */\r\n  trackEvent(eventName, eventParams = {}) {\r\n    // In a real implementation, this would call GA4 API\r\n    console.log(`Analytics event tracked: ${eventName}`, eventParams);\r\n    \r\n    // Mock GA4 event tracking\r\n    if (typeof window !== 'undefined' && window.gtag) {\r\n      window.gtag('event', eventName, eventParams);\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Get user activity data\r\n   * @param {number} days - Number of days to retrieve (default: 7)\r\n   * @returns {Promise<Array>} - User activity data\r\n   */\r\n  async getUserActivity(days = 7) {\r\n    try {\r\n      // Verify admin access\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      // In a real implementation, this would be an API call\r\n      // For now, we'll return mock data\r\n      const data = mockData.userActivity.slice(-days);\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching user activity data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get feature usage data\r\n   * @param {number} limit - Number of top features to retrieve\r\n   * @returns {Promise<Array>} - Feature usage data\r\n   */\r\n  async getFeatureUsage(limit = 5) {\r\n    try {\r\n      // Verify admin access\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      // In a real implementation, this would be an API call\r\n      // For now, we'll return mock data\r\n      const data = mockData.featureUsage.slice(0, limit);\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching feature usage data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get feedback sentiment data\r\n   * @returns {Promise<Array>} - Feedback sentiment data\r\n   */\r\n  async getFeedbackSentiment() {\r\n    try {\r\n      // Verify admin access\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      // In a real implementation, this would be an API call\r\n      // For now, we'll return mock data\r\n      return mockData.feedbackSentiment;\r\n    } catch (error) {\r\n      console.error('Error fetching feedback sentiment data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get user retention data\r\n   * @returns {Promise<Array>} - User retention data\r\n   */\r\n  async getRetentionData() {\r\n    try {\r\n      // Verify admin access\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      // In a real implementation, this would be an API call\r\n      // For now, we'll return mock data\r\n      return mockData.retentionData;\r\n    } catch (error) {\r\n      console.error('Error fetching retention data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get geographic distribution data\r\n   * @returns {Promise<Array>} - Geographic distribution data\r\n   */\r\n  async getGeographicData() {\r\n    try {\r\n      // Verify admin access\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      // In a real implementation, this would be an API call\r\n      // For now, we'll return mock data\r\n      return mockData.geographicData;\r\n    } catch (error) {\r\n      console.error('Error fetching geographic data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get device distribution data\r\n   * @returns {Promise<Array>} - Device distribution data\r\n   */\r\n  async getDeviceData() {\r\n    try {\r\n      // Verify admin access\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      // In a real implementation, this would be an API call\r\n      // For now, we'll return mock data\r\n      return mockData.deviceData;\r\n    } catch (error) {\r\n      console.error('Error fetching device data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get browser distribution data\r\n   * @returns {Promise<Array>} - Browser distribution data\r\n   */\r\n  async getBrowserData() {\r\n    try {\r\n      // Verify admin access\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      // In a real implementation, this would be an API call\r\n      // For now, we'll return mock data\r\n      return mockData.browserData;\r\n    } catch (error) {\r\n      console.error('Error fetching browser data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get issue resolution data\r\n   * @returns {Promise<Array>} - Issue resolution data\r\n   */\r\n  async getIssueData() {\r\n    try {\r\n      // Verify admin access\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      // In a real implementation, this would be an API call\r\n      // For now, we'll return mock data\r\n      return mockData.issueData;\r\n    } catch (error) {\r\n      console.error('Error fetching issue data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check for anomalies in the data\r\n   * @returns {Promise<Array>} - List of detected anomalies\r\n   */\r\n  async detectAnomalies() {\r\n    try {\r\n      // Verify admin access\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      // In a real implementation, this would use actual data and ML algorithms\r\n      // For now, we'll simulate anomaly detection\r\n      const anomalies = [];\r\n      \r\n      // Check for user activity anomalies\r\n      const userActivity = mockData.userActivity;\r\n      for (let i = 1; i < userActivity.length; i++) {\r\n        const prevCount = userActivity[i-1].count;\r\n        const currCount = userActivity[i].count;\r\n        const percentChange = ((currCount - prevCount) / prevCount) * 100;\r\n        \r\n        if (Math.abs(percentChange) > anomalyThresholds.userActivityChange) {\r\n          anomalies.push({\r\n            type: 'user_activity',\r\n            date: userActivity[i].date,\r\n            message: `Unusual ${percentChange > 0 ? 'increase' : 'decrease'} in user activity (${Math.abs(percentChange.toFixed(2))}%)`,\r\n            severity: percentChange > 0 ? 'info' : 'warning'\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Check for high negative feedback\r\n      const feedbackData = mockData.feedbackSentiment;\r\n      for (const category of feedbackData) {\r\n        const total = category.positive + category.neutral + category.negative;\r\n        const negativePercentage = (category.negative / total) * 100;\r\n        \r\n        if (negativePercentage > anomalyThresholds.feedbackNegativeThreshold) {\r\n          anomalies.push({\r\n            type: 'feedback',\r\n            category: category.category,\r\n            message: `High negative feedback in ${category.category} category (${negativePercentage.toFixed(2)}%)`,\r\n            severity: 'warning'\r\n          });\r\n        }\r\n      }\r\n      \r\n      return anomalies;\r\n    } catch (error) {\r\n      console.error('Error detecting anomalies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Export analytics data\r\n   * @param {string} format - Export format (csv, json)\r\n   * @returns {Promise<Object>} - Export data and metadata\r\n   */\r\n  async exportData(format = 'json') {\r\n    try {\r\n      // Verify admin access\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      // Collect all data\r\n      const allData = {\r\n        userActivity: mockData.userActivity,\r\n        featureUsage: mockData.featureUsage,\r\n        feedbackSentiment: mockData.feedbackSentiment,\r\n        retentionData: mockData.retentionData,\r\n        geographicData: mockData.geographicData,\r\n        deviceData: mockData.deviceData,\r\n        browserData: mockData.browserData,\r\n        issueData: mockData.issueData,\r\n        exportDate: new Date().toISOString(),\r\n        exportFormat: format\r\n      };\r\n      \r\n      if (format === 'csv') {\r\n        // In a real implementation, this would convert data to CSV\r\n        return {\r\n          data: 'CSV data would be generated here',\r\n          filename: `beta-analytics-export-${new Date().toISOString()}.csv`,\r\n          contentType: 'text/csv'\r\n        };\r\n      }\r\n      \r\n      return {\r\n        data: allData,\r\n        filename: `beta-analytics-export-${new Date().toISOString()}.json`,\r\n        contentType: 'application/json'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error exporting data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst analyticsService = new AnalyticsService();\r\n\r\nexport default analyticsService; ","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  CircularProgress,\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  Button,\r\n  Divider,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  DownloadOutlined as DownloadIcon,\r\n  NotificationsActive as AlertIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Check as CheckIcon,\r\n  Error as ErrorIcon,\r\n  ArrowUpward as TrendUpIcon,\r\n  ArrowDownward as TrendDownIcon,\r\n  Info as InfoIcon,\r\n  FileDownload as ExportIcon,\r\n  Refresh as RefreshIcon\r\n} from '@mui/icons-material';\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  BarChart,\r\n  Bar,\r\n  LineChart,\r\n  Line,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\n\r\nimport analyticsService from '../../services/analytics/AnalyticsService';\r\nimport authService from '../../services/AuthService';\r\n\r\n/**\r\n * Analytics Dashboard Component\r\n * Displays beta program usage metrics and insights\r\n */\r\nconst AnalyticsDashboard = () => {\r\n  const theme = useTheme();\r\n  \r\n  // State\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [userActivity, setUserActivity] = useState([]);\r\n  const [featureUsage, setFeatureUsage] = useState([]);\r\n  const [feedbackSentiment, setFeedbackSentiment] = useState([]);\r\n  const [retentionData, setRetentionData] = useState([]);\r\n  const [geographicData, setGeographicData] = useState([]);\r\n  const [deviceData, setDeviceData] = useState([]);\r\n  const [browserData, setBrowserData] = useState([]);\r\n  const [issueData, setIssueData] = useState([]);\r\n  const [anomalies, setAnomalies] = useState([]);\r\n  const [exportFormat, setExportFormat] = useState('json');\r\n  const [timeRange, setTimeRange] = useState('7days');\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  \r\n  // Colors for charts\r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658'];\r\n  const SENTIMENT_COLORS = {\r\n    positive: '#4caf50',\r\n    neutral: '#9e9e9e', \r\n    negative: '#f44336'\r\n  };\r\n\r\n  // Chart colors\r\n  const colors = {\r\n    primary: theme.palette.primary.main,\r\n    secondary: theme.palette.secondary.main,\r\n    success: theme.palette.success.main,\r\n    warning: theme.palette.warning.main,\r\n    error: theme.palette.error.main,\r\n    info: theme.palette.info.main,\r\n    pieColors: [\r\n      '#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A4DE6C',\r\n      '#8884D8', '#83A6ED', '#8DD1E1', '#D0ED57', '#F7DC6F'\r\n    ]\r\n  };\r\n\r\n  // Check admin status and initialize data\r\n  useEffect(() => {\r\n    const checkAdmin = async () => {\r\n      try {\r\n        const adminStatus = await authService.isAdmin();\r\n        setIsAdmin(adminStatus);\r\n        \r\n        if (adminStatus) {\r\n          // Initialize analytics tracking\r\n          analyticsService.initGA4();\r\n          \r\n          // Load dashboard data\r\n          await loadDashboardData();\r\n        } else {\r\n          setError('Admin access required to view analytics');\r\n          setLoading(false);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error checking admin status:', err);\r\n        setError('Failed to verify admin access');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    checkAdmin();\r\n  }, []);\r\n\r\n  // Load all dashboard data\r\n  const loadDashboardData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Load all data in parallel\r\n      const [\r\n        userActivityData,\r\n        featureUsageData,\r\n        feedbackSentimentData,\r\n        retentionData,\r\n        geographicData,\r\n        deviceData,\r\n        browserData,\r\n        issueData,\r\n        anomaliesData\r\n      ] = await Promise.all([\r\n        analyticsService.getUserActivity(),\r\n        analyticsService.getFeatureUsage(),\r\n        analyticsService.getFeedbackSentiment(),\r\n        analyticsService.getRetentionData(),\r\n        analyticsService.getGeographicData(),\r\n        analyticsService.getDeviceData(),\r\n        analyticsService.getBrowserData(),\r\n        analyticsService.getIssueData(),\r\n        analyticsService.detectAnomalies()\r\n      ]);\r\n      \r\n      // Update state with data\r\n      setUserActivity(userActivityData);\r\n      setFeatureUsage(featureUsageData);\r\n      setFeedbackSentiment(feedbackSentimentData);\r\n      setRetentionData(retentionData);\r\n      setGeographicData(geographicData);\r\n      setDeviceData(deviceData);\r\n      setBrowserData(browserData);\r\n      setIssueData(issueData);\r\n      setAnomalies(anomaliesData);\r\n      \r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error('Error loading dashboard data:', err);\r\n      setError('Failed to load analytics data');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle tab change\r\n  const handleTabChange = (event, newValue) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  // Handle export format change\r\n  const handleExportFormatChange = (event) => {\r\n    setExportFormat(event.target.value);\r\n  };\r\n\r\n  // Handle export data\r\n  const handleExportData = async () => {\r\n    try {\r\n      const exportData = await analyticsService.exportData(exportFormat);\r\n      \r\n      // Create a download link\r\n      const dataStr = typeof exportData.data === 'string' \r\n        ? exportData.data \r\n        : JSON.stringify(exportData.data, null, 2);\r\n      \r\n      const blob = new Blob([dataStr], { type: exportData.contentType });\r\n      const url = URL.createObjectURL(blob);\r\n      \r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = exportData.filename;\r\n      a.click();\r\n      \r\n      URL.revokeObjectURL(url);\r\n    } catch (err) {\r\n      console.error('Error exporting data:', err);\r\n      setError('Failed to export data');\r\n    }\r\n  };\r\n\r\n  // Load analytics data\r\n  useEffect(() => {\r\n    loadAnalytics();\r\n  }, [timeRange]);\r\n  \r\n  // Load analytics data based on time range\r\n  const loadAnalytics = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // In a real implementation, this would be an API call\r\n      // const data = await analyticsService.getAnalytics(timeRange);\r\n      \r\n      // Mock data for demo\r\n      setTimeout(() => {\r\n        // Generate data based on selected time range\r\n        const data = generateMockData(timeRange);\r\n        setDashboardData(data);\r\n        setLoading(false);\r\n      }, 800); // Simulate network delay\r\n      \r\n    } catch (err) {\r\n      console.error('Error loading analytics:', err);\r\n      setError('Failed to load analytics data. Please try again.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Handle time range change\r\n  const handleTimeRangeChange = (event) => {\r\n    setTimeRange(event.target.value);\r\n  };\r\n\r\n  // Format number with K, M suffixes\r\n  const formatNumber = (num) => {\r\n    if (num >= 1000000) {\r\n      return (num / 1000000).toFixed(1) + 'M';\r\n    }\r\n    if (num >= 1000) {\r\n      return (num / 1000).toFixed(1) + 'K';\r\n    }\r\n    return num;\r\n  };\r\n  \r\n  // Get trend indicator component\r\n  const TrendIndicator = ({ value, previousValue }) => {\r\n    const percentChange = previousValue \r\n      ? ((value - previousValue) / previousValue) * 100\r\n      : 0;\r\n      \r\n    if (Math.abs(percentChange) < 0.1) {\r\n      return null;\r\n    }\r\n    \r\n    const isPositive = percentChange > 0;\r\n    \r\n    return (\r\n      <Box \r\n        component=\"span\" \r\n        sx={{ \r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          color: isPositive ? colors.success : colors.error,\r\n          ml: 1,\r\n          fontSize: '0.875rem'\r\n        }}\r\n      >\r\n        {isPositive ? <TrendUpIcon fontSize=\"small\" /> : <TrendDownIcon fontSize=\"small\" />}\r\n        {Math.abs(percentChange).toFixed(1)}%\r\n      </Box>\r\n    );\r\n  };\r\n  \r\n  // Mock data generation\r\n  const generateMockData = (timeRange) => {\r\n    let days = 7;\r\n    \r\n    switch (timeRange) {\r\n      case '30days':\r\n        days = 30;\r\n        break;\r\n      case '90days':\r\n        days = 90;\r\n        break;\r\n      case '7days':\r\n      default:\r\n        days = 7;\r\n        break;\r\n    }\r\n    \r\n    // User activity chart data\r\n    const activityData = Array.from({ length: days }).map((_, i) => {\r\n      const date = new Date();\r\n      date.setDate(date.getDate() - (days - i - 1));\r\n      \r\n      return {\r\n        date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\r\n        activeUsers: Math.floor(Math.random() * 50) + 20,\r\n        newUsers: Math.floor(Math.random() * 10) + 1,\r\n        sessions: Math.floor(Math.random() * 100) + 50\r\n      };\r\n    });\r\n    \r\n    // Generate summary metrics\r\n    const currentActiveUsers = activityData.reduce((sum, day) => sum + day.activeUsers, 0);\r\n    const currentNewUsers = activityData.reduce((sum, day) => sum + day.newUsers, 0);\r\n    \r\n    // Previous period for comparison\r\n    const previousActiveUsers = Math.floor(currentActiveUsers * (Math.random() * 0.4 + 0.8));\r\n    const previousNewUsers = Math.floor(currentNewUsers * (Math.random() * 0.4 + 0.8));\r\n    \r\n    // Feedback data\r\n    const feedbackData = [\r\n      { category: 'UI/UX', count: Math.floor(Math.random() * 30) + 15 },\r\n      { category: 'Features', count: Math.floor(Math.random() * 40) + 20 },\r\n      { category: 'Performance', count: Math.floor(Math.random() * 25) + 10 },\r\n      { category: 'Bugs', count: Math.floor(Math.random() * 20) + 5 },\r\n      { category: 'Other', count: Math.floor(Math.random() * 15) + 5 },\r\n    ];\r\n    \r\n    // Feature usage data\r\n    const featureUsageData = [\r\n      { name: 'Route Planning', usage: Math.floor(Math.random() * 80) + 50 },\r\n      { name: 'Map Exploration', usage: Math.floor(Math.random() * 70) + 40 },\r\n      { name: 'Itinerary Builder', usage: Math.floor(Math.random() * 60) + 30 },\r\n      { name: 'Recommendations', usage: Math.floor(Math.random() * 50) + 30 },\r\n      { name: 'Sharing', usage: Math.floor(Math.random() * 40) + 20 },\r\n    ];\r\n    \r\n    // Device breakdown\r\n    const deviceBreakdown = [\r\n      { name: 'Desktop', value: Math.floor(Math.random() * 60) + 30 },\r\n      { name: 'Mobile', value: Math.floor(Math.random() * 40) + 20 },\r\n      { name: 'Tablet', value: Math.floor(Math.random() * 20) + 10 },\r\n    ];\r\n    \r\n    // Top requested features\r\n    const requestedFeatures = [\r\n      { \r\n        id: 1, \r\n        feature: 'Offline Maps Support', \r\n        votes: Math.floor(Math.random() * 40) + 30,\r\n        status: 'planned'\r\n      },\r\n      { \r\n        id: 2, \r\n        feature: 'Dark Mode', \r\n        votes: Math.floor(Math.random() * 35) + 25,\r\n        status: 'in_progress'\r\n      },\r\n      { \r\n        id: 3, \r\n        feature: 'Route Sharing', \r\n        votes: Math.floor(Math.random() * 30) + 20,\r\n        status: 'planned'\r\n      },\r\n      { \r\n        id: 4, \r\n        feature: 'Weather Integration', \r\n        votes: Math.floor(Math.random() * 25) + 15,\r\n        status: 'under_review'\r\n      },\r\n      { \r\n        id: 5, \r\n        feature: 'Translation Support', \r\n        votes: Math.floor(Math.random() * 20) + 10,\r\n        status: 'under_review'\r\n      },\r\n    ];\r\n    \r\n    // Geography data (country distribution)\r\n    const geoData = [\r\n      { country: 'United States', users: Math.floor(Math.random() * 100) + 50 },\r\n      { country: 'United Kingdom', users: Math.floor(Math.random() * 50) + 20 },\r\n      { country: 'Canada', users: Math.floor(Math.random() * 40) + 15 },\r\n      { country: 'Australia', users: Math.floor(Math.random() * 30) + 10 },\r\n      { country: 'Germany', users: Math.floor(Math.random() * 25) + 10 },\r\n      { country: 'France', users: Math.floor(Math.random() * 20) + 10 },\r\n      { country: 'Japan', users: Math.floor(Math.random() * 15) + 5 },\r\n      { country: 'Other', users: Math.floor(Math.random() * 40) + 20 },\r\n    ];\r\n    \r\n    return {\r\n      activityData,\r\n      feedbackData,\r\n      featureUsageData,\r\n      deviceBreakdown,\r\n      requestedFeatures,\r\n      geoData,\r\n      summary: {\r\n        activeUsers: {\r\n          current: currentActiveUsers,\r\n          previous: previousActiveUsers\r\n        },\r\n        newUsers: {\r\n          current: currentNewUsers,\r\n          previous: previousNewUsers\r\n        },\r\n        feedbackCount: feedbackData.reduce((sum, item) => sum + item.count, 0),\r\n        surveyResponses: Math.floor(Math.random() * 200) + 50,\r\n        avgSessionDuration: Math.floor(Math.random() * 15) + 5, // minutes\r\n      }\r\n    };\r\n  };\r\n  \r\n  // Get status color\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'planned':\r\n        return colors.info;\r\n      case 'in_progress':\r\n        return colors.success;\r\n      case 'under_review':\r\n        return colors.warning;\r\n      case 'completed':\r\n        return colors.primary;\r\n      default:\r\n        return theme.palette.grey[500];\r\n    }\r\n  };\r\n  \r\n  // Get status label\r\n  const getStatusLabel = (status) => {\r\n    switch (status) {\r\n      case 'planned':\r\n        return 'Planned';\r\n      case 'in_progress':\r\n        return 'In Progress';\r\n      case 'under_review':\r\n        return 'Under Review';\r\n      case 'completed':\r\n        return 'Completed';\r\n      default:\r\n        return status;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {/* Dashboard Header */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Beta Analytics Dashboard\r\n        </Typography>\r\n        \r\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n          {/* Time Range Selector */}\r\n          <FormControl size=\"small\" sx={{ minWidth: 120, mr: 2 }}>\r\n            <InputLabel id=\"time-range-label\">Time Range</InputLabel>\r\n            <Select\r\n              labelId=\"time-range-label\"\r\n              id=\"time-range-select\"\r\n              value={timeRange}\r\n              label=\"Time Range\"\r\n              onChange={handleTimeRangeChange}\r\n            >\r\n              <MenuItem value=\"7days\">Last 7 Days</MenuItem>\r\n              <MenuItem value=\"30days\">Last 30 Days</MenuItem>\r\n              <MenuItem value=\"90days\">Last 90 Days</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          \r\n          {/* Refresh Button */}\r\n          <Button\r\n            startIcon={<RefreshIcon />}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            onClick={loadAnalytics}\r\n            disabled={loading}\r\n          >\r\n            Refresh\r\n          </Button>\r\n          \r\n          {/* Export Button */}\r\n          <Button\r\n            startIcon={<DownloadIcon />}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            sx={{ ml: 1 }}\r\n            disabled={loading}\r\n          >\r\n            Export\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      \r\n      {/* Error message */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {/* Loading State */}\r\n      {loading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>\r\n          <CircularProgress size={60} />\r\n        </Box>\r\n      ) : dashboardData ? (\r\n        <>\r\n          {/* Summary Cards */}\r\n          <Grid container spacing={3} sx={{ mb: 4 }}>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\r\n                    Active Users\r\n                  </Typography>\r\n                  <Box sx={{ display: 'flex', alignItems: 'baseline' }}>\r\n                    <Typography variant=\"h4\" component=\"div\">\r\n                      {formatNumber(dashboardData.summary.activeUsers.current)}\r\n                    </Typography>\r\n                    <TrendIndicator \r\n                      value={dashboardData.summary.activeUsers.current} \r\n                      previousValue={dashboardData.summary.activeUsers.previous} \r\n                    />\r\n                  </Box>\r\n                  <Typography variant=\"caption\" color=\"textSecondary\">\r\n                    vs. previous period\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\r\n                    New Users\r\n                  </Typography>\r\n                  <Box sx={{ display: 'flex', alignItems: 'baseline' }}>\r\n                    <Typography variant=\"h4\" component=\"div\">\r\n                      {formatNumber(dashboardData.summary.newUsers.current)}\r\n                    </Typography>\r\n                    <TrendIndicator \r\n                      value={dashboardData.summary.newUsers.current} \r\n                      previousValue={dashboardData.summary.newUsers.previous} \r\n                    />\r\n                  </Box>\r\n                  <Typography variant=\"caption\" color=\"textSecondary\">\r\n                    vs. previous period\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\r\n                    Feedback Submissions\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" component=\"div\">\r\n                    {formatNumber(dashboardData.summary.feedbackCount)}\r\n                  </Typography>\r\n                  <Typography variant=\"caption\" color=\"textSecondary\">\r\n                    across all categories\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\r\n                    Avg. Session Duration\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" component=\"div\">\r\n                    {dashboardData.summary.avgSessionDuration} min\r\n                  </Typography>\r\n                  <Typography variant=\"caption\" color=\"textSecondary\">\r\n                    time spent per session\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          \r\n          {/* Tabs for different analytics views */}\r\n          <Paper sx={{ mb: 4 }}>\r\n            <Tabs\r\n              value={activeTab}\r\n              onChange={handleTabChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab label=\"User Activity\" />\r\n              <Tab label=\"Feedback Analysis\" />\r\n              <Tab label=\"Feature Usage\" />\r\n              <Tab label=\"User Demographics\" />\r\n            </Tabs>\r\n            \r\n            {/* Tab Content */}\r\n            <Box sx={{ p: 3 }}>\r\n              {/* User Activity Tab */}\r\n              {activeTab === 0 && (\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      User Activity Trends\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 400 }}>\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <LineChart\r\n                          data={dashboardData.activityData}\r\n                          margin={{ top: 20, right: 30, left: 20, bottom: 10 }}\r\n                        >\r\n                          <CartesianGrid strokeDasharray=\"3 3\" />\r\n                          <XAxis \r\n                            dataKey=\"date\" \r\n                            tick={{ fontSize: 12 }}\r\n                          />\r\n                          <YAxis tick={{ fontSize: 12 }} />\r\n                          <RechartsTooltip />\r\n                          <Legend />\r\n                          <Line\r\n                            type=\"monotone\"\r\n                            dataKey=\"activeUsers\"\r\n                            name=\"Active Users\"\r\n                            stroke={colors.primary}\r\n                            activeDot={{ r: 8 }}\r\n                            strokeWidth={2}\r\n                          />\r\n                          <Line\r\n                            type=\"monotone\"\r\n                            dataKey=\"newUsers\"\r\n                            name=\"New Users\"\r\n                            stroke={colors.secondary}\r\n                            strokeWidth={2}\r\n                          />\r\n                          <Line\r\n                            type=\"monotone\"\r\n                            dataKey=\"sessions\"\r\n                            name=\"Sessions\"\r\n                            stroke={colors.info}\r\n                            strokeWidth={2}\r\n                          />\r\n                        </LineChart>\r\n                      </ResponsiveContainer>\r\n                    </Paper>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Device Distribution\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 300 }}>\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <PieChart>\r\n                          <Pie\r\n                            data={dashboardData.deviceBreakdown}\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            labelLine={false}\r\n                            outerRadius={80}\r\n                            fill=\"#8884d8\"\r\n                            dataKey=\"value\"\r\n                            nameKey=\"name\"\r\n                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                          >\r\n                            {dashboardData.deviceBreakdown.map((entry, index) => (\r\n                              <Cell \r\n                                key={`cell-${index}`} \r\n                                fill={colors.pieColors[index % colors.pieColors.length]} \r\n                              />\r\n                            ))}\r\n                          </Pie>\r\n                          <RechartsTooltip />\r\n                          <Legend />\r\n                        </PieChart>\r\n                      </ResponsiveContainer>\r\n                    </Paper>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Geographic Distribution\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 300 }}>\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <BarChart\r\n                          data={dashboardData.geoData}\r\n                          layout=\"vertical\"\r\n                          margin={{ top: 5, right: 30, left: 70, bottom: 5 }}\r\n                        >\r\n                          <CartesianGrid strokeDasharray=\"3 3\" />\r\n                          <XAxis type=\"number\" />\r\n                          <YAxis \r\n                            dataKey=\"country\" \r\n                            type=\"category\" \r\n                            tick={{ fontSize: 12 }}\r\n                          />\r\n                          <RechartsTooltip />\r\n                          <Bar \r\n                            dataKey=\"users\" \r\n                            name=\"Users\" \r\n                            fill={colors.primary}\r\n                          />\r\n                        </BarChart>\r\n                      </ResponsiveContainer>\r\n                    </Paper>\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              \r\n              {/* Feedback Analysis Tab */}\r\n              {activeTab === 1 && (\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Feedback by Category\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 300 }}>\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <PieChart>\r\n                          <Pie\r\n                            data={dashboardData.feedbackData}\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            labelLine={false}\r\n                            outerRadius={80}\r\n                            fill=\"#8884d8\"\r\n                            dataKey=\"count\"\r\n                            nameKey=\"category\"\r\n                            label={({ category, percent }) => `${category}: ${(percent * 100).toFixed(0)}%`}\r\n                          >\r\n                            {dashboardData.feedbackData.map((entry, index) => (\r\n                              <Cell \r\n                                key={`cell-${index}`} \r\n                                fill={colors.pieColors[index % colors.pieColors.length]} \r\n                              />\r\n                            ))}\r\n                          </Pie>\r\n                          <RechartsTooltip />\r\n                          <Legend />\r\n                        </PieChart>\r\n                      </ResponsiveContainer>\r\n                    </Paper>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Top Requested Features\r\n                    </Typography>\r\n                    <TableContainer component={Paper} variant=\"outlined\" sx={{ height: 300 }}>\r\n                      <Table size=\"small\">\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell>Feature Request</TableCell>\r\n                            <TableCell align=\"center\">Votes</TableCell>\r\n                            <TableCell align=\"right\">Status</TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {dashboardData.requestedFeatures.map((row) => (\r\n                            <TableRow key={row.id} hover>\r\n                              <TableCell>{row.feature}</TableCell>\r\n                              <TableCell align=\"center\">{row.votes}</TableCell>\r\n                              <TableCell align=\"right\">\r\n                                <Box sx={{ \r\n                                  display: 'inline-block', \r\n                                  bgcolor: getStatusColor(row.status),\r\n                                  color: '#fff',\r\n                                  px: 1.5,\r\n                                  py: 0.5,\r\n                                  borderRadius: 1,\r\n                                  fontSize: '0.75rem'\r\n                                }}>\r\n                                  {getStatusLabel(row.status)}\r\n                                </Box>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Feedback Sentiment Analysis\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 300 }}>\r\n                      <Box sx={{ \r\n                        display: 'flex', \r\n                        justifyContent: 'center', \r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        height: '100%',\r\n                        color: 'text.secondary'\r\n                      }}>\r\n                        <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n                          Sentiment Analysis Coming Soon\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                          This feature will analyze the sentiment of user feedback to identify trends in user satisfaction.\r\n                        </Typography>\r\n                      </Box>\r\n                    </Paper>\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              \r\n              {/* Feature Usage Tab */}\r\n              {activeTab === 2 && (\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Feature Adoption Rates\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 400 }}>\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <BarChart\r\n                          data={dashboardData.featureUsageData}\r\n                          margin={{ top: 20, right: 30, left: 20, bottom: 10 }}\r\n                        >\r\n                          <CartesianGrid strokeDasharray=\"3 3\" />\r\n                          <XAxis \r\n                            dataKey=\"name\" \r\n                            tick={{ fontSize: 12 }}\r\n                          />\r\n                          <YAxis \r\n                            tick={{ fontSize: 12 }}\r\n                            label={{ \r\n                              value: 'Usage Count', \r\n                              angle: -90, \r\n                              position: 'insideLeft',\r\n                              style: { textAnchor: 'middle' }\r\n                            }}\r\n                          />\r\n                          <RechartsTooltip />\r\n                          <Legend />\r\n                          <Bar \r\n                            dataKey=\"usage\" \r\n                            name=\"Usage Count\" \r\n                            fill={colors.primary}\r\n                          />\r\n                        </BarChart>\r\n                      </ResponsiveContainer>\r\n                    </Paper>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Feature Engagement Over Time\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 300 }}>\r\n                      <Box sx={{ \r\n                        display: 'flex', \r\n                        justifyContent: 'center', \r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        height: '100%',\r\n                        color: 'text.secondary'\r\n                      }}>\r\n                        <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n                          Feature Engagement Timeline Coming Soon\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                          This chart will show how engagement with different features changes over time.\r\n                        </Typography>\r\n                      </Box>\r\n                    </Paper>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Feature Retention Rates\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 300 }}>\r\n                      <Box sx={{ \r\n                        display: 'flex', \r\n                        justifyContent: 'center', \r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        height: '100%',\r\n                        color: 'text.secondary'\r\n                      }}>\r\n                        <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n                          Feature Retention Analysis Coming Soon\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                          This chart will show the percentage of users who continue to use each feature after initial use.\r\n                        </Typography>\r\n                      </Box>\r\n                    </Paper>\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              \r\n              {/* User Demographics Tab */}\r\n              {activeTab === 3 && (\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      User Type Distribution\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 300 }}>\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <PieChart>\r\n                          <Pie\r\n                            data={[\r\n                              { name: 'Consumer', value: 65 },\r\n                              { name: 'Travel Professional', value: 25 },\r\n                              { name: 'Business', value: 10 }\r\n                            ]}\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            labelLine={false}\r\n                            outerRadius={80}\r\n                            fill=\"#8884d8\"\r\n                            dataKey=\"value\"\r\n                            nameKey=\"name\"\r\n                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                          >\r\n                            <Cell fill={colors.primary} />\r\n                            <Cell fill={colors.secondary} />\r\n                            <Cell fill={colors.info} />\r\n                          </Pie>\r\n                          <RechartsTooltip />\r\n                          <Legend />\r\n                        </PieChart>\r\n                      </ResponsiveContainer>\r\n                    </Paper>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      User Engagement Level\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 300 }}>\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <PieChart>\r\n                          <Pie\r\n                            data={[\r\n                              { name: 'High Engagement', value: 30 },\r\n                              { name: 'Medium Engagement', value: 45 },\r\n                              { name: 'Low Engagement', value: 25 }\r\n                            ]}\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            labelLine={false}\r\n                            outerRadius={80}\r\n                            fill=\"#8884d8\"\r\n                            dataKey=\"value\"\r\n                            nameKey=\"name\"\r\n                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                          >\r\n                            <Cell fill={colors.success} />\r\n                            <Cell fill={colors.warning} />\r\n                            <Cell fill={colors.error} />\r\n                          </Pie>\r\n                          <RechartsTooltip />\r\n                          <Legend />\r\n                        </PieChart>\r\n                      </ResponsiveContainer>\r\n                    </Paper>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Geographic Distribution\r\n                    </Typography>\r\n                    <Paper variant=\"outlined\" sx={{ p: 2, height: 400 }}>\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <BarChart\r\n                          data={dashboardData.geoData}\r\n                          margin={{ top: 20, right: 30, left: 20, bottom: 10 }}\r\n                        >\r\n                          <CartesianGrid strokeDasharray=\"3 3\" />\r\n                          <XAxis \r\n                            dataKey=\"country\" \r\n                            tick={{ fontSize: 12 }}\r\n                          />\r\n                          <YAxis tick={{ fontSize: 12 }} />\r\n                          <RechartsTooltip />\r\n                          <Legend />\r\n                          <Bar \r\n                            dataKey=\"users\" \r\n                            name=\"Users\" \r\n                            fill={colors.primary}\r\n                          />\r\n                        </BarChart>\r\n                      </ResponsiveContainer>\r\n                    </Paper>\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n            </Box>\r\n          </Paper>\r\n          \r\n          {/* Notes and Disclaimers */}\r\n          <Paper variant=\"outlined\" sx={{ p: 2, mb: 2 }}>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              <InfoIcon fontSize=\"small\" sx={{ verticalAlign: 'middle', mr: 1 }} />\r\n              This dashboard shows analytics for the beta program. Data is updated daily. For real-time analytics, please use the export feature.\r\n            </Typography>\r\n          </Paper>\r\n        </>\r\n      ) : (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>\r\n          <Typography>No data available</Typography>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AnalyticsDashboard; ","import React, { useState, useEffect, lazy, Suspense } from 'react';\r\nimport { \r\n  Container, \r\n  Box, \r\n  Typography, \r\n  Paper, \r\n  Grid,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  CircularProgress,\r\n  Alert,\r\n  useMediaQuery,\r\n  Chip\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport RegistrationForm from './RegistrationForm';\r\nimport OnboardingFlow from './OnboardingFlow';\r\nimport authService from '../services/AuthService';\r\nimport { Role, Permission, AccessControl } from './auth';\r\nimport { PERMISSIONS, ROLES } from '../services/PermissionsService';\r\nimport { useCurrentPermissions } from '../hooks';\r\nimport axios from 'axios';\r\nimport UserPermissionsCard from './user/UserPermissionsCard';\r\n// Import the feature request components\r\nimport { FeatureRequestBoard } from './feature-request';\r\n// Import the community components\r\nimport { BetaCommunityForum } from './community';\r\n// Placeholder imports for components to be implemented later\r\n// import FeedbackWidget from './FeedbackWidget';\r\n// import SurveyList from './SurveyList';\r\nimport { AnalyticsDashboard } from './analytics';\r\n\r\n// Lazy load FeedbackWidget and AnalyticsDashboard to reduce initial bundle size\r\nconst FeedbackWidget = lazy(() => import('./feedback/FeedbackWidget'));\r\n\r\n/**\r\n * Beta Portal main component\r\n * Provides the main interface for beta testers to register, provide feedback,\r\n * participate in surveys, and view their dashboard.\r\n * Uses RBAC components for conditional rendering.\r\n */\r\nconst BetaPortal = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const { isAdmin, isModerator, isLoading: permissionsLoading } = useCurrentPermissions();\r\n  \r\n  // State\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  const [showOnboarding, setShowOnboarding] = useState(false);\r\n  const [onboardingCode, setOnboardingCode] = useState('');\r\n  const [isAdminState, setIsAdmin] = useState(false);\r\n\r\n  // Configure axios to include the auth token in requests\r\n  useEffect(() => {\r\n    const token = authService.getToken();\r\n    if (token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  // Use AuthService to check authentication status\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const userData = await authService.checkAuthStatus();\r\n        \r\n        if (userData) {\r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n          setIsAdmin(userData.roles && userData.roles.includes('admin'));\r\n          \r\n          // Check if onboarding is needed\r\n          if (userData.needsOnboarding) {\r\n            setShowOnboarding(true);\r\n            // If user registered with a beta code, use it for onboarding\r\n            if (userData.betaCode) {\r\n              setOnboardingCode(userData.betaCode);\r\n            }\r\n          }\r\n          \r\n          // Set up authentication header\r\n          const token = authService.getToken();\r\n          if (token) {\r\n            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n          }\r\n        } else {\r\n          setIsAuthenticated(false);\r\n          setUser(null);\r\n          delete axios.defaults.headers.common['Authorization'];\r\n        }\r\n      } catch (err) {\r\n        console.error('Authentication error:', err);\r\n        setError('Failed to authenticate. Please try again.');\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  // Handle successful registration\r\n  const handleRegisterSuccess = (userData) => {\r\n    setUser(userData);\r\n    setIsAuthenticated(true);\r\n    setIsAdmin(userData.roles && userData.roles.includes('admin'));\r\n    \r\n    // If beta code was used during registration, pass it to onboarding\r\n    if (userData.betaCode) {\r\n      setOnboardingCode(userData.betaCode);\r\n    }\r\n    \r\n    // Show onboarding for new users\r\n    setShowOnboarding(true);\r\n  };\r\n  \r\n  // Handle onboarding completion\r\n  const handleOnboardingComplete = async (data) => {\r\n    try {\r\n      // Update user data after onboarding\r\n      const updatedUser = {\r\n        ...user,\r\n        needsOnboarding: false,\r\n        profile: data.profile,\r\n        preferences: data.preferences\r\n      };\r\n      \r\n      setUser(updatedUser);\r\n      setShowOnboarding(false);\r\n      \r\n      // Refresh user data from server\r\n      const refreshedUser = await authService.refreshUserData();\r\n      if (refreshedUser) {\r\n        setUser(refreshedUser);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error updating user after onboarding:', err);\r\n      // Still hide onboarding flow even if there's an error\r\n      setShowOnboarding(false);\r\n    }\r\n  };\r\n\r\n  // Handle tab change\r\n  const handleTabChange = (event, newValue) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  // Handle logout\r\n  const handleLogout = async () => {\r\n    try {\r\n      await authService.logout();\r\n      setIsAuthenticated(false);\r\n      setUser(null);\r\n      setActiveTab(0);\r\n      delete axios.defaults.headers.common['Authorization'];\r\n    } catch (err) {\r\n      console.error('Logout error:', err);\r\n      setError('Failed to log out. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Show loading state\r\n  if (isLoading || permissionsLoading) {\r\n    return (\r\n      <Container maxWidth=\"md\" sx={{ py: 8, textAlign: 'center' }}>\r\n        <CircularProgress size={60} />\r\n        <Typography variant=\"h6\" sx={{ mt: 2 }}>\r\n          Loading Beta Portal...\r\n        </Typography>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  // Show onboarding flow for new users\r\n  if (isAuthenticated && showOnboarding) {\r\n    return (\r\n      <OnboardingFlow \r\n        initialCode={onboardingCode}\r\n        onComplete={handleOnboardingComplete}\r\n      />\r\n    );\r\n  }\r\n\r\n  // Main portal content\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Box sx={{ my: 4 }}>\r\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom align=\"center\">\r\n          TourGuideAI Beta Program\r\n        </Typography>\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 3 }}>{error}</Alert>\r\n        )}\r\n\r\n        {isAuthenticated ? (\r\n          // Authenticated user view\r\n          <Box>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n              <Box>\r\n                <Typography variant=\"h6\">\r\n                  Welcome, {user.name || user.email}\r\n                </Typography>\r\n                \r\n                <Box sx={{ mt: 1 }}>\r\n                  <Role role={ROLES.ADMIN}>\r\n                    <Chip \r\n                      label=\"Admin\" \r\n                      color=\"error\" \r\n                      size=\"small\" \r\n                      sx={{ mr: 1 }}\r\n                    />\r\n                  </Role>\r\n                  \r\n                  <Role role={ROLES.MODERATOR}>\r\n                    <Chip \r\n                      label=\"Moderator\" \r\n                      color=\"warning\" \r\n                      size=\"small\" \r\n                      sx={{ mr: 1 }}\r\n                    />\r\n                  </Role>\r\n                  \r\n                  <Chip \r\n                    label=\"Beta Tester\" \r\n                    color=\"primary\" \r\n                    size=\"small\" \r\n                  />\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Box>\r\n                <AccessControl role={[ROLES.ADMIN, ROLES.MODERATOR]}>\r\n                  <Button \r\n                    variant=\"outlined\" \r\n                    color=\"primary\" \r\n                    component={Link} \r\n                    to=\"/admin\" \r\n                    sx={{ mr: 2 }}\r\n                  >\r\n                    Admin Panel\r\n                  </Button>\r\n                </AccessControl>\r\n                \r\n                <Button variant=\"outlined\" color=\"primary\" onClick={handleLogout}>\r\n                  Logout\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n\r\n            <Paper elevation={3} sx={{ mb: 4 }}>\r\n              <Tabs \r\n                value={activeTab} \r\n                onChange={handleTabChange} \r\n                variant={isMobile ? \"scrollable\" : \"fullWidth\"}\r\n                scrollButtons={isMobile ? \"auto\" : false}\r\n                centered={!isMobile}\r\n              >\r\n                <Tab label=\"Dashboard\" />\r\n                <Tab label=\"Provide Feedback\" />\r\n                <Tab label=\"Surveys\" />\r\n                <Tab label=\"Feature Requests\" />\r\n                <Tab label=\"Community\" />\r\n                \r\n                {isAdmin && <Tab label=\"Analytics\" />}\r\n                \r\n                <Tab label=\"Resources\" />\r\n              </Tabs>\r\n\r\n              <Box sx={{ p: 3 }}>\r\n                {activeTab === 0 && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Beta Tester Dashboard\r\n                    </Typography>\r\n                    <Grid container spacing={3}>\r\n                      <Grid item xs={12} md={6}>\r\n                        <Paper elevation={2} sx={{ p: 2 }}>\r\n                          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                            User Information\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">\r\n                            <strong>Name:</strong> {user.name}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">\r\n                            <strong>Email:</strong> {user.email}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">\r\n                            <strong>Role:</strong> {user.role}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">\r\n                            <strong>Member Since:</strong> {new Date(user.registrationDate).toLocaleDateString()}\r\n                          </Typography>\r\n                        </Paper>\r\n                      </Grid>\r\n                      <Grid item xs={12} md={6}>\r\n                        <Paper elevation={2} sx={{ p: 2 }}>\r\n                          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                            Beta Activity\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">\r\n                            <strong>Feedback Submitted:</strong> 0\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">\r\n                            <strong>Surveys Completed:</strong> 0\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">\r\n                            <strong>Features Tested:</strong> 0\r\n                          </Typography>\r\n                        </Paper>\r\n                      </Grid>\r\n                      \r\n                      <Grid item xs={12}>\r\n                        <UserPermissionsCard />\r\n                      </Grid>\r\n                      \r\n                      <AccessControl role={[ROLES.ADMIN, ROLES.MODERATOR]}>\r\n                        <Grid item xs={12}>\r\n                          <Paper elevation={2} sx={{ p: 2, bgcolor: isAdmin ? 'error.50' : 'warning.50' }}>\r\n                            <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                              Administrative Tools\r\n                            </Typography>\r\n                            <Box sx={{ mt: 1, display: 'flex', gap: 2 }}>\r\n                              <Permission permission={PERMISSIONS.CREATE_INVITE}>\r\n                                <Button \r\n                                  variant=\"contained\" \r\n                                  size=\"small\" \r\n                                  component={Link} \r\n                                  to=\"/admin/invite-codes\"\r\n                                >\r\n                                  Manage Invite Codes\r\n                                </Button>\r\n                              </Permission>\r\n                              \r\n                              <Role role={ROLES.ADMIN}>\r\n                                <Button \r\n                                  variant=\"contained\" \r\n                                  color=\"error\"\r\n                                  size=\"small\" \r\n                                  component={Link} \r\n                                  to=\"/admin\"\r\n                                >\r\n                                  Admin Dashboard\r\n                                </Button>\r\n                              </Role>\r\n                            </Box>\r\n                          </Paper>\r\n                        </Grid>\r\n                      </AccessControl>\r\n                    </Grid>\r\n                  </Box>\r\n                )}\r\n                {activeTab === 1 && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Provide Your Feedback\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" paragraph>\r\n                      Your feedback is essential for improving TourGuideAI. Please share your thoughts, report bugs, or suggest new features.\r\n                    </Typography>\r\n                    \r\n                    <Grid container spacing={3}>\r\n                      <Grid item xs={12}>\r\n                        <Paper elevation={2} sx={{ p: 3 }}>\r\n                          <Suspense fallback={<CircularProgress />}>\r\n                            <FeedbackWidget />\r\n                          </Suspense>\r\n                        </Paper>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Box>\r\n                )}\r\n                {activeTab === 2 && (\r\n                  <Typography variant=\"body1\">\r\n                    Surveys will be implemented in subsequent tasks.\r\n                  </Typography>\r\n                )}\r\n                {activeTab === 3 && (\r\n                  <Box>\r\n                    <Typography variant=\"body1\" paragraph>\r\n                      Request new features or vote on existing requests to help us prioritize development.\r\n                    </Typography>\r\n                    <FeatureRequestBoard featureService={{}} />\r\n                  </Box>\r\n                )}\r\n                {activeTab === 4 && (\r\n                  <Box sx={{ my: 3 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Connect with other beta testers\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ mb: 2 }}>\r\n                      Discuss features, share ideas, and connect with other beta testers in our community forum.\r\n                    </Typography>\r\n                    <BetaCommunityForum />\r\n                  </Box>\r\n                )}\r\n                {activeTab === 5 && isAdmin && (\r\n                  <Box sx={{ my: 3 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Beta Program Analytics\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ mb: 2 }}>\r\n                      View insights and metrics about the beta program, including user activity, feature usage, and feedback trends.\r\n                    </Typography>\r\n                    <AnalyticsDashboard />\r\n                  </Box>\r\n                )}\r\n                {activeTab === (\r\n                  isAdmin || isModerator ? 6 : 5\r\n                ) && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Beta Program Resources\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" paragraph>\r\n                      Access documentation, guides, and resources for the beta program.\r\n                    </Typography>\r\n                    \r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={12} md={6}>\r\n                        <Paper elevation={2} sx={{ p: 2 }}>\r\n                          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                            Getting Started\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" paragraph>\r\n                            A guide to help you get started with TourGuideAI's beta program.\r\n                          </Typography>\r\n                          <Button size=\"small\" variant=\"outlined\">View Guide</Button>\r\n                        </Paper>\r\n                      </Grid>\r\n                      <Grid item xs={12} md={6}>\r\n                        <Paper elevation={2} sx={{ p: 2 }}>\r\n                          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                            Providing Effective Feedback\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" paragraph>\r\n                            Learn how to provide feedback that helps us improve TourGuideAI.\r\n                          </Typography>\r\n                          <Button size=\"small\" variant=\"outlined\">View Guide</Button>\r\n                        </Paper>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </Paper>\r\n          </Box>\r\n        ) : (\r\n          // Non-authenticated view - Registration Form\r\n          <Box sx={{ mt: 4 }}>\r\n            <Paper elevation={3} sx={{ p: 4 }}>\r\n              <Typography variant=\"h5\" component=\"h2\" gutterBottom align=\"center\">\r\n                Join Our Beta Program\r\n              </Typography>\r\n              <Typography variant=\"body1\" paragraph align=\"center\">\r\n                Get early access to TourGuideAI and help shape the future of travel planning.\r\n              </Typography>\r\n              \r\n              <RegistrationForm onSuccess={handleRegisterSuccess} />\r\n            </Paper>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      \r\n      {/* Floating feedback widget for authenticated users */}\r\n      {isAuthenticated && (\r\n        <Suspense fallback={null}>\r\n          <FeedbackWidget />\r\n        </Suspense>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BetaPortal; ","/**\r\n * Invite Code Service\r\n * Handles invite code management for beta program administrators\r\n */\r\n\r\nimport apiClient from '../../../core/api';\r\nimport { getAuthHeaders } from './AuthService';\r\nimport emailService from './EmailService';\r\n\r\n// Base path for invite code endpoints\r\nconst API_BASE_URL = '/api/invite-codes';\r\n\r\nclass InviteCodeService {\r\n  /**\r\n   * Generate a new invite code\r\n   * @param {Object} options - Options for generating the code\r\n   * @param {boolean} options.sendEmail - Whether to send an email with the code\r\n   * @param {string} options.recipientEmail - Email to send the code to\r\n   * @returns {Promise<Object>} - The generated invite code\r\n   */\r\n  async generateCode(options = {}) {\r\n    try {\r\n      const { sendEmail, recipientEmail } = options;\r\n      \r\n      const response = await apiClient.post(\r\n        `${API_BASE_URL}/generate`, \r\n        { sendEmail, recipientEmail },\r\n        { headers: getAuthHeaders() }\r\n      );\r\n      \r\n      return response.data.inviteCode;\r\n    } catch (error) {\r\n      console.error('Error generating invite code:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all invite codes\r\n   * @returns {Promise<Array>} - List of all invite codes\r\n   */\r\n  async getAllCodes() {\r\n    try {\r\n      const response = await apiClient.get(\r\n        API_BASE_URL,\r\n        { headers: getAuthHeaders() }\r\n      );\r\n      return response.data.codes || [];\r\n    } catch (error) {\r\n      console.error('Error getting invite codes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate an invite code\r\n   * @param {string} code - The code to validate\r\n   * @returns {Promise<boolean>} - Whether the code is valid\r\n   */\r\n  async validateCode(code) {\r\n    try {\r\n      const response = await apiClient.post(\r\n        `${API_BASE_URL}/validate`, \r\n        { code }\r\n      );\r\n      return response.data.valid;\r\n    } catch (error) {\r\n      console.error('Error validating invite code:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalidate an invite code\r\n   * @param {string} code - The code to invalidate\r\n   * @returns {Promise<boolean>} - Whether the operation was successful\r\n   */\r\n  async invalidateCode(code) {\r\n    try {\r\n      const response = await apiClient.post(\r\n        `${API_BASE_URL}/invalidate`, \r\n        { code },\r\n        { headers: getAuthHeaders() }\r\n      );\r\n      return !!response.data.message;\r\n    } catch (error) {\r\n      console.error('Error invalidating invite code:', error);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Send an existing invite code via email\r\n   * @param {string} code - The invite code to send\r\n   * @param {string} email - The recipient's email address\r\n   * @returns {Promise<boolean>} - Whether the email was sent successfully\r\n   */\r\n  async sendInviteCodeEmail(code, email) {\r\n    try {\r\n      const response = await apiClient.post(\r\n        `${API_BASE_URL}/send`, \r\n        { code, email },\r\n        { headers: getAuthHeaders() }\r\n      );\r\n      return response.data.emailSent;\r\n    } catch (error) {\r\n      console.error('Error sending invite code email:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new InviteCodeService(); ","/**\r\n * Email Service\r\n * \r\n * Service for handling email-related operations in the beta program\r\n */\r\n\r\nimport apiClient from '../../../core/services/apiClient';\r\nimport { getAuthHeaders } from './AuthService';\r\n\r\nconst API_BASE_URL = '/api/emails';\r\n\r\n/**\r\n * Request email verification\r\n * \r\n * Resends the verification email to the current user\r\n * \r\n * @returns {Promise<Object>} Response data\r\n */\r\nconst requestEmailVerification = async () => {\r\n  try {\r\n    const response = await apiClient.post(\r\n      `${API_BASE_URL}/resend-verification`,\r\n      {},\r\n      { headers: getAuthHeaders() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error requesting email verification:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Verify email with token\r\n * \r\n * @param {string} token - Email verification token\r\n * @returns {Promise<Object>} Response data with token and user info\r\n */\r\nconst verifyEmail = async (token) => {\r\n  try {\r\n    const response = await apiClient.post(`${API_BASE_URL}/verify`, { token });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error verifying email:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Request password reset\r\n * \r\n * @param {string} email - User's email address\r\n * @returns {Promise<Object>} Response data\r\n */\r\nconst requestPasswordReset = async (email) => {\r\n  try {\r\n    const response = await apiClient.post('/auth/request-password-reset', { email });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error requesting password reset:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Reset password with token\r\n * \r\n * @param {string} token - Password reset token\r\n * @param {string} newPassword - New password\r\n * @returns {Promise<Object>} Response data\r\n */\r\nconst resetPassword = async (token, newPassword) => {\r\n  try {\r\n    const response = await apiClient.post('/auth/reset-password', { token, newPassword });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error resetting password:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send invitation code to email\r\n * \r\n * @param {string} code - Invitation code\r\n * @param {string} email - Recipient email address\r\n * @returns {Promise<Object>} Response data\r\n */\r\nconst sendInviteCode = async (code, email) => {\r\n  try {\r\n    const response = await apiClient.post(\r\n      `${API_BASE_URL}/send-invite`,\r\n      { email, code },\r\n      { headers: getAuthHeaders() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error sending invitation code:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst emailService = {\r\n  requestEmailVerification,\r\n  verifyEmail,\r\n  requestPasswordReset,\r\n  resetPassword,\r\n  sendInviteCode\r\n};\r\n\r\nexport default emailService; "],"names":["_ref","onSuccess","formValues","setFormValues","useState","name","email","password","confirmPassword","betaCode","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","errors","setErrors","formError","setFormError","formSuccess","setFormSuccess","isSubmitting","setIsSubmitting","passwordRequirements","id","label","test","length","checkPasswordRequirements","map","req","fulfilled","handleInputChange","e","value","target","_jsxs","Box","component","onSubmit","async","preventDefault","validateForm","newErrors","trim","filter","Object","keys","authService","validateBetaCode","result","register","setTimeout","error","console","response","data","apiError","type","message","noValidate","children","_jsx","Alert","severity","sx","mb","Grid","container","spacing","item","xs","TextField","fullWidth","onChange","helperText","disabled","required","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","handleTogglePasswordVisibility","edge","VisibilityOff","Visibility","renderPasswordRequirements","requirements","mt","Typography","variant","color","sm","FormHelperText","display","alignItems","handleToggleConfirmPasswordVisibility","Divider","my","inputProps","maxLength","Button","CircularProgress","size","initialCode","code","setCode","setError","isValidating","setIsValidating","isValid","setIsValid","hasAttempted","setHasAttempted","useEffect","formattedCode","toUpperCase","isValidFormat","valid","inviteCodeService","validateCode","err","width","gutterBottom","paragraph","newCode","placeholder","style","textTransform","CheckCircleOutlineIcon","ErrorOutlineIcon","Tooltip","title","HelpOutlineIcon","justifyContent","Link","href","window","open","fontSize","initialData","profile","setProfile","displayName","jobTitle","company","bio","profilePicture","imagePreview","setImagePreview","URL","createObjectURL","prev","flexDirection","Avatar","src","height","border","theme","palette","primary","main","handleRemoveImage","top","right","bgcolor","DeleteIcon","accept","file","files","includes","reader","FileReader","onloadend","readAsDataURL","htmlFor","startIcon","CloudUploadIcon","multiline","rows","preferences","setPreferences","notificationEmail","undefined","dataSharingLevel","tourPreferences","interestTopics","handleTourPreferenceChange","checked","updatedPreferences","pref","FormControl","FormLabel","FormGroup","FormControlLabel","control","Switch","RadioGroup","Radio","level","getDataSharingDescription","row","option","Checkbox","md","Autocomplete","multiple","options","handleInterestTopicsChange","event","newValues","renderTags","getTagProps","index","_createElement","Chip","key","renderInput","params","WelcomeCard","styled","Card","textAlign","padding","marginBottom","background","light","contrastText","BetaFeature","Paper","_ref2","transition","transform","boxShadow","shadows","_ref3","onFinish","betaFeatures","icon","ExploreIcon","description","MapIcon","ForumIcon","EmojiEventsIcon","mr","feature","elevation","align","List","step","ListItem","py","ListItemIcon","CheckCircleIcon","ListItemText","p","borderRadius","FeedbackIcon","OnboardingPaper","marginTop","shape","StepContainer","minHeight","ButtonContainer","_ref4","onComplete","steps","activeStep","setActiveStep","loading","setLoading","success","setSuccess","setBetaCode","userProfile","setUserProfile","validateAndProceed","handleCodeRedemption","handleProfileSetup","profileData","handlePreferencesSetup","preferencesData","handleFinishOnboarding","updateUserProfile","onboardingCompleted","Container","maxWidth","Stepper","Step","StepLabel","CodeRedemptionForm","UserProfileSetup","PreferencesSetup","WelcomeScreen","getStepContent","handleBack","prevStep","handleNext","useCurrentPermissions","permissions","setPermissions","roles","setRoles","isAdmin","setIsAdmin","isModerator","setIsModerator","isBetaTester","setIsBetaTester","isLoading","setIsLoading","permissionsService","initialize","allPermissions","getAllPermissions","allRoles","getAllRoles","fetchPermissions","hasPermission","permission","hasRole","role","hasAnyPermission","permissionList","hasAllPermissions","UserPermissionsCard","groupedPermissions","forEach","category","split","push","SecurityIcon","verticalAlign","gap","VerifiedUserIcon","GppBadIcon","dense","entries","perms","minWidth","LockIcon","primaryTypographyProps","featureService","CATEGORIES","STATUSES","REQUESTED","UNDER_REVIEW","PLANNED","IN_PROGRESS","IMPLEMENTED","REJECTED","features","setFeatures","activeTab","setActiveTab","showAddDialog","setShowAddDialog","sortBy","setSortBy","filters","setFilters","status","newFeature","setNewFeature","tags","formErrors","setFormErrors","loadFeatures","votes","comments","userVoted","createdBy","avatar","createdAt","updatedAt","handleOpenAddDialog","handleCloseAddDialog","handleFeatureInputChange","handleFilterChange","getStatusIcon","ImplementedIcon","PlannedIcon","RejectedIcon","getStatusLabel","getStatusColor","filteredFeatures","sortedFeatures","sort","a","b","Date","Dialog","onClose","DialogTitle","DialogContent","InputLabel","Select","labelId","MenuItem","onKeyUp","endsWith","tag","slice","flexWrap","onDelete","t","handleRemoveTag","DialogActions","mockNewFeature","now","toISOString","AddIcon","borderBottom","borderColor","Tabs","handleTabChange","newValue","Tab","FilterIcon","values","zIndex","borderRight","featureId","handleVote","ArrowUpIcon","fontWeight","CardContent","LabelIcon","alt","mx","dateString","toLocaleDateString","year","month","day","CommentIcon","BetaCommunityForum","discussions","setDiscussions","searchQuery","setSearchQuery","sortOption","setSortOption","menuAnchorEl","setMenuAnchorEl","selectedDiscussion","setSelectedDiscussion","showCreateDialog","setShowCreateDialog","newDiscussion","setNewDiscussion","content","loadDiscussions","author","upvotes","commentCount","pinned","bookmarked","handleMenuClose","handleBookmark","discussionId","disc","handleSortChange","handleCreateDialogOpen","handleCreateDialogClose","handleNewDiscussionChange","filteredDiscussions","discussion","query","toLowerCase","some","sortedDiscussions","handleCreateDiscussion","newDiscussionObj","startAdornment","SearchIcon","endIcon","SortIcon","currentTarget","Menu","anchorEl","Boolean","handleMenuOpen","MoreVertIcon","ListItemAvatar","ThumbUpIcon","handleUpvote","ml","BookmarkedIcon","BookmarkIcon","mockData","userActivity","date","count","featureUsage","usage","growth","feedbackSentiment","positive","neutral","negative","retentionData","week","rate","geographicData","region","users","deviceData","percentage","browserData","issueData","resolved","anomalyThresholds","initGA4","log","this","setupEventListeners","addEventListener","trackEvent","page_title","document","page_location","location","page_path","pathname","tagName","getAttribute","button_id","button_text","innerText","eventName","eventParams","arguments","gtag","getUserActivity","days","Error","getFeatureUsage","limit","getFeedbackSentiment","getRetentionData","getGeographicData","getDeviceData","getBrowserData","getIssueData","detectAnomalies","anomalies","i","prevCount","percentChange","Math","abs","toFixed","feedbackData","total","negativePercentage","exportData","format","allData","exportDate","exportFormat","filename","contentType","AnalyticsDashboard","useTheme","setUserActivity","setFeatureUsage","setFeedbackSentiment","setRetentionData","setGeographicData","setDeviceData","setBrowserData","setIssueData","setAnomalies","setExportFormat","timeRange","setTimeRange","dashboardData","setDashboardData","colors","secondary","warning","info","pieColors","adminStatus","analyticsService","loadDashboardData","checkAdmin","userActivityData","featureUsageData","feedbackSentimentData","anomaliesData","Promise","all","loadAnalytics","generateMockData","formatNumber","num","TrendIndicator","previousValue","isPositive","TrendUpIcon","TrendDownIcon","activityData","Array","from","_","setDate","getDate","activeUsers","floor","random","newUsers","sessions","currentActiveUsers","reduce","sum","currentNewUsers","previousActiveUsers","previousNewUsers","deviceBreakdown","requestedFeatures","geoData","country","summary","current","previous","feedbackCount","surveyResponses","avgSessionDuration","grey","RefreshIcon","DownloadIcon","_Fragment","indicatorColor","textColor","ResponsiveContainer","LineChart","margin","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","YAxis","RechartsTooltip","Legend","Line","stroke","activeDot","r","strokeWidth","PieChart","Pie","cx","cy","labelLine","outerRadius","fill","nameKey","percent","entry","Cell","BarChart","layout","Bar","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","hover","px","angle","textAnchor","_ref5","InfoIcon","FeedbackWidget","lazy","BetaPortal","isMobile","useMediaQuery","breakpoints","down","permissionsLoading","isAuthenticated","setIsAuthenticated","user","setUser","showOnboarding","setShowOnboarding","onboardingCode","setOnboardingCode","isAdminState","token","getToken","axios","defaults","headers","common","userData","checkAuthStatus","needsOnboarding","handleOnboardingComplete","updatedUser","refreshedUser","refreshUserData","OnboardingFlow","Role","ROLES","ADMIN","MODERATOR","AccessControl","to","logout","scrollButtons","centered","registrationDate","Permission","PERMISSIONS","CREATE_INVITE","Suspense","fallback","FeatureRequestBoard","RegistrationForm","API_BASE_URL","generateCode","sendEmail","recipientEmail","apiClient","post","getAuthHeaders","inviteCode","getAllCodes","get","codes","invalidateCode","sendInviteCodeEmail","emailSent","requestEmailVerification","verifyEmail","requestPasswordReset","resetPassword","newPassword","sendInviteCode"],"sourceRoot":""}