{"version":3,"file":"static/js/805.3653f07b.chunk.js","mappings":"2YAQA,MAAMA,EAAgB,GAChBC,EAAqB,CACzB,MACA,kBACA,iBACA,oBACA,gBACA,WAOIC,EAAmB,CACvB,IAAO,CAAC,MAAO,QAAS,SAAU,cAAe,QAAS,UAAW,QAAS,aAC9E,kBAAmB,CAAC,UAAW,MAAO,MAAO,aAAc,OAAQ,UAAW,WAC9E,iBAAkB,CAAC,KAAM,KAAM,YAAa,SAAU,SAAU,YAAa,UAAW,aACxF,oBAAqB,CAAC,OAAQ,cAAe,MAAO,OAAQ,UAAW,gBAAiB,WACxF,cAAiB,CAAC,OAAQ,gBAAiB,eAAgB,OAAQ,WAAY,UAAW,SAC1F,QAAW,CAAC,WAAY,UAAW,aAAc,UAAW,YAsO9D,MAEA,EAFwB,IAnOxB,MAME,oBAAMC,CAAeC,GACnB,IAEE,MAAMC,QAAaC,EAAAA,EAAYC,kBAC/B,IAAKF,EACH,MAAM,IAAIG,MAAM,iDAIlB,MAAMC,EAAa,YAAYC,KAAKC,SAASC,KAAKC,MAAsB,IAAhBD,KAAKE,YAGvDC,EAAWC,KAAKC,mBAAmBb,EAAac,SAGhDC,EAAe,CACnBC,GAAIX,EACJY,OAAQhB,EAAKe,GACbE,UAAWjB,EAAKkB,MAChBC,KAAMpB,EAAaoB,MAAQ,UAC3BT,SAAUA,EACVG,QAASd,EAAac,QACtBO,UAAWT,KAAKU,iBAAiBtB,EAAac,SAC9CS,WAAYvB,EAAauB,YAAc,KACvCC,SAAU,CACRC,QAASb,KAAKc,iBACdC,IAAKC,OAAOC,SAASC,KACrBC,WAAW,IAAIzB,MAAO0B,cACtBC,WAAYC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,qCAAAA,qBAAAA,kBAAAA,4BAAAA,+BAAAA,OAAAA,yBAAAA,mCAAAA,uBAAAA,8BAAAA,2BAAAA,OAAAA,4BAAAA,OAAAA,0BAAAA,OAAAA,8BAAAA,OAAAA,yBAAAA,OAAAA,8BAAAA,GAAAA,yBAAAA,2BAAAA,+BAAAA,KAAAA,yBAAAA,GAAAA,2BAAAA,QAAYC,mBAAqB,SAE/CC,OAAQ,OAUV,OALAxC,EAAcyC,KAAKtB,GAGnBuB,QAAQC,IAAI,sBAAuBxB,GAE5BA,CACT,CAAE,MAAOyB,GAEP,MADAF,QAAQE,MAAM,6BAA8BA,GACtCA,CACR,CACF,CAMA,qBAAMC,GACJ,IACE,MAAMxC,QAAaC,EAAAA,EAAYC,kBAC/B,OAAKF,EAKEL,EAAc8C,QAAOC,GAAQA,EAAK1B,SAAWhB,EAAKe,KAJhD,EAKX,CAAE,MAAOwB,GAEP,OADAF,QAAQE,MAAM,gCAAiCA,GACxC,EACT,CACF,CAMA,oBAAMI,GACJ,IACE,MAAM3C,QAAaC,EAAAA,EAAYC,kBACzB0C,QAAgB3C,EAAAA,EAAY2C,UAElC,IAAK5C,IAAS4C,EACZ,MAAM,IAAIzC,MAAM,yBAGlB,OAAOR,CACT,CAAE,MAAO4C,GAEP,MADAF,QAAQE,MAAM,+BAAgCA,GACxCA,CACR,CACF,CAOA3B,kBAAAA,CAAmBC,GACjB,IAAKA,EAAS,MAAO,UAErB,MAAMgC,EAAehC,EAAQiC,cAGvBC,EAAS,CAAC,EAEhB,IAAK,MAAOrC,EAAUsC,KAAaC,OAAOC,QAAQrD,GAAmB,CACnEkD,EAAOrC,GAAY,EAEnB,IAAK,MAAMyC,KAAWH,EAChBH,EAAaO,SAASD,EAAQL,iBAChCC,EAAOrC,IAAa,EAG1B,CAGA,IAAI2C,EAAW,EACXC,EAAc,UAElB,IAAK,MAAO5C,EAAU6C,KAAUN,OAAOC,QAAQH,GACzCQ,EAAQF,IACVA,EAAWE,EACXD,EAAc5C,GAIlB,OAAO4C,CACT,CAQAjC,gBAAAA,CAAiBR,GACf,IAAKA,EAAS,MAAO,UAErB,MAAMgC,EAAehC,EAAQiC,cAEvBU,EAAgB,CAAC,OAAQ,QAAS,YAAa,UAAW,UAAW,OAAQ,OAAQ,QACrFC,EAAgB,CAAC,MAAO,OAAQ,WAAY,QAAS,QAAS,OAAQ,YAAa,eAEzF,IAAIC,EAAgB,EAChBC,EAAgB,EAEpB,IAAK,MAAMC,KAAQJ,EACbX,EAAaO,SAASQ,IAAOF,IAGnC,IAAK,MAAME,KAAQH,EACbZ,EAAaO,SAASQ,IAAOD,IAGnC,OAAID,EAAgBC,EAAsB,WACtCA,EAAgBD,EAAsB,WACnC,SACT,CAMAjC,cAAAA,GACE,MAAMoC,EAAYC,UAAUD,UAC5B,IAAIE,EAAc,UAgBlB,OAZIF,EAAUG,MAAM,0BAClBD,EAAc,SACLF,EAAUG,MAAM,kBACzBD,EAAc,UACLF,EAAUG,MAAM,WACzBD,EAAc,SACLF,EAAUG,MAAM,UACzBD,EAAc,QACLF,EAAUG,MAAM,UACzBD,EAAc,QAGT,CACLE,KAAMF,EACNF,UAAWA,EACXK,SAAUJ,UAAUI,SACpBC,SAAUL,UAAUK,SACpBC,WAAY,GAAGzC,OAAO0C,OAAOC,SAAS3C,OAAO0C,OAAOE,SAExD,CAMAC,aAAAA,GACE,OAAO5E,CACT,CAQA,0BAAM6E,CAAqBrE,EAAY+B,GACrC,IAEE,UADsBlC,EAAAA,EAAY2C,UAEhC,MAAM,IAAIzC,MAAM,yBAGlB,MAAMuE,EAAgB/E,EAAcgF,WAAUjC,GAAQA,EAAK3B,KAAOX,IAClE,IAAuB,IAAnBsE,EACF,MAAM,IAAIvE,MAAM,sBAKlB,OAFAR,EAAc+E,GAAevC,OAASA,EAE/BxC,EAAc+E,EACvB,CAAE,MAAOnC,GAEP,MADAF,QAAQE,MAAM,kCAAmCA,GAC3CA,CACR,CACF,G,kCC7NF,MA2XA,EA3XuBqC,KAErB,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,IAC9BC,EAAYC,IAAiBF,EAAAA,EAAAA,WAAS,IACtCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAChCxC,EAAO+C,IAAYP,EAAAA,EAAAA,UAAS,OAC5BQ,EAAcC,IAAmBT,EAAAA,EAAAA,UAAS,YAC1CU,EAAcC,IAAmBX,EAAAA,EAAAA,UAAS,KAC1CY,EAAgBC,IAAqBb,EAAAA,EAAAA,UAAS,OAC9Cc,EAAuBC,IAA4Bf,EAAAA,EAAAA,WAAS,GAG7DgB,GAAYC,EAAAA,EAAAA,QAAO,MAYnBC,EAAeA,KACnBnB,GAAWD,GACNA,IACHI,GAAc,GACdS,EAAgB,IAChBF,EAAgB,WAChBI,EAAkB,MAClBN,EAAS,MACTD,GAAW,GACb,EA2FIa,EAAqBA,KACzBb,GAAW,EAAM,EAIbc,EAAmBA,KACvBb,EAAS,KAAK,EAGhB,OACEc,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFC,IAAKP,EACLQ,GAAI,CACFC,SAAU,QACVC,OAAQ,OACRC,MAAO,OACPC,OAAQ,KACRC,SAAA,EAGFC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CACPC,KAAM3B,EACN4B,iBAAkB,IAClBC,QAASf,EACTgB,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAAWR,UAE3DC,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACJJ,QAASf,EACToB,SAAS,UACTf,GAAI,CAAEjC,MAAO,QAASsC,SACvB,wCAMHC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CACPC,OAAQxE,EACRyE,iBAAkB,IAClBC,QAASd,EACTe,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAAWR,UAE3DC,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACJJ,QAASd,EACTmB,SAAS,QACTf,GAAI,CAAEjC,MAAO,QAASsC,SAErBrE,OAKLsE,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CAACC,GAAI3C,EAAO+B,UACfR,EAAAA,EAAAA,MAACqB,EAAAA,EAAK,CACJC,UAAW,EACXnB,GAAI,CACFjC,MAAO,IACPqD,GAAI,EACJC,SAAU,SACVC,QAAShD,EAAS,QAAU,QAC5B+B,SAAA,EAGFR,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFE,GAAI,CACFsB,QAAS,OACTC,WAAY,SACZC,eAAgB,gBAChBC,QAAS,eACTC,MAAO,uBACPC,GAAI,EACJC,GAAI,GACJvB,SAAA,EAEFC,EAAAA,EAAAA,KAACuB,EAAAA,EAAU,CAACC,QAAQ,YAAWzB,SAAC,sBAGhCC,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,CACTC,KAAK,QACLC,QAASvC,EACTM,GAAI,CAAE0B,MAAO,wBAAyBrB,UAEtCC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,UAKdrC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAI,CAAEmC,EAAG,GAAI9B,SAAA,EAChBR,EAAAA,EAAAA,MAACuC,EAAAA,EAAW,CACVC,WAAS,EACTP,QAAQ,WACRQ,OAAO,SACPN,KAAK,QAAO3B,SAAA,EAEZC,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,CAAC/H,GAAG,sBAAqB6F,SAAC,mBACrCC,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CACLC,QAAQ,sBACRjI,GAAG,gBACHkI,MAAO1D,EACP2D,SArLYC,IACxB3D,EAAgB2D,EAAMC,OAAOH,MAAM,EAqLvBI,MAAM,gBACNC,SAAUpE,EAAQ0B,SAlNV,CACpB,CAAEqC,MAAO,UAAWI,MAAO,oBAC3B,CAAEJ,MAAO,MAAOI,MAAO,gBACvB,CAAEJ,MAAO,UAAWI,MAAO,mBAC3B,CAAEJ,MAAO,KAAMI,MAAO,mBACtB,CAAEJ,MAAO,cAAeI,MAAO,sBA+MJE,KAAKpI,IAClB0F,EAAAA,EAAAA,KAAC2C,EAAAA,EAAQ,CAAkBP,MAAO9H,EAAK8H,MAAMrC,SAC1CzF,EAAKkI,OADOlI,EAAK8H,eAO1BpC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAS,CACRb,WAAS,EACTc,WAAS,EACTC,KAAM,EACNd,OAAO,SACPQ,MAAM,gBACNO,YAAY,4BACZX,MAAOxD,EACPyD,SApMcC,IACxBzD,EAAgByD,EAAMC,OAAOH,MAAM,EAoMzBK,SAAUpE,IAIXS,IACCS,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFE,GAAI,CACFsD,GAAI,EACJrD,SAAU,WACVlC,MAAO,OACPC,OAAQ,IACRuF,aAAc,EACdlC,SAAU,UACVhB,SAAA,EAEFC,EAAAA,EAAAA,KAAA,OACEkD,IAAKpE,EACLqE,IAAI,aACJC,MAAO,CACL3F,MAAO,OACPC,OAAQ,OACR2F,UAAW,YAGfrD,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,CACTC,KAAK,QACLhC,GAAI,CACFC,SAAU,WACV2D,IAAK,EACLzD,MAAO,EACPsB,QAAS,qBACTC,MAAO,QACP,UAAW,CACTD,QAAS,uBAGbQ,QAnMS4B,KACvBxE,EAAkB,KAAK,EAkMiBgB,UAE1BC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CAAC4B,SAAS,gBAM1BjE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAI,CAAEsD,GAAI,GAAIjD,SAAA,EACjBR,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFmC,QA7PS8B,KACrBrF,GAAeD,EAAW,EA6PduB,GAAI,CACFsB,QAAS,OACTC,WAAY,SACZyC,OAAQ,UACRtC,MAAO,kBACPrB,SAAA,EAEFC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAc,CACbjE,GAAI,CACFkE,UAAWzF,EAAa,iBAAmB,YAC3C0F,WAAY,qBAGhB7D,EAAAA,EAAAA,KAACuB,EAAAA,EAAU,CAACC,QAAQ,QAAOzB,SAAC,yBAK9BC,EAAAA,EAAAA,KAAC8D,EAAAA,EAAQ,CAACnD,GAAIxC,EAAW4B,UACvBC,EAAAA,EAAAA,KAACR,EAAAA,EAAG,CAACE,GAAI,CAAEsD,GAAI,EAAGhC,QAAS,OAAQ+C,IAAK,GAAIhE,UAC1CC,EAAAA,EAAAA,KAACgE,EAAAA,EAAO,CAACC,MAAM,kBAAiBlE,UAC9BC,EAAAA,EAAAA,KAACkE,EAAAA,EAAM,CACL1C,QAAQ,WACRE,KAAK,QACLyC,WAAWnE,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,IACtBzC,QAxQM0C,UACxB,IACEpF,GAAyB,GAGrBC,EAAUoF,UACZpF,EAAUoF,QAAQlB,MAAMpC,QAAU,QAIpC,MACMvG,SADe8J,IAAYC,SAASC,OAChBC,UAAU,aAGhCxF,EAAUoF,UACZpF,EAAUoF,QAAQlB,MAAMpC,QAAU,SAGpCjC,EAAkBtE,GAClBwE,GAAyB,EAC3B,CAAE,MAAOvD,GACPF,QAAQE,MAAM,8BAA+BA,GAC7C+C,EAAS,mDACTQ,GAAyB,GAGrBC,EAAUoF,UACZpF,EAAUoF,QAAQlB,MAAMpC,QAAU,QAEtC,GA4OkByB,SAAUpE,GAAWW,EAAsBe,SAE1Cf,GACCgB,EAAAA,EAAAA,KAAC2E,EAAAA,EAAgB,CAACjD,KAAM,KAExB,yBASZ1B,EAAAA,EAAAA,KAACR,EAAAA,EAAG,CACFE,GAAI,CACFsD,GAAI,EACJhC,QAAS,OACTE,eAAgB,YAChBnB,UAEFC,EAAAA,EAAAA,KAACkE,EAAAA,EAAM,CACL1C,QAAQ,YACRJ,MAAM,UACNwD,QAASvG,GAAU2B,EAAAA,EAAAA,KAAC2E,EAAAA,EAAgB,CAACjD,KAAM,GAAIN,MAAM,aAAepB,EAAAA,EAAAA,KAAC6E,EAAAA,EAAQ,IAC7ElD,QA5PS0C,UACrB,GAAKzF,EAAakG,OAKlB,IACExG,GAAW,GACXG,EAAS,YAEHsG,EAAgB9L,eAAe,CACnCqB,KAAMoE,EACN1E,QAAS4E,EACTnE,WAAYqE,IAGdN,GAAW,GACXK,EAAgB,IAChBE,EAAkB,MAGlBiG,YAAW,KACT/G,GAAU,GACVO,GAAW,EAAM,GAChB,IACL,CAAE,MAAO9C,GACPF,QAAQE,MAAM,6BAA8BA,GAC5C+C,EAAS/C,EAAMuJ,SAAW,+CAC5B,CAAC,QACC3G,GAAW,EACb,MA5BEG,EAAS,+BA4BX,EA+NYgE,SAAUpE,IAAYO,EAAakG,OAAO/E,SAC3C,sBASTC,EAAAA,EAAAA,KAACgE,EAAAA,EAAO,CAACC,MAAOjG,EAAS,iBAAmB,mBAAmB+B,UAC7DC,EAAAA,EAAAA,KAACkE,EAAAA,EAAM,CACL1C,QAAQ,YACRJ,MAAM,UACN,aAAW,WACXO,QAASvC,EACT+E,WAAWnE,EAAAA,EAAAA,KAACkF,EAAAA,EAAY,IACxBxF,GAAI,CACFuD,aAAc,MACdkC,SAAU,OACV1H,MAAO,OACPC,OAAQ,OACRmE,EAAG,EACH,yBAA0B,CACxBG,OAAQ,IAEVjC,UAEFC,EAAAA,EAAAA,KAAA,QAAMoF,UAAU,UAASrF,SAAC,mBAG1B,C","sources":["features/beta-program/services/feedback/FeedbackService.js","features/beta-program/components/feedback/FeedbackWidget.jsx"],"sourcesContent":["/**\r\n * Feedback Service for Beta Program\r\n * Handles feedback collection, categorization, and management.\r\n */\r\n\r\nimport authService from '../../services/AuthService';\r\n\r\n// In-memory storage for feedback items (would use API in production)\r\nconst feedbackItems = [];\r\nconst feedbackCategories = [\r\n  'bug', \r\n  'feature-request', \r\n  'ux-improvement', \r\n  'performance-issue', \r\n  'documentation',\r\n  'general'\r\n];\r\n\r\n/**\r\n * Simple ML-based categorization using keyword matching\r\n * In a real implementation, this would use a proper ML model or API\r\n */\r\nconst categoryKeywords = {\r\n  'bug': ['bug', 'error', 'broken', 'not working', 'issue', 'problem', 'crash', 'exception'],\r\n  'feature-request': ['feature', 'add', 'new', 'would like', 'wish', 'missing', 'enhance'],\r\n  'ux-improvement': ['ui', 'ux', 'interface', 'design', 'layout', 'confusing', 'unclear', 'difficult'],\r\n  'performance-issue': ['slow', 'performance', 'lag', 'fast', 'loading', 'response time', 'timeout'],\r\n  'documentation': ['docs', 'documentation', 'instructions', 'help', 'tutorial', 'explain', 'guide'],\r\n  'general': ['feedback', 'comment', 'suggestion', 'opinion', 'thought']\r\n};\r\n\r\nclass FeedbackService {\r\n  /**\r\n   * Submit new feedback\r\n   * @param {Object} feedbackData - Feedback data from user\r\n   * @returns {Promise<Object>} - The saved feedback item\r\n   */\r\n  async submitFeedback(feedbackData) {\r\n    try {\r\n      // Verify user is authenticated\r\n      const user = await authService.checkAuthStatus();\r\n      if (!user) {\r\n        throw new Error('User must be authenticated to submit feedback');\r\n      }\r\n      \r\n      // Generate a unique ID for the feedback\r\n      const feedbackId = `feedback_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\r\n      \r\n      // Auto-categorize the feedback\r\n      const category = this.categorizeFeedback(feedbackData.content);\r\n      \r\n      // Create the feedback item\r\n      const feedbackItem = {\r\n        id: feedbackId,\r\n        userId: user.id,\r\n        userEmail: user.email,\r\n        type: feedbackData.type || 'general',\r\n        category: category,\r\n        content: feedbackData.content,\r\n        sentiment: this.analyzeSentiment(feedbackData.content),\r\n        screenshot: feedbackData.screenshot || null,\r\n        metadata: {\r\n          browser: this.getBrowserInfo(),\r\n          url: window.location.href,\r\n          timestamp: new Date().toISOString(),\r\n          appVersion: process.env.REACT_APP_VERSION || '0.0.0'\r\n        },\r\n        status: 'new'\r\n      };\r\n      \r\n      // In a real implementation, this would be an API call\r\n      // For now, we'll store it in memory\r\n      feedbackItems.push(feedbackItem);\r\n      \r\n      // Log feedback submission\r\n      console.log('Feedback submitted:', feedbackItem);\r\n      \r\n      return feedbackItem;\r\n    } catch (error) {\r\n      console.error('Feedback submission error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get feedback items for the current user\r\n   * @returns {Promise<Array>} - List of feedback items\r\n   */\r\n  async getUserFeedback() {\r\n    try {\r\n      const user = await authService.checkAuthStatus();\r\n      if (!user) {\r\n        return [];\r\n      }\r\n      \r\n      // Filter feedback by user ID\r\n      return feedbackItems.filter(item => item.userId === user.id);\r\n    } catch (error) {\r\n      console.error('Error fetching user feedback:', error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get all feedback items (admin only)\r\n   * @returns {Promise<Array>} - List of all feedback items\r\n   */\r\n  async getAllFeedback() {\r\n    try {\r\n      const user = await authService.checkAuthStatus();\r\n      const isAdmin = await authService.isAdmin();\r\n      \r\n      if (!user || !isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      return feedbackItems;\r\n    } catch (error) {\r\n      console.error('Error fetching all feedback:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Categorize feedback using keyword matching\r\n   * @param {string} content - Feedback content\r\n   * @returns {string} - Category\r\n   */\r\n  categorizeFeedback(content) {\r\n    if (!content) return 'general';\r\n    \r\n    const contentLower = content.toLowerCase();\r\n    \r\n    // Calculate score for each category based on keyword matches\r\n    const scores = {};\r\n    \r\n    for (const [category, keywords] of Object.entries(categoryKeywords)) {\r\n      scores[category] = 0;\r\n      \r\n      for (const keyword of keywords) {\r\n        if (contentLower.includes(keyword.toLowerCase())) {\r\n          scores[category] += 1;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Find category with the highest score\r\n    let maxScore = 0;\r\n    let maxCategory = 'general';\r\n    \r\n    for (const [category, score] of Object.entries(scores)) {\r\n      if (score > maxScore) {\r\n        maxScore = score;\r\n        maxCategory = category;\r\n      }\r\n    }\r\n    \r\n    return maxCategory;\r\n  }\r\n  \r\n  /**\r\n   * Simple sentiment analysis (positive, negative, neutral)\r\n   * In a real implementation, this would use a proper sentiment analysis API\r\n   * @param {string} content - Feedback content\r\n   * @returns {string} - Sentiment\r\n   */\r\n  analyzeSentiment(content) {\r\n    if (!content) return 'neutral';\r\n    \r\n    const contentLower = content.toLowerCase();\r\n    \r\n    const positiveWords = ['good', 'great', 'excellent', 'amazing', 'awesome', 'like', 'love', 'best'];\r\n    const negativeWords = ['bad', 'poor', 'terrible', 'awful', 'worst', 'hate', 'difficult', 'not working'];\r\n    \r\n    let positiveScore = 0;\r\n    let negativeScore = 0;\r\n    \r\n    for (const word of positiveWords) {\r\n      if (contentLower.includes(word)) positiveScore++;\r\n    }\r\n    \r\n    for (const word of negativeWords) {\r\n      if (contentLower.includes(word)) negativeScore++;\r\n    }\r\n    \r\n    if (positiveScore > negativeScore) return 'positive';\r\n    if (negativeScore > positiveScore) return 'negative';\r\n    return 'neutral';\r\n  }\r\n  \r\n  /**\r\n   * Get browser information\r\n   * @returns {Object} - Browser information\r\n   */\r\n  getBrowserInfo() {\r\n    const userAgent = navigator.userAgent;\r\n    let browserName = 'Unknown';\r\n    let browserVersion = 'Unknown';\r\n    \r\n    // Extract browser information from user agent\r\n    if (userAgent.match(/chrome|chromium|crios/i)) {\r\n      browserName = 'Chrome';\r\n    } else if (userAgent.match(/firefox|fxios/i)) {\r\n      browserName = 'Firefox';\r\n    } else if (userAgent.match(/safari/i)) {\r\n      browserName = 'Safari';\r\n    } else if (userAgent.match(/opr\\//i)) {\r\n      browserName = 'Opera';\r\n    } else if (userAgent.match(/edg/i)) {\r\n      browserName = 'Edge';\r\n    }\r\n    \r\n    return {\r\n      name: browserName,\r\n      userAgent: userAgent,\r\n      platform: navigator.platform,\r\n      language: navigator.language,\r\n      screenSize: `${window.screen.width}x${window.screen.height}`\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Get available feedback categories\r\n   * @returns {Array} - List of categories\r\n   */\r\n  getCategories() {\r\n    return feedbackCategories;\r\n  }\r\n  \r\n  /**\r\n   * Update feedback status (admin only)\r\n   * @param {string} feedbackId - Feedback ID\r\n   * @param {string} status - New status\r\n   * @returns {Promise<Object>} - Updated feedback\r\n   */\r\n  async updateFeedbackStatus(feedbackId, status) {\r\n    try {\r\n      const isAdmin = await authService.isAdmin();\r\n      if (!isAdmin) {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      const feedbackIndex = feedbackItems.findIndex(item => item.id === feedbackId);\r\n      if (feedbackIndex === -1) {\r\n        throw new Error('Feedback not found');\r\n      }\r\n      \r\n      feedbackItems[feedbackIndex].status = status;\r\n      \r\n      return feedbackItems[feedbackIndex];\r\n    } catch (error) {\r\n      console.error('Error updating feedback status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst feedbackService = new FeedbackService();\r\n\r\nexport default feedbackService; ","import React, { useState, useRef } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Typography,\r\n  Paper,\r\n  IconButton,\r\n  Tooltip,\r\n  CircularProgress,\r\n  Snackbar,\r\n  Alert,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Collapse,\r\n  Fade\r\n} from '@mui/material';\r\nimport {\r\n  Close as CloseIcon,\r\n  Feedback as FeedbackIcon,\r\n  Camera as CameraIcon,\r\n  Send as SendIcon,\r\n  ExpandMore as ExpandMoreIcon\r\n} from '@mui/icons-material';\r\nimport feedbackService from '../../services/feedback/FeedbackService';\r\nimport html2canvas from 'html2canvas';\r\n\r\n/**\r\n * Feedback Widget component\r\n * Provides a floating button that expands into a feedback form\r\n */\r\nconst FeedbackWidget = () => {\r\n  // State\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [feedbackType, setFeedbackType] = useState('general');\r\n  const [feedbackText, setFeedbackText] = useState('');\r\n  const [screenshotData, setScreenshotData] = useState(null);\r\n  const [isCapturingScreenshot, setIsCapturingScreenshot] = useState(false);\r\n  \r\n  // Refs\r\n  const widgetRef = useRef(null);\r\n  \r\n  // Feedback types\r\n  const feedbackTypes = [\r\n    { value: 'general', label: 'General Feedback' },\r\n    { value: 'bug', label: 'Report a Bug' },\r\n    { value: 'feature', label: 'Feature Request' },\r\n    { value: 'ux', label: 'User Experience' },\r\n    { value: 'performance', label: 'Performance Issue' }\r\n  ];\r\n  \r\n  // Toggle widget open/closed\r\n  const toggleWidget = () => {\r\n    setIsOpen(!isOpen);\r\n    if (!isOpen) {\r\n      setIsExpanded(false);\r\n      setFeedbackText('');\r\n      setFeedbackType('general');\r\n      setScreenshotData(null);\r\n      setError(null);\r\n      setSuccess(false);\r\n    }\r\n  };\r\n  \r\n  // Toggle expanded view\r\n  const toggleExpanded = () => {\r\n    setIsExpanded(!isExpanded);\r\n  };\r\n  \r\n  // Handle feedback type change\r\n  const handleTypeChange = (event) => {\r\n    setFeedbackType(event.target.value);\r\n  };\r\n  \r\n  // Handle feedback text change\r\n  const handleTextChange = (event) => {\r\n    setFeedbackText(event.target.value);\r\n  };\r\n  \r\n  // Capture screenshot\r\n  const captureScreenshot = async () => {\r\n    try {\r\n      setIsCapturingScreenshot(true);\r\n      \r\n      // Hide the widget temporarily for screenshot\r\n      if (widgetRef.current) {\r\n        widgetRef.current.style.display = 'none';\r\n      }\r\n      \r\n      // Capture the screen\r\n      const canvas = await html2canvas(document.body);\r\n      const screenshot = canvas.toDataURL('image/png');\r\n      \r\n      // Show the widget again\r\n      if (widgetRef.current) {\r\n        widgetRef.current.style.display = 'block';\r\n      }\r\n      \r\n      setScreenshotData(screenshot);\r\n      setIsCapturingScreenshot(false);\r\n    } catch (error) {\r\n      console.error('Error capturing screenshot:', error);\r\n      setError('Failed to capture screenshot. Please try again.');\r\n      setIsCapturingScreenshot(false);\r\n      \r\n      // Make sure widget is visible again\r\n      if (widgetRef.current) {\r\n        widgetRef.current.style.display = 'block';\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Remove screenshot\r\n  const removeScreenshot = () => {\r\n    setScreenshotData(null);\r\n  };\r\n  \r\n  // Submit feedback\r\n  const submitFeedback = async () => {\r\n    if (!feedbackText.trim()) {\r\n      setError('Please provide feedback text');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      await feedbackService.submitFeedback({\r\n        type: feedbackType,\r\n        content: feedbackText,\r\n        screenshot: screenshotData\r\n      });\r\n      \r\n      setSuccess(true);\r\n      setFeedbackText('');\r\n      setScreenshotData(null);\r\n      \r\n      // Close the widget after a delay\r\n      setTimeout(() => {\r\n        setIsOpen(false);\r\n        setSuccess(false);\r\n      }, 3000);\r\n    } catch (error) {\r\n      console.error('Error submitting feedback:', error);\r\n      setError(error.message || 'Failed to submit feedback. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Close the success message\r\n  const handleCloseSuccess = () => {\r\n    setSuccess(false);\r\n  };\r\n  \r\n  // Close the error message\r\n  const handleCloseError = () => {\r\n    setError(null);\r\n  };\r\n  \r\n  return (\r\n    <Box \r\n      ref={widgetRef}\r\n      sx={{\r\n        position: 'fixed',\r\n        bottom: '20px',\r\n        right: '20px',\r\n        zIndex: 1000\r\n      }}\r\n    >\r\n      {/* Success message */}\r\n      <Snackbar \r\n        open={success} \r\n        autoHideDuration={3000} \r\n        onClose={handleCloseSuccess}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n      >\r\n        <Alert \r\n          onClose={handleCloseSuccess} \r\n          severity=\"success\" \r\n          sx={{ width: '100%' }}\r\n        >\r\n          Feedback submitted successfully!\r\n        </Alert>\r\n      </Snackbar>\r\n      \r\n      {/* Error message */}\r\n      <Snackbar \r\n        open={!!error} \r\n        autoHideDuration={5000} \r\n        onClose={handleCloseError}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n      >\r\n        <Alert \r\n          onClose={handleCloseError} \r\n          severity=\"error\" \r\n          sx={{ width: '100%' }}\r\n        >\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n      \r\n      {/* Feedback widget */}\r\n      <Fade in={isOpen}>\r\n        <Paper \r\n          elevation={3} \r\n          sx={{ \r\n            width: 320,\r\n            mb: 2,\r\n            overflow: 'hidden',\r\n            display: isOpen ? 'block' : 'none'\r\n          }}\r\n        >\r\n          {/* Header */}\r\n          <Box \r\n            sx={{ \r\n              display: 'flex', \r\n              alignItems: 'center', \r\n              justifyContent: 'space-between',\r\n              bgcolor: 'primary.main',\r\n              color: 'primary.contrastText',\r\n              px: 2,\r\n              py: 1\r\n            }}\r\n          >\r\n            <Typography variant=\"subtitle1\">\r\n              Provide Feedback\r\n            </Typography>\r\n            <IconButton \r\n              size=\"small\" \r\n              onClick={toggleWidget}\r\n              sx={{ color: 'primary.contrastText' }}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n          \r\n          {/* Basic feedback form */}\r\n          <Box sx={{ p: 2 }}>\r\n            <FormControl \r\n              fullWidth \r\n              variant=\"outlined\" \r\n              margin=\"normal\" \r\n              size=\"small\"\r\n            >\r\n              <InputLabel id=\"feedback-type-label\">Feedback Type</InputLabel>\r\n              <Select\r\n                labelId=\"feedback-type-label\"\r\n                id=\"feedback-type\"\r\n                value={feedbackType}\r\n                onChange={handleTypeChange}\r\n                label=\"Feedback Type\"\r\n                disabled={loading}\r\n              >\r\n                {feedbackTypes.map((type) => (\r\n                  <MenuItem key={type.value} value={type.value}>\r\n                    {type.label}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            <TextField\r\n              fullWidth\r\n              multiline\r\n              rows={4}\r\n              margin=\"normal\"\r\n              label=\"Your Feedback\"\r\n              placeholder=\"Tell us what you think...\"\r\n              value={feedbackText}\r\n              onChange={handleTextChange}\r\n              disabled={loading}\r\n            />\r\n            \r\n            {/* Screenshot preview */}\r\n            {screenshotData && (\r\n              <Box \r\n                sx={{ \r\n                  mt: 1, \r\n                  position: 'relative', \r\n                  width: '100%',\r\n                  height: 150,\r\n                  borderRadius: 1,\r\n                  overflow: 'hidden'\r\n                }}\r\n              >\r\n                <img \r\n                  src={screenshotData} \r\n                  alt=\"Screenshot\" \r\n                  style={{ \r\n                    width: '100%', \r\n                    height: '100%', \r\n                    objectFit: 'cover' \r\n                  }} \r\n                />\r\n                <IconButton\r\n                  size=\"small\"\r\n                  sx={{\r\n                    position: 'absolute',\r\n                    top: 5,\r\n                    right: 5,\r\n                    bgcolor: 'rgba(0, 0, 0, 0.5)',\r\n                    color: 'white',\r\n                    '&:hover': {\r\n                      bgcolor: 'rgba(0, 0, 0, 0.7)',\r\n                    }\r\n                  }}\r\n                  onClick={removeScreenshot}\r\n                >\r\n                  <CloseIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Box>\r\n            )}\r\n            \r\n            {/* Advanced options */}\r\n            <Box sx={{ mt: 2 }}>\r\n              <Box \r\n                onClick={toggleExpanded}\r\n                sx={{ \r\n                  display: 'flex', \r\n                  alignItems: 'center',\r\n                  cursor: 'pointer',\r\n                  color: 'text.secondary'\r\n                }}\r\n              >\r\n                <ExpandMoreIcon \r\n                  sx={{ \r\n                    transform: isExpanded ? 'rotate(180deg)' : 'rotate(0)',\r\n                    transition: 'transform 0.3s'\r\n                  }} \r\n                />\r\n                <Typography variant=\"body2\">\r\n                  Advanced Options\r\n                </Typography>\r\n              </Box>\r\n              \r\n              <Collapse in={isExpanded}>\r\n                <Box sx={{ mt: 1, display: 'flex', gap: 1 }}>\r\n                  <Tooltip title=\"Take Screenshot\">\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      startIcon={<CameraIcon />}\r\n                      onClick={captureScreenshot}\r\n                      disabled={loading || isCapturingScreenshot}\r\n                    >\r\n                      {isCapturingScreenshot ? (\r\n                        <CircularProgress size={20} />\r\n                      ) : (\r\n                        'Screenshot'\r\n                      )}\r\n                    </Button>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Collapse>\r\n            </Box>\r\n            \r\n            {/* Submit button */}\r\n            <Box \r\n              sx={{ \r\n                mt: 2, \r\n                display: 'flex', \r\n                justifyContent: 'flex-end' \r\n              }}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                endIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <SendIcon />}\r\n                onClick={submitFeedback}\r\n                disabled={loading || !feedbackText.trim()}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </Paper>\r\n      </Fade>\r\n      \r\n      {/* Toggle button */}\r\n      <Tooltip title={isOpen ? \"Close Feedback\" : \"Provide Feedback\"}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          aria-label=\"feedback\"\r\n          onClick={toggleWidget}\r\n          startIcon={<FeedbackIcon />}\r\n          sx={{ \r\n            borderRadius: '50%',\r\n            minWidth: '56px',\r\n            width: '56px',\r\n            height: '56px',\r\n            p: 0,\r\n            '& .MuiButton-startIcon': {\r\n              margin: 0\r\n            }\r\n          }}\r\n        >\r\n          <span className=\"sr-only\">Feedback</span>\r\n        </Button>\r\n      </Tooltip>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FeedbackWidget; "],"names":["feedbackItems","feedbackCategories","categoryKeywords","submitFeedback","feedbackData","user","authService","checkAuthStatus","Error","feedbackId","Date","now","Math","floor","random","category","this","categorizeFeedback","content","feedbackItem","id","userId","userEmail","email","type","sentiment","analyzeSentiment","screenshot","metadata","browser","getBrowserInfo","url","window","location","href","timestamp","toISOString","appVersion","process","REACT_APP_VERSION","status","push","console","log","error","getUserFeedback","filter","item","getAllFeedback","isAdmin","contentLower","toLowerCase","scores","keywords","Object","entries","keyword","includes","maxScore","maxCategory","score","positiveWords","negativeWords","positiveScore","negativeScore","word","userAgent","navigator","browserName","match","name","platform","language","screenSize","screen","width","height","getCategories","updateFeedbackStatus","feedbackIndex","findIndex","FeedbackWidget","isOpen","setIsOpen","useState","isExpanded","setIsExpanded","loading","setLoading","success","setSuccess","setError","feedbackType","setFeedbackType","feedbackText","setFeedbackText","screenshotData","setScreenshotData","isCapturingScreenshot","setIsCapturingScreenshot","widgetRef","useRef","toggleWidget","handleCloseSuccess","handleCloseError","_jsxs","Box","ref","sx","position","bottom","right","zIndex","children","_jsx","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","Fade","in","Paper","elevation","mb","overflow","display","alignItems","justifyContent","bgcolor","color","px","py","Typography","variant","IconButton","size","onClick","CloseIcon","p","FormControl","fullWidth","margin","InputLabel","Select","labelId","value","onChange","event","target","label","disabled","map","MenuItem","TextField","multiline","rows","placeholder","mt","borderRadius","src","alt","style","objectFit","top","removeScreenshot","fontSize","toggleExpanded","cursor","ExpandMoreIcon","transform","transition","Collapse","gap","Tooltip","title","Button","startIcon","CameraIcon","async","current","html2canvas","document","body","toDataURL","CircularProgress","endIcon","SendIcon","trim","feedbackService","setTimeout","message","FeedbackIcon","minWidth","className"],"sourceRoot":""}