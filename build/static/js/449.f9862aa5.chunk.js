"use strict";(self.webpackChunktour_guide_ai=self.webpackChunktour_guide_ai||[]).push([[449],{449:(e,t,r)=>{r.r(t),r.d(t,{default:()=>b});var a=r(483),n=r(376),s=r(826);let o={apiKey:"",model:"gpt-4o",apiEndpoint:"https://api.openai.com/v1/chat/completions",debug:!1};const i=e=>{if(!e||"string"!==typeof e||e.length<10)throw new Error("Invalid API key format");return o.apiKey=e,console.log("OpenAI API key configured successfully"),!0},u=e=>(o.debug=!!e,console.log("Debug mode "+(o.debug?"enabled":"disabled")),!0);i("your_openai_api_key_here"),u(!1);const c=(e,t)=>{o.debug&&console.log(`[OpenAI API] ${e}`,t||"")},d=()=>s.A.create({baseURL:o.apiBaseUrl,headers:o.useServerProxy?{}:{"Content-Type":"application/json",Authorization:`Bearer ${o.apiKey}`},timeout:6e4}),l=async function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!o.apiKey&&!o.useServerProxy)throw new Error("OpenAI API key not configured. Use setApiKey() to configure it.");const r=d();try{let n;if(o.useServerProxy){c("Using server proxy for API call",{useProxy:!0,messages:e});let a="/openai/chat";return t.endpoint&&(a=`/openai/${t.endpoint}`),n=await r.post(a,{messages:e,options:{model:t.model||o.model,temperature:void 0!==t.temperature?t.temperature:.7,max_tokens:t.max_tokens||2e3}}),n.data.result}{c("Making direct API call with options",{useProxy:!1,messages:e,options:t});const s={model:t.model||o.model,messages:e,temperature:void 0!==t.temperature?t.temperature:.7,max_tokens:t.max_tokens||2e3,top_p:t.top_p||1,frequency_penalty:t.frequency_penalty||0,presence_penalty:t.presence_penalty||0,response_format:t.response_format||{type:"json_object"}};n=await r.post("https://api.openai.com/v1/chat/completions",s);const i=n.data.choices[0].message.content;try{return JSON.parse(i)}catch(a){return c("Error parsing JSON response",{error:a,content:i}),{raw_content:i,error:"JSON_PARSE_ERROR"}}}}catch(n){throw console.error("Error calling OpenAI API:",n),n}},p=async e=>{if(c("Recognizing text intent for:",e),!o.useServerProxy){const t=[{role:"system",content:'You are a travel planning assistant that extracts travel intent from user queries.\n        Extract the following information from the user\'s query and return as a JSON object:\n        - arrival: destination location\n        - departure: departure location (if mentioned)\n        - arrival_date: arrival date or time period (if mentioned)\n        - departure_date: departure date (if mentioned)\n        - travel_duration: duration of the trip (e.g., "3 days", "weekend", "week")\n        - entertainment_prefer: preferred entertainment or activities (if mentioned)\n        - transportation_prefer: preferred transportation methods (if mentioned)\n        - accommodation_prefer: preferred accommodation types (if mentioned)\n        - total_cost_prefer: budget information (if mentioned)\n        - user_time_zone: inferred time zone (default to "Unknown")\n        - user_personal_need: any special requirements or preferences (if mentioned)\n        \n        If any field is not mentioned, use an empty string.'},{role:"user",content:e}];return await l(t,{temperature:.3})}{const r=d();try{return(await r.post("/openai/recognize-intent",{text:e})).data.intent}catch(t){throw console.error("Error recognizing text intent:",t),t}}},m=async e=>{if(c("Generating route for:",e),!o.useServerProxy){const t=await p(e),r=[{role:"system",content:"You are a travel planning assistant that creates detailed travel itineraries.\n        Create a comprehensive travel plan based on the user's query and the extracted intent.\n        Include the following in your response as a JSON object:\n        - route_name: A catchy name for this travel route\n        - destination: The main destination\n        - duration: Duration of the trip in days\n        - start_date: Suggested start date (if applicable)\n        - end_date: Suggested end date (if applicable)\n        - overview: A brief overview of the trip\n        - highlights: Array of top highlights/attractions\n        - daily_itinerary: Array of day objects with activities\n        - estimated_costs: Breakdown of estimated costs\n        - recommended_transportation: Suggestions for getting around\n        - accommodation_suggestions: Array of accommodation options\n        - best_time_to_visit: Information about ideal visiting periods\n        - travel_tips: Array of useful tips for this destination"},{role:"user",content:`Generate a travel plan for: "${e}".\n        \n        Here's what I've understood about this request:\n        Destination: ${t.arrival||"Not specified"}\n        Duration: ${t.travel_duration||"Not specified"}\n        Arrival date: ${t.arrival_date||"Not specified"}\n        Entertainment preferences: ${t.entertainment_prefer||"Not specified"}\n        Transportation preferences: ${t.transportation_prefer||"Not specified"}\n        Accommodation preferences: ${t.accommodation_prefer||"Not specified"}\n        Budget: ${t.total_cost_prefer||"Not specified"}\n        Special needs: ${t.user_personal_need||"Not specified"}`}];return await l(r,{temperature:.7,max_tokens:2500})}{const r=d();try{const t=(await r.post("/openai/recognize-intent",{text:e})).data.intent;return(await r.post("/openai/generate-route",{text:e,intent:t})).data.route}catch(t){throw console.error("Error generating route:",t),t}}},_=async()=>{if(c("Generating random route"),!o.useServerProxy){const e=[{role:"system",content:"You are a travel planning assistant that creates surprising and interesting travel itineraries.\n        Create a completely random but interesting travel itinerary to a destination that most travelers find appealing.\n        Include the following in your response as a JSON object:\n        - route_name: A catchy name for this travel route\n        - destination: The main destination you've chosen\n        - duration: Duration of the trip in days (choose something between 2-7 days)\n        - overview: A brief overview of the trip\n        - highlights: Array of top highlights/attractions\n        - daily_itinerary: Array of day objects with activities\n        - estimated_costs: Breakdown of estimated costs\n        - recommended_transportation: Suggestions for getting around\n        - accommodation_suggestions: Array of accommodation options\n        - travel_tips: Array of useful tips for this destination"},{role:"user",content:"Surprise me with an interesting travel itinerary to somewhere exciting!"}];return await l(e,{temperature:.9,max_tokens:2500})}{const t=d();try{return(await t.post("/openai/generate-random-route")).data.route}catch(e){throw console.error("Error generating random route:",e),e}}},h=()=>({isConfigured:!!o.apiKey||o.useServerProxy,model:o.model,debug:o.debug,useServerProxy:o.useServerProxy});var f=r(723);const g=()=>{const[e,t]=(0,a.useState)({openai:!1,maps:!1,checking:!0,error:null});return(0,a.useEffect)((()=>{(async()=>{try{const e=await h();t({openai:e.isConfigured,maps:!0,checking:!1,error:null})}catch(e){t({openai:!1,maps:!1,checking:!1,error:e.message})}})()}),[]),e.checking?(0,f.jsx)("div",{className:"api-status",children:"Checking API status..."}):e.error?(0,f.jsxs)("div",{className:"api-status api-status-error",children:[(0,f.jsx)("h3",{children:"API Status Error"}),(0,f.jsx)("p",{children:e.error}),(0,f.jsx)("p",{children:"Please check your API configuration in the .env file."})]}):(0,f.jsxs)("div",{className:"api-status",children:[(0,f.jsx)("h3",{children:"API Status"}),(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{className:e.openai?"api-connected":"api-disconnected",children:["OpenAI API: ",e.openai?"Connected":"Not Connected",!e.openai&&(0,f.jsx)("p",{className:"api-help",children:"Please set your OpenAI API key in the .env file (REACT_APP_OPENAI_API_KEY)."})]}),(0,f.jsxs)("li",{className:e.maps?"api-connected":"api-disconnected",children:["Google Maps API: ",e.maps?"Connected":"Not Connected",!e.maps&&(0,f.jsx)("p",{className:"api-help",children:"Please set your Google Maps API key in the .env file (REACT_APP_GOOGLE_MAPS_API_KEY)."})]})]})]})},v=[{user_profile:"https://randomuser.me/api/portraits/men/1.jpg",user_name:"uid001",user_route_id:"uid001-1",upvotes:100,user_route_name:"A 3-day US travel plan",created_date:"2025-01-01"},{user_profile:"https://randomuser.me/api/portraits/women/2.jpg",user_name:"uid002",user_route_id:"uid002-1",upvotes:85,user_route_name:"Paris weekend getaway",created_date:"2025-01-02"},{user_profile:"https://randomuser.me/api/portraits/men/3.jpg",user_name:"uid003",user_route_id:"uid003-1",upvotes:72,user_route_name:"Tokyo adventure",created_date:"2025-01-03"}],y=[{upvote_rank_number:1,user_profile:"https://randomuser.me/api/portraits/men/1.jpg",user_name:"uid001",user_route_id:"uid001-1",upvotes:100,user_route_name:"A 3-day US travel plan",created_date:"2025-01-01"},{upvote_rank_number:2,user_profile:"https://randomuser.me/api/portraits/women/2.jpg",user_name:"uid002",user_route_id:"uid002-1",upvotes:85,user_route_name:"Paris weekend getaway",created_date:"2025-01-02"},{upvote_rank_number:3,user_profile:"https://randomuser.me/api/portraits/men/3.jpg",user_name:"uid003",user_route_id:"uid003-1",upvotes:72,user_route_name:"Tokyo adventure",created_date:"2025-01-03"},{upvote_rank_number:4,user_profile:"https://randomuser.me/api/portraits/women/4.jpg",user_name:"uid004",user_route_id:"uid004-1",upvotes:65,user_route_name:"Rome historical tour",created_date:"2025-01-04"},{upvote_rank_number:5,user_profile:"https://randomuser.me/api/portraits/men/5.jpg",user_name:"uid005",user_route_id:"uid005-1",upvotes:58,user_route_name:"Barcelona beach vacation",created_date:"2025-01-05"}],x=()=>{const e=["#ffcdd2","#f8bbd0","#e1bee7","#d1c4e9","#c5cae9","#bbdefb","#b3e5fc","#b2ebf2","#b2dfdb","#c8e6c9","#dcedc8","#f0f4c3","#fff9c4","#ffecb3","#ffe0b2"];return e[Math.floor(Math.random()*e.length)]},b=()=>{const e=(0,n.Zp)(),[t,r]=(0,a.useState)(""),[s,o]=(0,a.useState)(!1),[i,u]=(0,a.useState)(null),c=t=>{e("/map",{state:{routeId:t}})};return(0,f.jsxs)("div",{className:"chat-page",children:[(0,f.jsx)("h1",{className:"page-title",children:"Your personal tour guide!"}),(0,f.jsx)(g,{}),(0,f.jsxs)("div",{className:"chat-container",children:[(0,f.jsxs)("div",{className:"input-section",children:[(0,f.jsx)("textarea",{className:"input-box",placeholder:"Tell me about your dream vacation...",value:t,onChange:e=>r(e.target.value)}),(0,f.jsxs)("div",{className:"button-group",children:[(0,f.jsx)("button",{className:"btn btn-primary generate-btn",onClick:async()=>{if(t.trim()){o(!0),u(null);try{const r=await p(t),a=await m(t);e("/map",{state:{userQuery:t,intentData:r,routeData:a}})}catch(r){console.error("Error generating route:",r),u("Failed to generate route. Please try again.")}finally{o(!1)}}},disabled:!t.trim()||s,children:s?"Generating...":"Generate your first plan!"}),(0,f.jsx)("button",{className:"btn btn-secondary lucky-btn",onClick:async()=>{o(!0),u(null);try{const t=await _();e("/map",{state:{userQuery:"Random destination",intentData:null,routeData:t}})}catch(t){console.error("Error generating random route:",t),u("Failed to generate random route. Please try again.")}finally{o(!1)}},disabled:!t.trim()||s,children:"Feel lucky?"})]}),i&&(0,f.jsx)("div",{className:"error-message",children:i})]}),(0,f.jsxs)("div",{className:"content-section",children:[(0,f.jsxs)("div",{className:"live-popup-section",children:[(0,f.jsx)("h2",{children:"Live Activity"}),(0,f.jsx)("div",{className:"popup-container",children:v.map(((t,r)=>(0,f.jsxs)("div",{className:"popup-item",style:{backgroundColor:x()},onClick:()=>{return r=t.user_route_id,void e("/map",{state:{routeId:r}});var r},children:[(0,f.jsx)("img",{src:t.user_profile,alt:t.user_name,className:"user-avatar"}),(0,f.jsxs)("div",{className:"popup-content",children:[(0,f.jsx)("p",{className:"user-name",children:t.user_name}),(0,f.jsx)("p",{className:"route-name",children:t.user_route_name})]})]},r)))})]}),(0,f.jsxs)("div",{className:"rankboard-section",children:[(0,f.jsx)("h2",{children:"Top Routes"}),(0,f.jsxs)("div",{className:"rankboard-container",children:[(0,f.jsx)("div",{className:"top-three",children:y.slice(0,3).map((e=>(0,f.jsxs)("div",{className:"medal-item",onClick:()=>c(e.user_route_id),children:[(0,f.jsxs)("div",{className:`medal rank-${e.upvote_rank_number}`,children:[(0,f.jsx)("img",{src:e.user_profile,alt:e.user_name,className:"user-avatar"}),(0,f.jsx)("div",{className:"upvote-badge",children:e.upvotes})]}),(0,f.jsx)("p",{className:"user-name",children:e.user_name}),(0,f.jsx)("p",{className:"route-name",children:e.user_route_name})]},e.upvote_rank_number)))}),(0,f.jsx)("div",{className:"other-ranks",children:y.slice(3).map((e=>(0,f.jsxs)("div",{className:"rank-item",onClick:()=>c(e.user_route_id),children:[(0,f.jsx)("div",{className:"rank-number",children:e.upvote_rank_number}),(0,f.jsxs)("div",{className:"rank-details",children:[(0,f.jsx)("p",{className:"route-name",children:e.user_route_name}),(0,f.jsxs)("p",{className:"upvotes",children:[e.upvotes," upvotes"]})]})]},e.upvote_rank_number)))})]})]})]})]})]})}}}]);
//# sourceMappingURL=449.f9862aa5.chunk.js.map