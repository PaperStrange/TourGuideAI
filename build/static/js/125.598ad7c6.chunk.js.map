{"version":3,"file":"static/js/125.598ad7c6.chunk.js","mappings":"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","sources":["pages/ProfilePage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../styles/ProfilePage.css';\r\n\r\n// Mock data for user profile and routes\r\nconst mockUserData = {\r\n  user_id: \"uid001\",\r\n  user_name: \"TravelExplorer\",\r\n  user_profile: \"https://randomuser.me/api/portraits/men/1.jpg\"\r\n};\r\n\r\nconst mockRoutes = [\r\n  {\r\n    user_profile: \"https://randomuser.me/api/portraits/men/1.jpg\",\r\n    user_id: \"uid001\",\r\n    user_route_id: \"uid001-1\",\r\n    user_route_rank: 1,\r\n    created_date: \"2025-01-01\",\r\n    upvotes: 100,\r\n    views: 500,\r\n    route_name: \"A 3-day US travel plan\",\r\n    sites_included_in_routes: 50,\r\n    route_duration: \"3 days\",\r\n    estimated_cost: \"3000$\"\r\n  },\r\n  {\r\n    user_profile: \"https://randomuser.me/api/portraits/men/1.jpg\",\r\n    user_id: \"uid001\",\r\n    user_route_id: \"uid001-2\",\r\n    user_route_rank: 5,\r\n    created_date: \"2025-01-05\",\r\n    upvotes: 75,\r\n    views: 320,\r\n    route_name: \"Weekend in Paris\",\r\n    sites_included_in_routes: 15,\r\n    route_duration: \"2 days\",\r\n    estimated_cost: \"2500$\"\r\n  },\r\n  {\r\n    user_profile: \"https://randomuser.me/api/portraits/men/1.jpg\",\r\n    user_id: \"uid001\",\r\n    user_route_id: \"uid001-3\",\r\n    user_route_rank: 12,\r\n    created_date: \"2025-01-10\",\r\n    upvotes: 45,\r\n    views: 210,\r\n    route_name: \"Tokyo adventure\",\r\n    sites_included_in_routes: 25,\r\n    route_duration: \"5 days\",\r\n    estimated_cost: \"4500$\"\r\n  },\r\n  {\r\n    user_profile: \"https://randomuser.me/api/portraits/men/1.jpg\",\r\n    user_id: \"uid001\",\r\n    user_route_id: \"uid001-4\",\r\n    user_route_rank: 20,\r\n    created_date: \"2025-01-15\",\r\n    upvotes: 30,\r\n    views: 150,\r\n    route_name: \"Rome historical tour\",\r\n    sites_included_in_routes: 20,\r\n    route_duration: \"4 days\",\r\n    estimated_cost: \"3500$\"\r\n  }\r\n];\r\n\r\nconst ProfilePage = () => {\r\n  const navigate = useNavigate();\r\n  const [userData, setUserData] = useState(mockUserData);\r\n  const [routes, setRoutes] = useState(mockRoutes);\r\n  const [sortBy, setSortBy] = useState('created_date');\r\n  const [sortOrder, setSortOrder] = useState('desc');\r\n  \r\n  // Mock function for route_statics\r\n  const calculateRouteStatistics = (route) => {\r\n    console.log('Calculating route statistics for:', route.route_name);\r\n    // In a real implementation, this would call APIs to get prices for entertainment, hotels, and transportation\r\n    return {\r\n      sites: route.sites_included_in_routes,\r\n      duration: route.route_duration,\r\n      cost: route.estimated_cost\r\n    };\r\n  };\r\n  \r\n  // Mock function for rank_route\r\n  const sortRoutes = (routes, sortBy, order) => {\r\n    console.log(`Sorting routes by ${sortBy} in ${order} order`);\r\n    // In a real implementation, this would sort the routes based on the selected criteria\r\n    \r\n    return [...routes].sort((a, b) => {\r\n      let comparison = 0;\r\n      \r\n      switch (sortBy) {\r\n        case 'created_date':\r\n          comparison = new Date(a.created_date) - new Date(b.created_date);\r\n          break;\r\n        case 'upvotes':\r\n          comparison = a.upvotes - b.upvotes;\r\n          break;\r\n        case 'views':\r\n          comparison = a.views - b.views;\r\n          break;\r\n        case 'sites':\r\n          comparison = a.sites_included_in_routes - b.sites_included_in_routes;\r\n          break;\r\n        case 'cost':\r\n          comparison = parseFloat(a.estimated_cost) - parseFloat(b.estimated_cost);\r\n          break;\r\n        default:\r\n          comparison = 0;\r\n      }\r\n      \r\n      return order === 'asc' ? comparison : -comparison;\r\n    });\r\n  };\r\n  \r\n  // Handle sort change\r\n  const handleSortChange = (newSortBy) => {\r\n    if (sortBy === newSortBy) {\r\n      // Toggle sort order if clicking the same sort option\r\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      // Set new sort by and default to descending order\r\n      setSortBy(newSortBy);\r\n      setSortOrder('desc');\r\n    }\r\n  };\r\n  \r\n  // Handle route click\r\n  const handleRouteClick = (routeId) => {\r\n    navigate('/map', { state: { routeId } });\r\n  };\r\n  \r\n  // Get sorted routes\r\n  const sortedRoutes = sortRoutes(routes, sortBy, sortOrder);\r\n\r\n  return (\r\n    <div className=\"profile-page\">\r\n      <h1 className=\"page-title\">User Profile</h1>\r\n      \r\n      <div className=\"profile-container\">\r\n        <div className=\"profile-header\">\r\n          {/* Element 1: User Name */}\r\n          <h2 className=\"user-name\">{userData.user_name}</h2>\r\n          \r\n          {/* Element 2: User Profile Media */}\r\n          <div className=\"profile-image-container\">\r\n            <img \r\n              src={userData.user_profile} \r\n              alt={userData.user_name} \r\n              className=\"profile-image\" \r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Element 3: Routes Board */}\r\n        <div className=\"routes-board\">\r\n          <div className=\"routes-header\">\r\n            <h2>Your Travel Routes</h2>\r\n            <div className=\"sort-options\">\r\n              <span>Sort by:</span>\r\n              <button \r\n                className={`sort-btn ${sortBy === 'created_date' ? 'active' : ''}`}\r\n                onClick={() => handleSortChange('created_date')}\r\n              >\r\n                Date {sortBy === 'created_date' && (sortOrder === 'asc' ? 'â†‘' : 'â†“')}\r\n              </button>\r\n              <button \r\n                className={`sort-btn ${sortBy === 'upvotes' ? 'active' : ''}`}\r\n                onClick={() => handleSortChange('upvotes')}\r\n              >\r\n                Upvotes {sortBy === 'upvotes' && (sortOrder === 'asc' ? 'â†‘' : 'â†“')}\r\n              </button>\r\n              <button \r\n                className={`sort-btn ${sortBy === 'views' ? 'active' : ''}`}\r\n                onClick={() => handleSortChange('views')}\r\n              >\r\n                Views {sortBy === 'views' && (sortOrder === 'asc' ? 'â†‘' : 'â†“')}\r\n              </button>\r\n              <button \r\n                className={`sort-btn ${sortBy === 'sites' ? 'active' : ''}`}\r\n                onClick={() => handleSortChange('sites')}\r\n              >\r\n                Sites {sortBy === 'sites' && (sortOrder === 'asc' ? 'â†‘' : 'â†“')}\r\n              </button>\r\n              <button \r\n                className={`sort-btn ${sortBy === 'cost' ? 'active' : ''}`}\r\n                onClick={() => handleSortChange('cost')}\r\n              >\r\n                Cost {sortBy === 'cost' && (sortOrder === 'asc' ? 'â†‘' : 'â†“')}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"routes-list\">\r\n            {sortedRoutes.map((route) => {\r\n              const stats = calculateRouteStatistics(route);\r\n              \r\n              return (\r\n                <div \r\n                  key={route.user_route_id} \r\n                  className=\"route-card\"\r\n                  onClick={() => handleRouteClick(route.user_route_id)}\r\n                >\r\n                  <div className=\"route-info\">\r\n                    <h3 className=\"route-name\">{route.route_name}</h3>\r\n                    <p className=\"route-date\">Created: {route.created_date}</p>\r\n                    \r\n                    <div className=\"route-stats\">\r\n                      <div className=\"stat-item\">\r\n                        <span className=\"stat-label\">Duration:</span>\r\n                        <span className=\"stat-value\">{stats.duration}</span>\r\n                      </div>\r\n                      <div className=\"stat-item\">\r\n                        <span className=\"stat-label\">Sites:</span>\r\n                        <span className=\"stat-value\">{stats.sites}</span>\r\n                      </div>\r\n                      <div className=\"stat-item\">\r\n                        <span className=\"stat-label\">Est. Cost:</span>\r\n                        <span className=\"stat-value\">{stats.cost}</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"route-metrics\">\r\n                    <div className=\"metric\">\r\n                      <span className=\"metric-value\">{route.upvotes}</span>\r\n                      <span className=\"metric-label\">Upvotes</span>\r\n                    </div>\r\n                    <div className=\"metric\">\r\n                      <span className=\"metric-value\">{route.views}</span>\r\n                      <span className=\"metric-label\">Views</span>\r\n                    </div>\r\n                    <div className=\"metric\">\r\n                      <span className=\"metric-value\">#{route.user_route_rank}</span>\r\n                      <span className=\"metric-label\">Rank</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage; "],"names":["mockUserData","user_id","user_name","user_profile","mockRoutes","user_route_id","user_route_rank","created_date","upvotes","views","route_name","sites_included_in_routes","route_duration","estimated_cost","ProfilePage","navigate","useNavigate","userData","setUserData","useState","routes","setRoutes","sortBy","setSortBy","sortOrder","setSortOrder","handleSortChange","newSortBy","sortedRoutes","sortRoutes","order","console","log","sort","a","b","comparison","Date","parseFloat","_jsxs","className","children","_jsx","src","alt","onClick","map","route","stats","sites","duration","cost","calculateRouteStatistics","handleRouteClick","routeId","state"],"sourceRoot":""}